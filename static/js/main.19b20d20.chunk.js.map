{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/data-table.tsx","ui-components/ingredients-table.tsx","ui-components/minor-ui-components.tsx","ui-components/results-table.tsx","ui-components/settings-panel.tsx","ui-components/demon-adder.tsx","ui-components/recipes-table.tsx","demon-displayer.tsx","fusion-calculator.tsx","app.tsx","index.tsx","ui-components/scss/results-table.module.scss","fusion-calculator.module.scss","ui-components/scss/ingredients-table.module.scss","ui-components/scss/recipes-table.module.scss","ui-components/scss/settings-panel.module.scss","ui-components/scss/ui-components.module.scss","demon-displayer.module.scss","ui-components/scss/data-table.module.scss","ui-components/scss/minor-ui-components.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","specialRecipe","rank","this","statsName","FusedDemon","demon","ingredients","baseIngredientsMetadata","baseIngsMetadata","getBaseIngredientsInfo","baseIngId","count","length","ret","ingId","Object","values","getBaseIngredientsDemons","map","join","getHighestIngredientLvl","highestIngLvl","DemonsPreset","caption","demons","FusionResults","data","metadata","ingredientCountMap","populateFusionResultsIngCountMap","demonId","hasFusionResult","ingCount","Number","keys","Recipe","resultId","ingredientId","baseIngredientCost","undefined","sum","recipe","clonedRecipe","FUSION_CHART_NULLS","DemonCompendium","demonListJson","fusionChartJson","fusionSettingsJson","presetJson","demonsAry","normalFusionChart","tripleFusionChart","elementsMap","elementFusionChart","specialRecipes","demonsPresets","_sameRaceFuseToElement","_enableTripleFusion","disableSameDemonFusion","idMap","nameMap","raceIdMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseSettings","parseFusionChart","prepRaceLvlInfo","parsePresets","push","Models","clone","demonA","demonB","demonIsElement","fuseDemonWithElement","fuseDemonSameRaceNoElement","fuseDemonDiffRaceNoElement","demonC","sort","x","y","getRaceOrder","demonWeak","demonMid","demonStrong","intermediateRace","getFusionRace","resultRace","getTripleFusionRace","resultLvlTable","getLvlTableForRace","resultLvlTest","resultLvl","findResultLvlFromLvlTable","demonResult","getDemonFromRaceLvl","resultLvlIndex","indexOf","demonName","getDemonByName","randomDemonIndex","Math","floor","random","elementsIds","elementsCount","randomElementIdIndex","randomElementId","testGetDemon","results","i","demonR","fuseDemons","console","log","results2","j","tripleFuseDemons","demonsJson","Boolean","sameRaceFuseToElement","enableTripleFusion","row","raceFusionTable","col","dataStructToWriteTo","raceA","races","raceB","raceC","chart","resultName","result","ingredientsNames","ingredientName","ingredient","addIngredient","elements","elementIdIndexMap","elementName","elementFusionTable","raceId","elementId","elementIndex","presetsJson","presets","preset","presetModel","demon1","demon2","includeUnfusable","lvlTable","demonIsUnfusable","lvlToCheck","isTripleFusion","index","raceR","lvlTableR","lvlResultTest","lvlR","elementNameR","filter","element","demonRankChange","resultRank","DataTable","params","maxPage","dataTableProvider","React","useState","page","setPage","sortByCol","setSortByCol","sortDirection","setSortDirection","sortType","setSortType","pageSize","colDefs","getColumnDefinition","preIdRowData","getAllRowsData","totalRowCount","Fragment","banner","renderBanner","ceil","rowData","rd","getSortValue","bind","sortMult","comparitor","numberComparitor","stringComparitor","a","b","valA","valB","paginizedRowData","headerCells","colNum","colDef","headerContent","sortSpec","buildSortableHeaderCellContent","TableCell","headerProps","renderedRows","TableRow","renderRow","paperContainerClassName","styles","paperContainer","className","Paper","elevation","TableContainer","tableContainer","Table","TableHead","header","TableBody","tableBody","Pagination","onChange","event","value","size","headerInnerContent","colSortType","_sortByCol","_sortDirection","_sortType","TableSortLabel","active","direction","onClick","createSortHandler","setOrderBy","nextSortDirection","IngredientsSettingsEnum","WarningBannerCore","icon","warningBanner","message","WarningBanner","memo","RemoveDemonButton","IconButton","onRemoveIngredient","removeDemonButton","removeDemonButtonIcon","CheckboxSetting","setting","ingredientsSettings","defaultChecked","mustUse","multipleUse","Checkbox","checkBox","checked","target","color","FusionIngredientsDataTableProvider","allRowsData","demonCompendium","nameColumnHeader","raceColumnHeader","width","align","warningIcon","IngredientsTable","initializeIngredientsSettings","useMemo","getDemonById","dataProvider","dataTable","FusionResultsDataTableProvider","onRecipesButtonClick","fusionResults","recipesButtonHandler","columnCount","nameColumn","lvlColumn","raceColumn","statColumn","ingredientsColumn","resultsAsRowsArray","ingCountStr","fusedDemon","renderedRow","keyId","stat","getIngredientCount","Button","variant","recipeButton","ResultsTable","props","onOpenDemonRecipes","UserSettings","charLvl","maxIngredient","useTripleFusion","useTripleFusionSettingIsVisible","SettingsPanel","eventHandlers","settings","isVisible","setIsVisible","charLvlFieldValue","setCharLvlFieldValue","maxIngFieldValue","setMaxIngFieldValue","toggleVisibility","settingsPanelStyle","height","style","settingsPanel","paper","NumberSettings","label","min","max","emptyFieldValue","fieldStateValueAndSetter","onSetSettings","newValue","CheckboxSettings","stateValueAndSetter","stateValue","stateSetter","settingsLine","numberSettings","numberFieldLabel","TextField","type","InputLabelProps","shrink","inputProps","step","valueAsNumber","FormControlLabel","control","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","selection","onKeyPress","key","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","keyIsAccepted","preventDefault","stopPropagation","valueSetterFunc","lvlFieldsContainer","selectedOption","setSelectedOption","addDemonButton","renderDemonName","isFused","baseIngredientName","renderRecipe","priorRecipes","curRecipe","isFirstLoop","ingDemon","separator","nameR","Divider","light","centerText","DemonCard","Card","recipeCard","CardContent","RecipesTable","setFilter","filteredRecipesAry","filterMap","filterOption","recipesAry","filteredAry","ingDemonsCount","getBaseIngredientsCounts","filterCheckList","ingDemonId","filterRecipesAry","filterOptions","currFilter","ingDemonsMap","ingDemons","createFilterOptions","componentContainer","multiple","filterField","defaultValue","filterSelectedOptions","pagination","hidden","recipeCardsContainer","DemonDisplayer","demonIdStr","useParams","history","useHistory","isNaN","goBackUrlPath","fusionResultsSection","section","Label","text","promise","Promise","resolver","setTimeout","calculateAllFusionCombinations","userSettings","getSpecialRecipes","viableSpecialRecipes","updateViableSpecialRecipes","ingCountR","ingCountA","ingCountB","speciesUsedAsA","idA","speciesA","idB","speciesB","speciesR","filterDemonsAfterSpeciesFusion","resultingFusedDemons","crissCrossFusedDemons","calculateTripleFusionCombinations","calculateSpecialRecipeFusion","mustUseDemons","ingSettings","prepareIngredientsSettingsForFinalFilter","filterFunction","filterDemonsAfterCalculation","demonAry","isWeakerThanIngredients","updateMetaData","ingCountNodeToRegister","recipeIngCount","registerIngredient","isViable","recipeCost","totalBaseIngredientsCost","ingCounts","fusionResultsData","getNextCombinationTuple","ingCountC","alreadyCalculatedAsA","alreadyCalculatedAsB","idC","speciesC","resultFusedDemons","currSpecialRecipes","ingredientsSpecies","ingredientsFusedDemons","missingIngredient","ingredientSpecies","ingredientCost","currentTuple","tupleSize","sumRequirement","speciesIngs","canBeMadeWithLessIngredient","sizeCheck","speciesIng","filterDemonsAfterCrissCross","baseIngCount","myMustUseDemons","demonBaseIngCount","resultSpecies","indeces","fusedDemonIngredientsHistory","hasCarry","initializeUserSettings","FusionCalculator","setIngredients","setFusionResults","fusionResultsPromise","setFusionResultsPromise","resetterKey","setResetterKey","routeMatcher","useRouteMatch","nonRenderingStates","settingsPanelEventHandlers","refResultsTable","useRef","useEffect","isMounted","fr","current","scrollIntoView","behavior","removeDemonFromIngredientsHandler","useCallback","newIngredients","path","url","fusionCalculator","loading","addDemonsAndButtonsRowContainer","buttonsRow","calculateButton","calculateAllFusionCombinationsAsync","disabled","settingsButton","resetButton","ref","Backdrop","open","CircularProgress","Game","theme","createMuiTheme","palette","typography","fontFamily","loadPersona4GoldenDemonCompendium","setLoadedCompendiumCallback","demonJsonPromise","importedJson","default","fusionChartJsonPromise","settingsJsonPromise","all","loadedJsons","newDemonCompendium","loadGameData","game","person4Golden","persona5Royal","loadPersona5RoyalDemonCompendium","devilSurvivor2","callback","presetJsonPromise","loadDesu2DemonCompendium","urlParamToGameMap","p4g","p5r","desu2","App","urlParams","setDemonCompendium","currentGame","setCurrentGame","changeGameTabHandler","gameId","gameStrCode","getGameUrlPath","gameFromUrlParam","ThemeProvider","CssBaseline","Tabs","Tab","ReactDOM","render","GitHubPageRedirect","document","getElementById","createBrowserHistory","loc","search","decoded","slice","split","s","replace","window","replaceState","pathname","hash","location","StrictMode","to","module","exports"],"mappings":"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","file":"static/js/main.19b20d20.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    specialRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    rank?: number;\r\n\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredients?: FusedDemon[];\r\n    private baseIngredientsMetadata: { [baseIngId: number]: { count: number, demon: Demon} } = {};\r\n\r\n    constructor(demon: Demon, ingredients?: FusedDemon[]) {\r\n        this.demon = demon;\r\n        this.ingredients = ingredients;\r\n\r\n        if (!ingredients) {\r\n            this.baseIngredientsMetadata[demon.id] = { count: 1, demon: demon};\r\n        } else {\r\n            for (const fusedDemon of ingredients) {\r\n                const baseIngsMetadata = fusedDemon.getBaseIngredientsInfo()\r\n                for (const baseIngId in baseIngsMetadata) {\r\n                    this.baseIngredientsMetadata[baseIngId] = this.baseIngredientsMetadata[baseIngId] || {};\r\n                    this.baseIngredientsMetadata[baseIngId].count =  (this.baseIngredientsMetadata[baseIngId].count || 0 ) + \r\n                        baseIngsMetadata[baseIngId].count;\r\n                    this.baseIngredientsMetadata[baseIngId].demon = baseIngsMetadata[baseIngId].demon;\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        if (!this.ingredients) { return false; }\r\n        return this.ingredients.length > 0;\r\n    }\r\n\r\n    public getBaseIngredientsInfo(): { [id: number]: { count: number, demon: Demon } } {\r\n        return this.baseIngredientsMetadata;\r\n    }\r\n\r\n    public getBaseIngredientsDemons(): { [id: number]: Demon } {\r\n        let ret: { [id: number]: Demon } = {};\r\n        for (const ingId in this.baseIngredientsMetadata) {\r\n            ret[ingId] = this.baseIngredientsMetadata[ingId].demon;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    public getBaseIngredientsCounts(): { [id: number]: number } {\r\n        let ret: { [id: number]: number } = {};\r\n        for (const ingId in this.baseIngredientsMetadata) {\r\n            ret[ingId] = this.baseIngredientsMetadata[ingId].count;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        return Object.values(this.getBaseIngredientsDemons()).map(demon => demon.name).join(\" \");\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredients) {\r\n            for (const ingDemon of this.ingredients) {\r\n                let highestIngLvl: number = ingDemon.getHighestIngredientLvl();\r\n                if (highestIngLvl > lvl) { lvl = highestIngLvl; }\r\n            }\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport class FusionResults {\r\n    data: { [ingredientCount: number]: { [demonId: number]: FusedDemon[] } };\r\n    metadata: {\r\n        ingredientCountMap: { [demonId: number]: number }\r\n    };\r\n\r\n    constructor() {\r\n        this.data = {};\r\n        this.metadata = { ingredientCountMap: {} };\r\n    }\r\n\r\n    public updateMetaData(): void {\r\n        this.populateFusionResultsIngCountMap();\r\n    }\r\n\r\n    public getIngredientCount(demonId: number): number | undefined {\r\n        return this.metadata.ingredientCountMap[demonId];\r\n    }\r\n\r\n    public hasFusionResult(): boolean {\r\n        let hasFusionResult = false;\r\n        for (const ingCount in this.data) {\r\n            if (Number(ingCount) === 1) { continue; }\r\n            if (Object.keys(this.data[ingCount]).length > 0) { \r\n                hasFusionResult = true;\r\n                break; }\r\n        }\r\n        return hasFusionResult;\r\n    }\r\n\r\n    private populateFusionResultsIngCountMap(): void {\r\n        for (const ingCount in this.data) {\r\n            for (const id in this.data[ingCount]) {\r\n                this.metadata.ingredientCountMap[Number(id)] = Number(ingCount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Recipe {\r\n    resultId: number;\r\n    ingredients: { [demonId: number]: number } = {};\r\n\r\n    constructor(resultId: number) {\r\n        this.resultId = resultId;\r\n    }\r\n\r\n    public static clone(recipe: Recipe): Recipe {\r\n        const clonedRecipe = new Recipe(recipe.resultId);\r\n        clonedRecipe.ingredients = {...recipe.ingredients};\r\n        return clonedRecipe;\r\n    }\r\n\r\n    public addIngredient(ingredientId: number) {\r\n        this.ingredients[ingredientId] = 0;\r\n    }\r\n\r\n    public registerIngredient(ingredientId: number, baseIngredientCost?: number): boolean {\r\n        if (this.ingredients[ingredientId] === undefined) {\r\n            return false;\r\n        }\r\n        if (baseIngredientCost !== undefined && baseIngredientCost > 0) {\r\n            this.ingredients[ingredientId] = baseIngredientCost;\r\n        }\r\n        else {\r\n            this.ingredients[ingredientId] = 1;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public isViable(): boolean {\r\n        for (const ingId in this.ingredients) {\r\n            if (this.ingredients[ingId] === 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public totalBaseIngredientsCost(): number {\r\n        let sum: number = 0;\r\n        for (const ingId in this.ingredients) {\r\n            sum += this.ingredients[ingId];\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n\r\nexport type Ingredients = { [demonId: number]: boolean };\r\nexport type IngredientsSettings = { [demonId: number]: { mustUse: boolean, multipleUse: boolean } };\r\nexport type MustUseDemonsMap = { [demonId: number]: boolean };\r\nexport type SpecialRecipes = { [ingredientCount: number]: Recipe[] };","import * as Models from './data-models';\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionSettingsJson = {\r\n    sameRaceFuseToElement?: boolean,\r\n    enableTripleFusion?: boolean,\r\n    disableSameDemonFusion?: boolean,\r\n}\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    raceFusionTable: string[][],\r\n    \r\n    elements?: string[],\r\n    elementFusionTable?: number[][],\r\n    specialRecipes?: { [resultName: string]: string[] }\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetsJson = { presets: Preset[] };\r\n\r\nconst FUSION_CHART_NULLS: { [nullStr: string]: boolean } = { \"None\": true };\r\n\r\nexport class DemonCompendium {\r\n    private demonsAry: Models.Demon[] = [];\r\n    private normalFusionChart: { [race: string]: { [race: string]: string | undefined } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private tripleFusionChart: { [race: string]: { [race: string]: string | undefined } } = {};\r\n    private elementsMap: { [demonId: number]: Models.Demon } = {};\r\n    private elementFusionChart: { [race: string]: { [elementId: string]: number | undefined } } = {};\r\n    private specialRecipes: Models.SpecialRecipes = {};\r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n\r\n    private _sameRaceFuseToElement: boolean = false;\r\n    private _enableTripleFusion: boolean = false;\r\n    private disableSameDemonFusion: boolean = false;\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceIdMap: { [race: string]: number } = {}\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJson: DemonJson, fusionChartJson: FusionChartJson, fusionSettingsJson?: FusionSettingsJson, presetJson?: PresetsJson) {\r\n        this.parseDemons(demonListJson);\r\n        this.prepDemonIds();\r\n\r\n        if (fusionSettingsJson) {\r\n            this.parseSettings(fusionSettingsJson);\r\n        }\r\n\r\n        this.parseFusionChart(fusionChartJson);\r\n        this.prepRaceLvlInfo();\r\n        \r\n        if (presetJson) {\r\n            this.parsePresets(presetJson);\r\n        }\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonsAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public getSpecialRecipes(): Models.SpecialRecipes {\r\n        const ret: Models.SpecialRecipes = {};\r\n        for (const ingCount in this.specialRecipes) {\r\n            ret[ingCount] = [];\r\n            for (const recipe of this.specialRecipes[ingCount]) {\r\n                ret[ingCount].push(Models.Recipe.clone(recipe));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    public get enableTripleFusion(): boolean {\r\n        return this._enableTripleFusion;\r\n    }\r\n\r\n    public get sameRaceFuseToElement(): boolean {\r\n        return this._sameRaceFuseToElement;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.id === demonB.id && this.disableSameDemonFusion) { return undefined; }\r\n        \r\n        if (this.demonIsElement(demonA) && this.demonIsElement(demonB)) {\r\n            return undefined;\r\n        } else if (this.demonIsElement(demonA) || this.demonIsElement(demonB)) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoElement(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    public tripleFuseDemons(demonA: Models.Demon, demonB: Models.Demon, demonC: Models.Demon): Models.Demon | undefined {\r\n        if (this.disableSameDemonFusion) {\r\n            if (demonA.id === demonB.id ||\r\n                demonA.id === demonC.id ||\r\n                demonB.id === demonC.id) { return undefined; }\r\n        }\r\n\r\n        const [demonWeak, demonMid, demonStrong] = [demonA, demonB, demonC].sort((x, y) => (x.lvl !== y.lvl) ? x.lvl - y.lvl : this.getRaceOrder(y.race) - this.getRaceOrder(x.race)); // sort from lowest to highest lv. If lvs are the same, sort by race order from highest to lowest.\r\n        const intermediateRace: string | undefined = this.getFusionRace(demonWeak.race, demonMid.race);\r\n        if (!intermediateRace) { return undefined; }\r\n        const resultRace: string | undefined = this.getTripleFusionRace(intermediateRace, demonStrong.race);\r\n        if (!resultRace) { return undefined; }\r\n        const resultLvlTable: number[] = this.getLvlTableForRace(resultRace);\r\n        const resultLvlTest: number = (demonWeak.lvl + demonMid.lvl + demonStrong.lvl + 12.75) / 3;\r\n        let resultLvl: number = this.findResultLvlFromLvlTable(resultLvlTable, resultLvlTest, true);\r\n        let demonResult: Models.Demon | undefined = this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n        if (!demonResult) { return undefined; }\r\n        if (demonResult.id !== demonWeak.id && demonResult.id !== demonMid.id && demonResult.id !== demonStrong.id) {\r\n            return demonResult;\r\n        } else {\r\n            let resultLvlIndex = resultLvlTable.indexOf(resultLvl);\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            if (resultLvlIndex + 1 < resultLvlTable.length) {\r\n                resultLvl = resultLvlTable[resultLvlIndex + 1];\r\n                return this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private testGetDemon(demonName?: string): Models.Demon | undefined {\r\n        if (demonName) { return this.getDemonByName(demonName); }\r\n        if (this.demonsAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonsAry.length);\r\n        return this.demonsAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        const elementsIds = Object.keys(this.elementsMap);\r\n        const elementsCount = elementsIds.length;\r\n        if (elementsCount === 0) { return undefined };\r\n        const randomElementIdIndex: number = Math.floor(Math.random() * elementsCount);\r\n        const randomElementId: number = Number(elementsIds[randomElementIdIndex]);\r\n        return this.elementsMap[randomElementId];\r\n    }\r\n\r\n    private testFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [name: string]: Models.Demon} = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            const demonR = this.fuseDemons(demon, demonB);\r\n            if (!demonR) {continue;}\r\n            results[demonB.name] = demonR;\r\n        }\r\n        \r\n        console.log(demon);\r\n        console.log(results);\r\n    }\r\n\r\n    private testTripleFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [resultName: string]: Models.Demon[][] } = {};\r\n        const results2: { [resultName: string]: { [ing2Name: string]: string[] } } = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            for (let j = i; j < this.demonsAry.length; j++) {\r\n                const demonC = this.demonsAry[j];\r\n                const demonR = this.tripleFuseDemons(demon, demonB, demonC);\r\n                if (!demonR) {continue;}\r\n                if (!results[demonR.name]) { results[demonR.name] = []; }\r\n                if (!results2[demonR.name]) { results2[demonR.name] = {}; }\r\n                if (!results2[demonR.name][demonB.name]) { results2[demonR.name][demonB.name] = []; }\r\n                if (!results2[demonR.name][demonC.name]) { results2[demonR.name][demonC.name] = []; }\r\n                results[demonR.name].push([demonB, demonC]);\r\n                results2[demonR.name][demonB.name].push(demonC.name);\r\n                results2[demonR.name][demonC.name].push(demonB.name);\r\n            }\r\n        }\r\n        console.log(demon);\r\n        console.log(results);\r\n        console.log(results2);\r\n    }\r\n\r\n    private parseDemons(demonsJson: DemonJson): void {\r\n        Models.Demon.statsName = demonsJson.statsName;\r\n        const demons = demonsJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonsAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseSettings(fusionSettingsJson: FusionSettingsJson): void {\r\n        this._sameRaceFuseToElement = Boolean(fusionSettingsJson.sameRaceFuseToElement);\r\n        this._enableTripleFusion = Boolean(fusionSettingsJson.enableTripleFusion);\r\n        this.disableSameDemonFusion = Boolean(fusionSettingsJson.disableSameDemonFusion);\r\n    }\r\n\r\n    private parseFusionChart(fusionChartJson: FusionChartJson): void {\r\n        for (let row: number = 0; row < fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const dataStructToWriteTo = [];\r\n                if (this._enableTripleFusion) {\r\n                    if (col < row) {\r\n                        dataStructToWriteTo.push(this.tripleFusionChart);\r\n                    } else if (col === row) {\r\n                        dataStructToWriteTo.push(this.tripleFusionChart);\r\n                        dataStructToWriteTo.push(this.normalFusionChart);\r\n                    } else {\r\n                        dataStructToWriteTo.push(this.normalFusionChart);\r\n                    }\r\n                } else {\r\n                    if (col > row) { \r\n                        continue;\r\n                    }\r\n                    dataStructToWriteTo.push(this.normalFusionChart);\r\n                }\r\n\r\n                const raceA: string = fusionChartJson.races[row];\r\n                const raceB: string = fusionChartJson.races[col];\r\n                let raceC: string | undefined = fusionChartJson.raceFusionTable[row][col];\r\n                if (FUSION_CHART_NULLS[raceC])\r\n                {\r\n                    raceC = undefined;\r\n                }\r\n\r\n                for (const chart of dataStructToWriteTo) {\r\n                    // Set the .raceA.raceB property of the parsed fusion table\r\n                    if (!chart[raceA]) {\r\n                        chart[raceA] = {};\r\n                    }\r\n                    chart[raceA][raceB] = raceC;\r\n\r\n                    // Set the .raceB.raceA property of the parsed fusion table\r\n                    if (!chart[raceB]) {\r\n                        chart[raceB] = {};\r\n                    }\r\n                    chart[raceB][raceA] = raceC;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fusionChartJson.specialRecipes) {\r\n            for (const resultName in fusionChartJson.specialRecipes) {\r\n                // Parse data in the json file\r\n                const result: Models.Demon | undefined = this.getDemonByName(resultName);\r\n                if (!result) { continue; }\r\n                const ingredientsNames: string[] = fusionChartJson.specialRecipes[resultName];\r\n                if (ingredientsNames.length === 0) { continue; }\r\n                const recipe: Models.Recipe = new Models.Recipe(result.id);\r\n                for (const ingredientName of ingredientsNames) {\r\n                    const ingredient: Models.Demon | undefined = this.getDemonByName(ingredientName);\r\n                    if (!ingredient) { continue; }\r\n                    recipe.addIngredient(ingredient.id);\r\n                }\r\n\r\n                // Set parsed data\r\n                result.specialRecipe = true;\r\n                if (!this.specialRecipes[ingredientsNames.length]) {\r\n                    this.specialRecipes[ingredientsNames.length] = [];\r\n                }\r\n                this.specialRecipes[ingredientsNames.length].push(recipe);\r\n            }\r\n        }\r\n\r\n        // Parse race data\r\n        for (let i = 0; i < fusionChartJson.races.length; i++) {\r\n            this.raceIdMap[fusionChartJson.races[i]] = i;\r\n        }\r\n\r\n        // Parse elements data\r\n        if (fusionChartJson.elements && fusionChartJson.elements.length > 0) {\r\n            const elementIdIndexMap: { [elementId: number]: number } = {};\r\n            for (let i = 0; i < fusionChartJson.elements.length; i++) {\r\n                const elementName = fusionChartJson.elements[i];\r\n                const demon = this.getDemonByName(elementName);\r\n                if (!demon) { continue; };\r\n                \r\n                this.elementsMap[demon.id] = demon;\r\n                elementIdIndexMap[demon.id] = i;\r\n            }\r\n\r\n            if (fusionChartJson.elementFusionTable) {\r\n                for (const race in this.raceIdMap) {\r\n                    this.elementFusionChart[race] = {};\r\n                    const raceId: number = this.raceIdMap[race];\r\n                    for (const elementId in this.elementsMap) {\r\n                        const elementIndex = elementIdIndexMap[elementId];\r\n                        if (fusionChartJson.elementFusionTable[raceId]) {\r\n                            this.elementFusionChart[race][elementId] = fusionChartJson.elementFusionTable[raceId][elementIndex];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private parsePresets(presetsJson: PresetsJson): void {\r\n        if (!presetsJson) { return; }\r\n        for (const preset of presetsJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonsAry = this.demonsAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonsAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonsAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonsAry) {\r\n            if (demon.specialRecipe) { continue; }\r\n            demon.rank = this.getLvlTableForRace(demon.race).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string, includeUnfusable?: boolean): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        const lvlTable: number[] = [];\r\n        for (const lvl in this.raceLvlDemonMap[race]) {\r\n            if (!includeUnfusable && this.demonIsUnfusable(this.raceLvlDemonMap[race][lvl])) {\r\n                continue;\r\n            }\r\n            lvlTable.push(Number(lvl));\r\n        }\r\n        return lvlTable;\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.normalFusionChart[raceA]) {\r\n            if (this.normalFusionChart[raceA][raceB]) {\r\n                return this.normalFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getTripleFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.tripleFusionChart[raceA]) {\r\n            if (this.tripleFusionChart[raceA][raceB]) {\r\n                return this.tripleFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getRaceOrder(race: string): number {\r\n        return this.raceIdMap[race];\r\n    }\r\n\r\n    private findResultLvlFromLvlTable(lvlTable: number[], lvlToCheck: number, isTripleFusion?: boolean) {\r\n        let index = 0;\r\n        for (let i = 0; i < lvlTable.length; i++) {\r\n            if (lvlToCheck > lvlTable[i]) {\r\n                index++;\r\n            }\r\n        }\r\n        if (index >= lvlTable.length) { \r\n            if (isTripleFusion) { return -1; }\r\n            index = lvlTable.length - 1 \r\n        };\r\n        return lvlTable[index];\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const lvlResultTest = (demonB.lvl + demonA.lvl + 1) / 2;\r\n        const lvlR: number = this.findResultLvlFromLvlTable(lvlTableR, lvlResultTest);\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (this._sameRaceFuseToElement) {\r\n            const elementNameR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n            if (!elementNameR) { return undefined; }\r\n            return this.getDemonByName(elementNameR);\r\n        } else {\r\n            const resultLvlTable = this.getLvlTableForRace(demonB.race).filter(lvl => lvl !== demonA.lvl);\r\n            let resultLvlIndex = -1;\r\n            for (const resultLvl of resultLvlTable) {\r\n                if (demonA.lvl + demonB.lvl >= 2 * resultLvl) { resultLvlIndex = resultLvlIndex + 1 }\r\n            }\r\n\r\n            if (resultLvlTable[resultLvlIndex] === demonB.lvl) {\r\n                resultLvlIndex = resultLvlIndex - 1;\r\n            }\r\n\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            const resultLvl = resultLvlTable[resultLvlIndex];\r\n            return this.getDemonFromRaceLvl(demonA.race, resultLvl);\r\n        }\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (this.demonIsElement(demonA)) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (this.demonIsElement(demonB)) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        }\r\n\r\n        const demonRankChange = this.elementFusionChart[demon.race]?.[element.id];\r\n        if (demonRankChange === undefined || demon.rank === undefined) { return undefined; }\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined; }\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n\r\n    private demonIsElement(demon: Models.Demon): boolean {\r\n        return this.elementsMap[demon.id] !== undefined;\r\n    }\r\n\r\n    private demonIsUnfusable(demon: Models.Demon): boolean {\r\n        return demon.specialRecipe;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell, { TableCellProps } from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/data-table.module.scss';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\ntype StatePair<T> = [T, React.Dispatch<React.SetStateAction<T>>];\r\nexport type SortSpec = {\r\n    sortType: 'number' | 'string'\r\n}\r\nexport type ColDef = {\r\n    headerContent?: JSX.Element | string;\r\n    sortSpec?: SortSpec;\r\n    headerProps?: TableCellProps;\r\n}\r\nexport interface DataTableProvider<T> {\r\n    pageSize: number;\r\n    getColumnDefinition(): ColDef[];\r\n    getAllRowsData(): T[];\r\n    renderRow(rowData: T): JSX.Element | string | undefined;\r\n    getSortValue?(rowData: T, sortByCol: number): string | number;\r\n    renderBanner?(): JSX.Element | undefined;\r\n}\r\ninterface DataTableProps extends PaperProps {\r\n    dataTableProvider: DataTableProvider<any>;\r\n}\r\nconst DataTable = (params: DataTableProps): JSX.Element => {\r\n    const {dataTableProvider} = params;\r\n    const [page, setPage] = React.useState<number>(1);\r\n    const [sortByCol, setSortByCol] = React.useState<number | undefined>(undefined);\r\n    const [sortDirection, setSortDirection] = React.useState<\"desc\" | \"asc\" | undefined>(undefined);\r\n    const [sortType, setSortType] = React.useState<\"number\" | \"string\">(\"string\");\r\n    const pageSize: number = dataTableProvider.pageSize;\r\n    let maxPage: number = 1;\r\n\r\n    const colDefs: ColDef[] = dataTableProvider.getColumnDefinition();\r\n    const preIdRowData: any[] = dataTableProvider.getAllRowsData();\r\n    const totalRowCount: number = preIdRowData.length;\r\n\r\n    // Empty row banner\r\n    if (totalRowCount === 0) {\r\n        if (sortByCol !== undefined) { setSortByCol(undefined); }\r\n        if (page !== 1) { setPage(1); }\r\n        if (sortDirection !== undefined) { setSortDirection(undefined); }\r\n        let ret = <React.Fragment />;\r\n        let banner = dataTableProvider.renderBanner? dataTableProvider.renderBanner() : undefined;\r\n        if (banner) { ret = banner }\r\n        return ret;\r\n    }\r\n\r\n    // Shift page down if table loses rows\r\n    maxPage = Math.ceil(totalRowCount / pageSize);\r\n    if ((page - 1)* pageSize >= totalRowCount)\r\n    {\r\n        setPage(Math.ceil(totalRowCount / pageSize));\r\n        return <React.Fragment />;\r\n    }\r\n\r\n    // ID rows\r\n    const rowData: { id: number, data: any }[] = preIdRowData.map((rd, index) => { return { id: index, data: rd } });\r\n\r\n    // Sort rows\r\n    if ((sortByCol !== undefined) && (sortDirection !== undefined) && (dataTableProvider.getSortValue !== undefined)) {\r\n        const getSortValue = dataTableProvider.getSortValue.bind(dataTableProvider);\r\n        const sortMult: number = (sortDirection === \"asc\") ? 1 : -1;\r\n        const comparitor: (...x: any) => number = (sortType === \"number\") ? numberComparitor : stringComparitor;\r\n        rowData.sort((a, b) => { \r\n            const valA = getSortValue(a.data, sortByCol);\r\n            const valB = getSortValue(b.data, sortByCol);\r\n            return sortMult * comparitor(valA, valB) });\r\n    }\r\n\r\n    // Paginate\r\n    const paginizedRowData = rowData.filter((data, index) => (index >= (page - 1) * pageSize) && (index < page * pageSize));\r\n    function changePage(event: React.ChangeEvent<unknown>, value: number) {\r\n        setPage(value);\r\n    }\r\n    \r\n    // Render headers\r\n    const headerCells: JSX.Element[] = [];\r\n    let colNum: number = 0;\r\n    for (const colDef of colDefs) {\r\n        const headerContent = colDef.sortSpec ? buildSortableHeaderCellContent(colDef.headerContent, colNum, colDef.sortSpec.sortType, [sortByCol, setSortByCol], [sortDirection, setSortDirection], [sortType, setSortType]) : colDef.headerContent;\r\n\r\n        headerCells.push(<TableCell key={\"H-\" + colNum} {...colDef.headerProps}>{headerContent}</TableCell>);\r\n        colNum++;\r\n    }\r\n\r\n    // Render rows\r\n    const renderedRows: JSX.Element[] = [];\r\n    for (const row of paginizedRowData) {\r\n        renderedRows.push(\r\n            <TableRow key={row.id}>\r\n                {dataTableProvider.renderRow(row.data)}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    let paperContainerClassName: string = styles.paperContainer;\r\n    if (params.className) {\r\n        paperContainerClassName += \" \" + params.className;\r\n    }\r\n\r\n    return <Paper className={paperContainerClassName} elevation={3}>\r\n        <TableContainer className={styles.tableContainer}>\r\n            <Table>\r\n                <TableHead className={styles.header}>\r\n                    <TableRow>\r\n                        {headerCells}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className={styles.tableBody}>\r\n                    {renderedRows}\r\n                </TableBody>\r\n            </Table>\r\n            <Pagination count={maxPage} page={page} onChange={changePage} size=\"small\" />\r\n        </TableContainer>\r\n    </Paper>\r\n};\r\nexport default DataTable;\r\n\r\nfunction stringComparitor(a: string, b: string): number {\r\n    return (a > b) ? 1 : (a === b) ? 0 : -1;\r\n}\r\n\r\nfunction numberComparitor(a: number, b: number): number {\r\n    return a - b;\r\n}\r\n\r\nfunction buildSortableHeaderCellContent(\r\n    headerInnerContent: JSX.Element | string | undefined,\r\n    id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): JSX.Element {\r\n    const [sortByCol] = _sortByCol;\r\n    const [sortDirection] = _sortDirection;\r\n\r\n    return <TableSortLabel\r\n        active={sortByCol === id && sortDirection !== undefined}\r\n        direction={sortByCol === id ? sortDirection : undefined}\r\n        onClick={createSortHandler(id, colSortType, _sortByCol, _sortDirection, _sortType)}>\r\n        {headerInnerContent}\r\n    </TableSortLabel>;\r\n}\r\n\r\nfunction createSortHandler(id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void {\r\n    return (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        const [sortByCol, setOrderBy] = _sortByCol;\r\n        const [sortDirection, setSortDirection] = _sortDirection;\r\n        const [, setSortType] = _sortType;\r\n\r\n        let nextSortDirection = sortDirection;\r\n        if (sortByCol === id) {\r\n            if (sortDirection === \"asc\") { nextSortDirection = \"desc\" }\r\n            if (sortDirection === \"desc\") { nextSortDirection = undefined }\r\n            if (sortDirection === undefined) {nextSortDirection = \"asc\"}\r\n        } else {\r\n            nextSortDirection = \"asc\";\r\n        }\r\n        setSortDirection(nextSortDirection);\r\n        setOrderBy(id);\r\n        setSortType(colSortType);\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { WarningBanner } from './minor-ui-components';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nimport styles from './scss/ingredients-table.module.scss';\r\n\r\n//====================================================================================================\r\n\r\ntype RemoveDemonButtonProps = {\r\n    demonId: number;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nfunction RemoveDemonButton(params: RemoveDemonButtonProps): JSX.Element {\r\n\r\n    function onIconButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\r\n        if (params.onRemoveIngredient) {\r\n            params.onRemoveIngredient(params.demonId);\r\n        }\r\n    }\r\n\r\n    return <IconButton onClick={onIconButtonClick} className={styles.removeDemonButton}>\r\n    <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n  </IconButton>\r\n}\r\n\r\n//====================================================================================================\r\n\r\nenum IngredientsSettingsEnum {\r\n    multipleUse = 1,\r\n    mustUse = 2\r\n}\r\ntype CheckboxSettingProps = {\r\n    demonId: number,\r\n    setting: IngredientsSettingsEnum,\r\n    ingredientsSettings: Models.IngredientsSettings\r\n}\r\nfunction CheckboxSetting(params: CheckboxSettingProps): JSX.Element {\r\n    const {demonId, setting, ingredientsSettings} = params;\r\n    let defaultChecked: boolean = false;\r\n    switch (setting) {\r\n        case IngredientsSettingsEnum.mustUse: {\r\n            defaultChecked = ingredientsSettings[demonId].mustUse;\r\n            break;\r\n        }\r\n        case IngredientsSettingsEnum.multipleUse: \r\n        default: {\r\n            defaultChecked = ingredientsSettings[demonId].multipleUse;\r\n        }\r\n    }\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        switch (setting) {\r\n            case IngredientsSettingsEnum.mustUse: {\r\n                ingredientsSettings[demonId].mustUse = event.target.checked;\r\n                break;\r\n            }\r\n            case IngredientsSettingsEnum.multipleUse: \r\n            default: {\r\n                ingredientsSettings[demonId].multipleUse = event.target.checked;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <Checkbox\r\n        className={styles.checkBox}\r\n        defaultChecked={defaultChecked}\r\n        onChange={onCheckboxChange}\r\n        color=\"default\"\r\n    />;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeIngredientsSettings(ingredients: Models.Ingredients, ingredientsSettings: Models.IngredientsSettings) {\r\n    for (const demonId in ingredients) {\r\n        if (!ingredientsSettings[demonId]) {\r\n            ingredientsSettings[demonId] = { mustUse: false, multipleUse: false };\r\n        }\r\n    }\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FusionIngredientsTableProps = {\r\n    demonCompendium: DemonCompendium\r\n    ingredients: Models.Ingredients\r\n    ingredientsSettings: Models.IngredientsSettings\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nclass FusionIngredientsDataTableProvider implements DataTables.DataTableProvider<Models.Demon> {\r\n\r\n    pageSize: number = 25;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        return [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: {className: styles.nameColumnHeader} },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: {className: styles.raceColumnHeader} },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" } },\r\n            { headerContent: \"Only Show Recipes That Use This Demon\", headerProps: { width: 150, align: \"center\" } },\r\n            { headerContent: \"Can Use Multiple per Recipe\", headerProps: { width: 120, align: \"center\" } },\r\n            {}\r\n        ];\r\n    }\r\n\r\n    getAllRowsData(): Models.Demon[] {\r\n        return this.allRowsData;\r\n    }\r\n\r\n    renderRow(rowData: Models.Demon): JSX.Element {\r\n        return <React.Fragment>\r\n            <TableCell>\r\n                {rowData.name}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.lvl}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.race}\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.mustUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.multipleUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell>\r\n                <RemoveDemonButton demonId={rowData.id} onRemoveIngredient={this.onRemoveIngredient} />\r\n            </TableCell>\r\n        </React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.Demon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.name; }\r\n            case 1: { \r\n                return rowData.lvl; }\r\n            case 2: { \r\n                return rowData.race; }\r\n            default: {\r\n                return rowData.name; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        const icon = <WarningIcon className={styles.warningIcon}/>;\r\n        return <WarningBanner message=\"No ingredient demons. Use the section above to add demons to use for fusions.\" icon={icon}/>\r\n    }\r\n\r\n    demonCompendium: DemonCompendium;\r\n    ingredients: Models.Ingredients;\r\n    ingredientsSettings: Models.IngredientsSettings;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n\r\n    allRowsData: Models.Demon[];\r\n\r\n    constructor(params: FusionIngredientsTableProps, allRowsData: Models.Demon[]) {\r\n        this.demonCompendium = params.demonCompendium;\r\n        this.ingredients = params.ingredients;\r\n        this.ingredientsSettings = params.ingredientsSettings;\r\n        this.onRemoveIngredient = params.onRemoveIngredient;\r\n\r\n        this.allRowsData = allRowsData;\r\n    }\r\n}\r\n\r\nconst IngredientsTable = (params: FusionIngredientsTableProps): JSX.Element => {\r\n    initializeIngredientsSettings(params.ingredients, params.ingredientsSettings);\r\n    const rowData: Models.Demon[] = React.useMemo(() => {\r\n        let rowData: Models.Demon[] = [];\r\n        for (const demonId in params.ingredients) {\r\n            const demon = params.demonCompendium.getDemonById(Number(demonId));\r\n            if (!demon) { continue; }\r\n            rowData.push(demon);\r\n        }\r\n        return rowData;\r\n    }, [params.ingredients, params.demonCompendium]);\r\n    const dataProvider = new FusionIngredientsDataTableProvider(params, rowData);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n}\r\nexport default React.memo(IngredientsTable);","import React from 'react';\r\n\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport styles from './scss/minor-ui-components.module.scss';\r\n\r\ntype WarningBannerProps = {\r\n    message?: string;\r\n    icon?: JSX.Element;\r\n    className?: string;\r\n}\r\nconst WarningBannerCore = (params: WarningBannerProps): JSX.Element => {\r\n    let icon;\r\n    if (params.icon) {\r\n        icon = <div className={styles.icon}>{params.icon}</div>\r\n    }\r\n    return <Paper className={params.className? params.className : styles.warningBanner}>\r\n        {icon}<span>{params.message}</span>\r\n    </Paper>\r\n}\r\nexport const WarningBanner = React.memo(WarningBannerCore);","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {WarningBanner} from './minor-ui-components';\r\n\r\nimport styles from './scss/results-table.module.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass FusionResultsDataTableProvider implements DataTables.DataTableProvider<Models.FusedDemon> {\r\n\r\n    pageSize: number = 50;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        const colDefs: DataTables.ColDef[] = [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.nameColumn } },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.lvlColumn } },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.raceColumn } },\r\n        ];\r\n        const statsName: string[] = Models.Demon.statsName;\r\n        for (let i = 0; i < statsName.length; i++) {\r\n            colDefs.push(\r\n                { headerContent: statsName[i], headerProps: { className: styles.statColumn }, sortSpec: { sortType: \"number\" } }\r\n            );\r\n        }\r\n        colDefs.push({ headerContent: \"Ingredients Used\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.ingredientsColumn } });\r\n        colDefs.push({ headerContent: \"\" });\r\n        this.columnCount = colDefs.length;\r\n        return colDefs;\r\n    }\r\n\r\n    getAllRowsData(): Models.FusedDemon[] {\r\n        const resultsAsRowsArray: Models.FusedDemon[] = [];\r\n        for (const ingCountStr in this.fusionResults.data) {\r\n            const ingCount = Number(ingCountStr);\r\n            if (Number(ingCount) === 1) { continue; }\r\n            for (const demonId in this.fusionResults.data[ingCount]) {\r\n                for (const fusedDemon of this.fusionResults.data[ingCount][demonId]) {\r\n                    resultsAsRowsArray.push(fusedDemon);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return resultsAsRowsArray;\r\n    }\r\n\r\n    renderRow(fusedDemon: Models.FusedDemon): JSX.Element {\r\n        const renderedRow: JSX.Element[] = [];\r\n        let keyId: number = 0;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.nameColumn}>\r\n                {fusedDemon.demon.name}\r\n            </TableCell>\r\n            <TableCell className={styles.lvlColumn}>\r\n                {fusedDemon.demon.lvl}\r\n            </TableCell>\r\n            <TableCell className={styles.raceColumn}>\r\n                {fusedDemon.demon.race}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        for (const stat of fusedDemon.demon.stats) {\r\n            renderedRow.push(<React.Fragment key={keyId}>\r\n                <TableCell className={styles.statColumn}>\r\n                    {stat}\r\n                </TableCell>\r\n            </React.Fragment>);\r\n            keyId++;\r\n        }\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.ingredientsColumn}>\r\n                {this.fusionResults.getIngredientCount(fusedDemon.demon.id)}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell>\r\n            <Button variant=\"outlined\" onClick={this.recipesButtonHandler.bind(undefined, fusedDemon.demon.id)} className={styles.recipeButton}>View recipes</Button>\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        return <React.Fragment>{renderedRow}</React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.FusedDemon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.demon.name; }\r\n            case 1: { \r\n                return rowData.demon.lvl; }\r\n            case 2: { \r\n                return rowData.demon.race; }\r\n            case (this.columnCount - 2):\r\n                return this.fusionResults.getIngredientCount(rowData.demon.id) || 0;\r\n            default: {\r\n                return rowData.demon.stats[sortByCol-3]; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        return <WarningBanner message=\"No results found\" />\r\n    }\r\n\r\n    fusionResults: Models.FusionResults;\r\n    recipesButtonHandler: (...x: any) => void;\r\n    \r\n    columnCount: number = 0;\r\n\r\n    constructor(params: FusionResultsTableProps, onRecipesButtonClick: (demonId: number) => void) {\r\n        this.recipesButtonHandler = onRecipesButtonClick;\r\n        this.fusionResults = params.fusionResults;\r\n    }\r\n}\r\n\r\ntype FusionResultsTableProps = {\r\n    fusionResults: Models.FusionResults,\r\n    onOpenDemonRecipes: (demonId: number) => void\r\n}\r\nconst ResultsTable = (props: FusionResultsTableProps): JSX.Element => {\r\n\r\n    function openDemonRecipesHandler(demonId: number) {\r\n      props.onOpenDemonRecipes(demonId);\r\n    }\r\n    \r\n    const dataProvider = new FusionResultsDataTableProvider(props, openDemonRecipesHandler);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n};\r\nexport default React.memo(ResultsTable);","import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/settings-panel.module.scss';\r\n\r\nexport class UserSettings {\r\n    charLvl: number = 99;\r\n    maxIngredient: number = 3;\r\n    useTripleFusion: boolean = false;\r\n\r\n    useTripleFusionSettingIsVisible: boolean = false;\r\n}\r\nexport type SettingsPanelEventHandlers = { toggleVisibility?: Function }\r\ntype SettingsPanelProps = {\r\n    eventHandlers: SettingsPanelEventHandlers,\r\n    settings: UserSettings\r\n}\r\nexport default function SettingsPanel(params: SettingsPanelProps) : JSX.Element {\r\n    const {eventHandlers, settings } = params;\r\n    \r\n    const [isVisible, setIsVisible] = useState<boolean>(false);\r\n    const [charLvlFieldValue, setCharLvlFieldValue] = useState<number | string>(settings.charLvl);\r\n    const [maxIngFieldValue, setMaxIngFieldValue] = useState<number | string>(settings.maxIngredient);\r\n\r\n    function onVisibilityToggle(): void {\r\n        setIsVisible(!isVisible);\r\n    }\r\n    eventHandlers.toggleVisibility = onVisibilityToggle;\r\n\r\n    function onSetCharLvl(newValue: number): void {\r\n        settings.charLvl = newValue;\r\n    }\r\n\r\n    function onSetMaxIng(newValue: number): void {\r\n        settings.maxIngredient = newValue;\r\n    }\r\n\r\n    function onSetUseTripleFusion(newValue: boolean): void {\r\n        settings.useTripleFusion = newValue;\r\n    }\r\n\r\n    const settingsPanelStyle: React.CSSProperties = {};\r\n    if (!isVisible) { settingsPanelStyle.height = \"0px\"; }\r\n    return <div style={settingsPanelStyle} className={styles.settingsPanel}>\r\n        <Paper variant=\"outlined\" className={styles.paper}>\r\n            <h2>Settings</h2>\r\n            <NumberSettings\r\n                label=\"Character level\"\r\n                min={1}\r\n                max={99}\r\n                emptyFieldValue={99}\r\n                fieldStateValueAndSetter={[charLvlFieldValue, setCharLvlFieldValue]}\r\n                onSetSettings={onSetCharLvl} />\r\n            <NumberSettings\r\n                label=\"Max ingredients per recipe\"\r\n                min={2}\r\n                max={5}\r\n                emptyFieldValue={3}\r\n                fieldStateValueAndSetter={[maxIngFieldValue, setMaxIngFieldValue]}\r\n                onSetSettings={onSetMaxIng} />\r\n            {settings.useTripleFusionSettingIsVisible ?\r\n                <CheckboxSettings\r\n                    label=\"Allow triple fusion\"\r\n                    checked={settings.useTripleFusion}\r\n                    onSetSettings={onSetUseTripleFusion}\r\n                /> : undefined}\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\ntype NumberSettingsProp = {\r\n    label: string,\r\n    fieldStateValueAndSetter: [number | string, React.Dispatch<React.SetStateAction<number | string>>],\r\n    onSetSettings: (newValue: number) => void,\r\n    min: number,\r\n    max: number,\r\n    emptyFieldValue: number\r\n}\r\nfunction NumberSettings(params: NumberSettingsProp): JSX.Element {\r\n    const {label, fieldStateValueAndSetter: stateValueAndSetter, onSetSettings, min, max, emptyFieldValue} = params;\r\n    const [stateValue, stateSetter] = stateValueAndSetter;\r\n\r\n    function onNumberFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let value: number | string = event.target.value;\r\n        if (value === \"\") {\r\n            stateSetter(\"\");\r\n            onSetSettings(emptyFieldValue);\r\n            return;\r\n        }\r\n        const valueAsNumber = Number(value);\r\n        if (valueAsNumber >= min && valueAsNumber <= max) {\r\n            stateSetter(valueAsNumber);\r\n            onSetSettings(valueAsNumber);\r\n        }\r\n    }\r\n    return <div className={`${styles.settingsLine} ${styles.numberSettings}`}>\r\n        <span className={styles.numberFieldLabel}>{label}</span>\r\n        <TextField\r\n            style={{ width: \"50px\" }}\r\n            type=\"number\"\r\n            InputLabelProps={{ shrink: true }}\r\n            inputProps={{ min: min, max: max, step: 1 }}\r\n            variant=\"outlined\"\r\n            value={stateValue}\r\n            onChange={onNumberFieldChange}\r\n        />\r\n    </div>;\r\n}\r\n\r\ntype CheckboxSettingsProps = {\r\n    label: string,\r\n    checked: boolean,\r\n    onSetSettings: (newValue: boolean) => void\r\n}\r\nfunction CheckboxSettings(params: CheckboxSettingsProps): JSX.Element {\r\n    const {label, checked, onSetSettings} = params;\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        onSetSettings(event.target.checked);\r\n    }\r\n\r\n    return <div className={`${styles.settingsLine}`}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    defaultChecked={checked}\r\n                    onChange={onCheckboxChange}\r\n                    color=\"default\"\r\n                />}\r\n            label={label} />\r\n    </div>;\r\n}","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './scss/ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by entering level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 250 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            size=\"small\"\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        const acceptedKeys: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let keyIsAccepted: boolean = false;\r\n        for (const acceptedKey of acceptedKeys) {\r\n            if (key === acceptedKey) {\r\n                keyIsAccepted = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!keyIsAccepted) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"122px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                    size=\"small\"\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"122px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    size=\"small\"\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 250 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            size=\"small\"\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","import React from \"react\";\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport styles from './scss/recipes-table.module.scss';\r\n\r\nfunction renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n    if (demon.isFused()) {\r\n        return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n    } else {\r\n        return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n    }\r\n}\r\n\r\nfunction renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let priorRecipes: JSX.Element = <React.Fragment />;\r\n    if (demon.ingredients) {\r\n        let curRecipe: JSX.Element = <React.Fragment />;\r\n        let isFirstLoop: boolean = true;\r\n        for (const ingDemon of demon.ingredients) {\r\n            priorRecipes = <React.Fragment>{priorRecipes}{renderRecipe(ingDemon)}</React.Fragment>;\r\n            const separator = isFirstLoop ? undefined : <React.Fragment> + </React.Fragment>;\r\n            curRecipe = <React.Fragment>{curRecipe}{separator}{renderDemonName(ingDemon)}</React.Fragment>\r\n            isFirstLoop = false;\r\n        }\r\n        const nameR = renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {priorRecipes}\r\n            <Divider light />\r\n            <div className={styles.centerText}>{curRecipe}</div><div>&darr;</div><div>{nameR}</div>\r\n        </React.Fragment>;\r\n    }\r\n    return priorRecipes;\r\n}\r\n\r\nfunction DemonCard(props: {demon: Models.FusedDemon}): JSX.Element {\r\n    return <Card className={styles.recipeCard}>\r\n      <CardContent>\r\n          {renderRecipe(props.demon)}\r\n      </CardContent>\r\n    </Card>\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FilterMap = { [demonId: number]: boolean};\r\ntype FilterOption = { demonId: number, demonName: string};\r\n\r\nfunction createFilterOptions(recipesAry: Models.FusedDemon[], currFilter: FilterOption[]): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    let ingDemonsMap: { [demonId: number]: string} = {};\r\n    for (const fusedDemon of recipesAry) {\r\n        const ingDemons = fusedDemon.getBaseIngredientsDemons();\r\n        for (const ingDemon in ingDemons) {\r\n            ingDemonsMap[Number(ingDemon)] = ingDemons[ingDemon].name;\r\n        }\r\n    }\r\n    currFilter.map((filterOption: FilterOption, i) => ingDemonsMap[filterOption.demonId] = filterOption.demonName);\r\n    for (const ingDemonId in ingDemonsMap) {\r\n        filterOptions.push({ demonId: Number(ingDemonId), demonName: ingDemonsMap[ingDemonId]});\r\n    }\r\n    return filterOptions;\r\n}\r\n\r\nfunction filterRecipesAry(recipesAry: Models.FusedDemon[], filterMap: FilterMap): Models.FusedDemon[] {\r\n    const filteredAry: Models.FusedDemon[] = [];\r\n    for (const fusedDemon of recipesAry) {\r\n        const ingDemonsCount: { [demonId: number]: number } = fusedDemon.getBaseIngredientsCounts();\r\n        const filterCheckList = {...filterMap};\r\n        for (const ingDemonId in ingDemonsCount) {\r\n            delete filterCheckList[ingDemonId];\r\n        }\r\n        if (Object.keys(filterCheckList).length === 0) {\r\n            filteredAry.push(fusedDemon);\r\n        }\r\n    }\r\n    return filteredAry\r\n}\r\n\r\n\r\nexport default function RecipesTable(props: {demonId: number, recipesAry: Models.FusedDemon[]}): JSX.Element {\r\n    const pageSize: number = 100;\r\n    const [page, setPage] = React.useState<number>(1);\r\n    const [filter, setFilter] = React.useState<FilterOption[]>([]);\r\n    \r\n    const filteredRecipesAry = React.useMemo(()=>{\r\n        const filterMap: FilterMap = {};\r\n        filter.map((filterOption: FilterOption, i: number) => filterMap[filterOption.demonId] = true);\r\n        return filterRecipesAry(props.recipesAry, filterMap)\r\n    }, [props.recipesAry, filter]);\r\n\r\n    function handlePageChange(event: React.ChangeEvent<unknown>, page: number) {\r\n        setPage(page);\r\n    }\r\n    \r\n    function handleFilterChange(event: React.ChangeEvent<{}>, value: FilterOption[]) {\r\n        setPage(1);\r\n        setFilter(value);\r\n    }\r\n\r\n    const filterOptions = createFilterOptions(filteredRecipesAry, filter);\r\n\r\n    const maxPage: number = Math.ceil(filteredRecipesAry.length / pageSize);\r\n\r\n    return (\r\n    <div className={styles.componentContainer}>\r\n            <Autocomplete\r\n            multiple\r\n            className={styles.filterField}\r\n            size=\"small\"\r\n            onChange={handleFilterChange}\r\n            value={filter}\r\n            defaultValue={filter}\r\n            options={filterOptions}\r\n            getOptionLabel={(option) => option.demonName}\r\n            getOptionSelected={(option, value) => option.demonId === value.demonId}\r\n            autoHighlight={true}\r\n            filterSelectedOptions\r\n            renderInput={(params) => (<TextField {...params} variant=\"outlined\" label=\"Filter\" /> )}\r\n        />\r\n        <Pagination count={maxPage} page={page} onChange={handlePageChange} size=\"small\" className={styles.pagination} hidden={maxPage <= 1}/>\r\n        <div className={styles.recipeCardsContainer}>\r\n            {filteredRecipesAry\r\n            .filter((demon, i) => (i >= (page - 1) * pageSize) && (i < page * pageSize))\r\n            .map((demon, i) => <DemonCard key={i} demon={demon} />)}\r\n        </div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport * as Models from './data/data-models';\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport RecipesTable from './ui-components/recipes-table';\r\n\r\nimport styles from './demon-displayer.module.scss';\r\n\r\nexport default function DemonDisplayer(props: { demonCompendium: DemonCompendium, goBackUrlPath: string, fusionResults?: Models.FusionResults}): JSX.Element {\r\n    const demonIdStr = useParams<{ demonId: string }>().demonId;\r\n    const demonId = Number(demonIdStr);\r\n    const history = useHistory();\r\n\r\n    if (isNaN(demonId)) {\r\n        history.push(props.goBackUrlPath);\r\n        return <React.Fragment/>;\r\n    }\r\n    const demon = props.demonCompendium.getDemonById(demonId);\r\n    if (!demon) {\r\n        history.push(props.goBackUrlPath);\r\n        return <React.Fragment/>;\r\n    }\r\n    \r\n    let fusionResultsSection: JSX.Element | undefined = undefined;\r\n    if (props.fusionResults) {\r\n        let recipesAry: Models.FusedDemon[] | undefined = undefined;\r\n        for (const ingCountStr in props.fusionResults.data) {\r\n            const ingCount: number = Number(ingCountStr);\r\n            for (const id in props.fusionResults.data[ingCount]) {\r\n                if (Number(id) === demonId) {\r\n                    recipesAry = props.fusionResults.data[ingCount][id];\r\n                    break;\r\n                }\r\n            }\r\n            if (recipesAry) {\r\n                break;\r\n            }\r\n        }\r\n        if (recipesAry) {\r\n        fusionResultsSection = <React.Fragment>\r\n            <h2>Recipes</h2>\r\n            <RecipesTable demonId={demonId} recipesAry={recipesAry} />\r\n        </React.Fragment>;\r\n        }\r\n    }\r\n\r\n    return <div className={styles.componentContainer}>\r\n        <div className={styles.section}>\r\n            <h2>{demon.name}</h2>\r\n            <div><Label text=\"Race\" />{demon.race}<Label text=\"Level\" />{demon.lvl}</div>\r\n        </div>\r\n        <div className={styles.section}>\r\n            <h2>Stats</h2>\r\n            <div>{demon.stats.map((stat, i) => <React.Fragment key={i}><Label text={Models.Demon.statsName[i]} />{stat}</React.Fragment>)}</div>\r\n        </div>\r\n        <div className={styles.section}>{fusionResultsSection}</div>\r\n    </div>\r\n}\r\n\r\nfunction Label(props: { text: string }): JSX.Element {\r\n    return <span className={styles.label}>{props.text}</span>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from './data/data-models';\r\nimport { DemonCompendium } from './data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport IngredientsTable from './ui-components/ingredients-table';\r\nimport ResultsTable from './ui-components/results-table';\r\nimport SettingsPanel, { UserSettings, SettingsPanelEventHandlers } from './ui-components/settings-panel';\r\nimport DemonAdder from './ui-components/demon-adder';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport styles from './fusion-calculator.module.scss';\r\nimport { Route, Router, Switch, useHistory, useRouteMatch } from 'react-router-dom';\r\nimport DemonDisplayer from './demon-displayer';\r\n\r\nconst MAX_FUSION_INGREDIENT_HARD_CAP = 5;\r\n\r\nasync function calculateAllFusionCombinationsAsync(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings): Promise<Models.FusionResults> {\r\n  const promise = new Promise<Models.FusionResults>(function(resolver) {\r\n    setTimeout(function () {\r\n      resolver(calculateAllFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings));\r\n    }, 100);\r\n  });\r\n  return promise;\r\n}\r\n\r\nfunction calculateAllFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, userSettings: UserSettings, ingredientsSettings: Models.IngredientsSettings): Models.FusionResults {\r\n  const fusionResults = new Models.FusionResults();\r\n  const specialRecipes: Models.SpecialRecipes = demonCompendium.getSpecialRecipes();\r\n  const viableSpecialRecipes: Models.SpecialRecipes = {};\r\n  const maxIngredient: number = (userSettings.maxIngredient < MAX_FUSION_INGREDIENT_HARD_CAP) ? userSettings.maxIngredient : MAX_FUSION_INGREDIENT_HARD_CAP;\r\n\r\n  for (let size = 1; size <= maxIngredient; size++) {\r\n    fusionResults.data[size] = {};\r\n  }\r\n\r\n  for (const demonId in ingredients) {\r\n    const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n    if (!demon) { continue; }\r\n    const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n    if (!fusionResults.data[1][demon.id]) {\r\n      fusionResults.data[1][demon.id] = [];\r\n    }\r\n    fusionResults.data[1][demon.id].push(fusedDemon);\r\n  }\r\n  updateViableSpecialRecipes(fusionResults, 1, specialRecipes, viableSpecialRecipes, maxIngredient);\r\n\r\n  // Compute double fusions\r\n  for (let ingCountR = 2; ingCountR <= maxIngredient; ingCountR++) {\r\n    for (let ingCountA = ingCountR - 1; ingCountA >= (ingCountR / 2); ingCountA--) {\r\n      const ingCountB: number = ingCountR - ingCountA;\r\n      const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n      for (const idA in fusionResults.data[ingCountA]) {\r\n        if (fusionResults.data[ingCountA][idA].length === 0) { continue; }\r\n        const speciesA: Models.Demon = fusionResults.data[ingCountA][idA][0].demon;\r\n        for (const idB in fusionResults.data[ingCountB]) {\r\n          if (fusionResults.data[ingCountB][idB].length === 0) { continue; }\r\n          const speciesB: Models.Demon = fusionResults.data[ingCountB][idB][0].demon;\r\n\r\n          // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n          if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n          const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(fusionResults, userSettings, speciesR, ingCountR, [speciesA, speciesB])) { continue; }\r\n\r\n          const resultingFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, fusionResults.data[ingCountA][idA], fusionResults.data[ingCountB][idB]);\r\n          if (!fusionResults.data[ingCountR][speciesR.id]) { fusionResults.data[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultingFusedDemons) {\r\n            fusionResults.data[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        speciesUsedAsA[speciesA.id] = true;\r\n      }\r\n    }\r\n\r\n    // Compute triple fusions\r\n    if (userSettings.useTripleFusion) {\r\n      calculateTripleFusionCombinations(demonCompendium, userSettings, ingredientsSettings, fusionResults, ingCountR);\r\n    }\r\n\r\n    // Compute special recipe fusions\r\n    calculateSpecialRecipeFusion(demonCompendium, userSettings, ingredientsSettings, fusionResults, ingCountR, viableSpecialRecipes);\r\n\r\n    // Update viable special recipes\r\n    updateViableSpecialRecipes(fusionResults, ingCountR, specialRecipes, viableSpecialRecipes, maxIngredient);\r\n  }\r\n\r\n  // At this point, we're completely finished with all fusion combinations\r\n  // Re-traverse through all of the results and purge fusions that don't satisfy various constraints/settings\r\n  const mustUseDemons: Models.MustUseDemonsMap = prepareIngredientsSettingsForFinalFilter(ingredientsSettings, ingredients);\r\n  let filterFunction = filterDemonsAfterCalculation.bind(undefined, mustUseDemons);\r\n  for (const ingCount in fusionResults.data) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    for (const id in fusionResults.data[ingCount]) {\r\n      let demonAry: Models.FusedDemon[] = fusionResults.data[ingCount][id];\r\n      demonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() });\r\n      demonAry = demonAry.filter(filterFunction);\r\n      fusionResults.data[ingCount][id] = demonAry;\r\n      if (demonAry.length === 0) {\r\n        delete fusionResults.data[ingCount][id];\r\n      }\r\n    }\r\n  }\r\n\r\n  fusionResults.updateMetaData();\r\n  return fusionResults;\r\n}\r\n\r\nfunction updateViableSpecialRecipes(fusionResults: Models.FusionResults, ingCountNodeToRegister: number, specialRecipes: Models.SpecialRecipes, viableSpecialRecipes: Models.SpecialRecipes, maxIngredient: number) {\r\n  for (const demonId in fusionResults.data[ingCountNodeToRegister]) {\r\n    for (let recipeIngCount = 2; recipeIngCount <= maxIngredient; recipeIngCount++) {\r\n      if (!specialRecipes[recipeIngCount]) { continue; }\r\n      for (const recipe of specialRecipes[recipeIngCount]) {\r\n        const registrationSuccessful: boolean = recipe.registerIngredient(Number(demonId), ingCountNodeToRegister);\r\n        if (registrationSuccessful && recipe.isViable()) {\r\n          const recipeCost: number = recipe.totalBaseIngredientsCost();\r\n          if (!viableSpecialRecipes[recipeCost]) {\r\n            viableSpecialRecipes[recipeCost] = [];\r\n          }\r\n          viableSpecialRecipes[recipeCost].push(recipe);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateTripleFusionCombinations(demonCompendium: DemonCompendium, userSettings: UserSettings, ingredientsSettings: Models.IngredientsSettings, fusionResults: Models.FusionResults, ingCountR: number): void {\r\n  let ingCounts: number[] = [];\r\n  const fusionResultsData = fusionResults.data;\r\n  while (getNextCombinationTuple(ingCounts, 3, ingCountR)) {\r\n    const [ingCountA, ingCountB, ingCountC] = ingCounts;\r\n    const alreadyCalculatedAsA: { [id: number]: boolean } = {};\r\n    for (const idA in fusionResultsData[ingCountA]) {\r\n      if (fusionResultsData[ingCountA][idA].length === 0) { continue; }\r\n      const speciesA: Models.Demon = fusionResultsData[ingCountA][idA][0].demon;\r\n\r\n      const alreadyCalculatedAsB: { [id: number]: boolean } = {};\r\n      for (const idB in fusionResultsData[ingCountB]) {\r\n        if (alreadyCalculatedAsA[Number(idB)]) { continue; }\r\n        if (fusionResultsData[ingCountB][idB].length === 0) { continue; }\r\n        const speciesB: Models.Demon = fusionResultsData[ingCountB][idB][0].demon;\r\n\r\n        for (const idC in fusionResultsData[ingCountC]) {\r\n          if (alreadyCalculatedAsA[Number(idC)]) { continue; }\r\n          if (alreadyCalculatedAsB[Number(idC)]) { continue; }\r\n          if (fusionResultsData[ingCountC][idC].length === 0) { continue; }\r\n          const speciesC: Models.Demon = fusionResultsData[ingCountC][idC][0].demon;\r\n          const speciesR: Models.Demon | undefined = demonCompendium.tripleFuseDemons(speciesA, speciesB, speciesC);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(fusionResults, userSettings, speciesR, ingCountR, [speciesA, speciesB, speciesC])) { continue; }\r\n          const resultFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, fusionResultsData[ingCountA][idA], fusionResultsData[ingCountB][idB], fusionResultsData[ingCountC][idC]);\r\n          if (resultFusedDemons.length === 0) { continue; }\r\n          if (!fusionResultsData[ingCountR][speciesR.id]) {\r\n            fusionResultsData[ingCountR][speciesR.id] = [];\r\n          }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            fusionResultsData[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        alreadyCalculatedAsB[speciesB.id] = true;\r\n      }\r\n      alreadyCalculatedAsA[speciesA.id] = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateSpecialRecipeFusion(demonCompendium: DemonCompendium, userSettings: UserSettings, ingredientsSettings: Models.IngredientsSettings, fusionResults: Models.FusionResults, ingCountR: number, viableSpecialRecipes: Models.SpecialRecipes): void {\r\n  const currSpecialRecipes: Models.Recipe[] | undefined = viableSpecialRecipes[ingCountR];\r\n  if (!currSpecialRecipes) { return; }\r\n  for (const specialRecipe of currSpecialRecipes) {\r\n    const speciesR: Models.Demon | undefined = demonCompendium.getDemonById(specialRecipe.resultId);\r\n    if (!speciesR) { continue; }\r\n\r\n    const ingredientsSpecies: Models.Demon[] = [];\r\n    const ingredientsFusedDemons: Models.FusedDemon[][] = [];\r\n    let missingIngredient: boolean = false;\r\n    for (const ingredientId in specialRecipe.ingredients) {\r\n      const ingredientSpecies: Models.Demon | undefined = demonCompendium.getDemonById(Number(ingredientId));\r\n      if (!ingredientSpecies) {\r\n        missingIngredient = true;\r\n        break;\r\n      }\r\n      ingredientsSpecies.push(ingredientSpecies);\r\n      const ingredientCost: number = specialRecipe.ingredients[ingredientId];\r\n      ingredientsFusedDemons.push(fusionResults.data[ingredientCost][ingredientSpecies.id]);\r\n    }\r\n    if (missingIngredient) { continue; }\r\n    if (!filterDemonsAfterSpeciesFusion(fusionResults, userSettings, speciesR, ingCountR, ingredientsSpecies)) { continue; }\r\n\r\n    const resultingFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, ...ingredientsFusedDemons);\r\n    if (resultingFusedDemons.length === 0) { continue; }\r\n    if (!fusionResults.data[ingCountR][speciesR.id]) {\r\n      fusionResults.data[ingCountR][speciesR.id] = []; \r\n    }\r\n    for (const fusedDemon of resultingFusedDemons) {\r\n      fusionResults.data[ingCountR][speciesR.id].push(fusedDemon);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNextCombinationTuple(currentTuple: number[], tupleSize: number, sumRequirement: number): boolean {\r\n  if (sumRequirement < tupleSize) { return false; }\r\n  if (currentTuple.length > tupleSize) { return false; }\r\n\r\n  // Initialize the tuple if given an empty tuple\r\n  if (currentTuple.length === 0) { \r\n    currentTuple[0] = sumRequirement - tupleSize + 1;\r\n    for (let i = 1; i < tupleSize; i++) {\r\n      currentTuple[i] = 1;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // If not given an empty tuple, compute the next tuple\r\n  for (let i = currentTuple.length - 2; i >= 0; i--) {\r\n    const j: number = i + 1;\r\n    if (currentTuple[i] - currentTuple[j] >= 2) {\r\n      currentTuple[i] = currentTuple[i] - 1;\r\n      currentTuple[j] = currentTuple[j] + 1;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction filterDemonsAfterSpeciesFusion(fusionResults: Models.FusionResults, settings: UserSettings, speciesR: Models.Demon, ingCountR: number, speciesIngs: Models.Demon[]): boolean {\r\n  const fusionResultsData = fusionResults.data;\r\n  // throw out the resulting species if we knew how to make it with fewer ingredients\r\n  let canBeMadeWithLessIngredient: boolean = false;\r\n  for (let sizeCheck = ingCountR - 1; sizeCheck >= 1; sizeCheck--) {\r\n    if (fusionResultsData[sizeCheck][speciesR.id]) {\r\n      canBeMadeWithLessIngredient = true;\r\n      break;\r\n    }\r\n  }\r\n  if (canBeMadeWithLessIngredient) { return false; }\r\n\r\n  if (speciesR.lvl > settings.charLvl) { return false; }\r\n\r\n  // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n  if (ingCountR === settings.maxIngredient) {\r\n    for (const speciesIng of speciesIngs) {\r\n      if (speciesR.lvl < speciesIng.lvl) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCrissCross(ingSettings: Models.IngredientsSettings, demon: Models.FusedDemon): boolean {\r\n  const baseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const id in baseIngCount) {\r\n    if (baseIngCount[id] > 1 && !ingSettings[id].multipleUse) { return false; }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCalculation(mustUseDemons: Models.MustUseDemonsMap, demon: Models.FusedDemon): boolean {\r\n  const myMustUseDemons = {...mustUseDemons};\r\n  const demonBaseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const demonId in demonBaseIngCount) {\r\n    delete myMustUseDemons[demonId];\r\n  }\r\n  if (Object.keys(myMustUseDemons).length > 0) { return false; }\r\n  return true;\r\n}\r\n\r\nfunction prepareIngredientsSettingsForFinalFilter(ingSettings: Models.IngredientsSettings, ingredients: Models.Ingredients): Models.MustUseDemonsMap {\r\n  const mustUseDemons: Models.MustUseDemonsMap = {};\r\n  for (const id in ingredients) {\r\n    if (ingSettings[id].mustUse) { mustUseDemons[id] = true };\r\n  }\r\n  return mustUseDemons;\r\n}\r\n\r\nfunction crissCrossFusedDemons(resultSpecies: Models.Demon, ingredientsSettings: Models.IngredientsSettings, ...ingredients: Models.FusedDemon[][]): Models.FusedDemon[] {\r\n  const indeces: number[] = [];\r\n  const ret: Models.FusedDemon[] = [];\r\n  for (let i = 0; i < ingredients.length; i++) {\r\n    indeces.push(0);\r\n  }\r\n  while (true) {\r\n    const fusedDemonIngredientsHistory: Models.FusedDemon[] = [];\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      fusedDemonIngredientsHistory.push(ingredients[i][indeces[i]]);\r\n    }\r\n    ret.push(new Models.FusedDemon(resultSpecies, fusedDemonIngredientsHistory));\r\n\r\n    // Increment the indeces\r\n    let hasCarry: boolean = true;\r\n    for (let i = indeces.length - 1; i >= 0; i--) {\r\n      let index: number = indeces[i];\r\n      if (hasCarry) { index = index + 1; hasCarry = false; }\r\n      if (index >= ingredients[i].length) { index = 0; hasCarry = true; }\r\n      indeces[i] = index;\r\n      if (!hasCarry) { break; }\r\n    }\r\n    if (hasCarry) { break; }\r\n  }\r\n  \r\n  return ret.filter(filterDemonsAfterCrissCross.bind(undefined, ingredientsSettings));;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeUserSettings(demonCompendium: DemonCompendium): UserSettings {\r\n  const settings = new UserSettings();\r\n  settings.useTripleFusion = demonCompendium.enableTripleFusion;\r\n  settings.useTripleFusionSettingIsVisible = demonCompendium.enableTripleFusion;\r\n  return settings;\r\n}\r\n\r\nexport default function FusionCalculator(props: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = props;\r\n\r\n  const [ingredients, setIngredients] = useState<Models.Ingredients>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>(new Models.FusionResults());\r\n  const [fusionResultsPromise, setFusionResultsPromise] = useState<Promise<Models.FusionResults> | undefined>(undefined);\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  const history = useHistory();\r\n  const routeMatcher = useRouteMatch();\r\n\r\n  let [nonRenderingStates] = useState<[UserSettings, Models.IngredientsSettings]>([initializeUserSettings(demonCompendium), {}]);\r\n  const settings = nonRenderingStates[0];\r\n  const ingredientsSettings = nonRenderingStates[1];\r\n  const settingsPanelEventHandlers: SettingsPanelEventHandlers = {};\r\n  const refResultsTable = useRef<HTMLHeadingElement>(null);\r\n\r\n  useEffect(()=>{\r\n    let isMounted: boolean = true;\r\n\r\n    if (fusionResultsPromise) {\r\n      fusionResultsPromise.then((fr)=>{\r\n        if (isMounted) {\r\n          setFusionResults(fr);\r\n          setFusionResultsPromise(undefined);\r\n          if (fr.hasFusionResult()) {\r\n            refResultsTable.current?.scrollIntoView({ behavior: \"smooth\" });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return ()=>{ isMounted = false; }\r\n  }, [fusionResults, fusionResultsPromise]);\r\n\r\n  const removeDemonFromIngredientsHandler = useCallback(function (demonId: number): void {\r\n    const newIngredients = { ...ingredients };\r\n    delete newIngredients[demonId];\r\n    setIngredients(newIngredients);\r\n  }, [ingredients]);\r\n\r\n  function addDemonToIngredientsHandler(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function calculateButtonHandler(): void {\r\n    setFusionResultsPromise(calculateAllFusionCombinationsAsync(ingredients, demonCompendium, settings, ingredientsSettings));\r\n  }\r\n\r\n  function settingsButtonHandler(): void {\r\n    if (settingsPanelEventHandlers.toggleVisibility) {\r\n      settingsPanelEventHandlers.toggleVisibility();\r\n    }\r\n  }\r\n\r\n  function resetButtonHandler(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n    for (const key in ingredientsSettings) {\r\n      delete ingredientsSettings[key];\r\n    }\r\n    \r\n    setFusionResults(new Models.FusionResults());\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n\r\n  function openDemonRecipesHandler(demonId: number) {\r\n    history.push(`${routeMatcher.url}/demon/${demonId}`);\r\n  }\r\n  \r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route path={`${routeMatcher.path}/demon/:demonId`}>\r\n          <DemonDisplayer demonCompendium={demonCompendium} goBackUrlPath={routeMatcher.url} fusionResults={fusionResults} />\r\n        </Route>\r\n        <Route path={`${routeMatcher.path}/`}>\r\n\r\n          <div className={styles.fusionCalculator + (fusionResultsPromise ? \" \" + styles.loading : \"\")}>\r\n            <div className={styles.section}>\r\n              <h2>Add Demons to Use as Fusion Ingredients</h2>\r\n              <div className={styles.addDemonsAndButtonsRowContainer}>\r\n                <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredientsHandler} />\r\n                <div className={styles.buttonsRow}>\r\n                  <Button className={styles.calculateButton} variant=\"outlined\" onClick={calculateButtonHandler} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n                  <Button className={styles.settingsButton} variant=\"outlined\" onClick={settingsButtonHandler}><SettingsIcon /></Button>\r\n                  <Button className={styles.resetButton} variant=\"outlined\" onClick={resetButtonHandler}><ReplayIcon />Reset</Button>\r\n                </div>\r\n              </div>\r\n              <SettingsPanel key={resetterKey} settings={settings} eventHandlers={settingsPanelEventHandlers} />\r\n            </div>\r\n            <div className={styles.section} hidden={Object.keys(ingredients).length === 0}>\r\n              <h2>Fusion Ingredients</h2>\r\n              <IngredientsTable\r\n                demonCompendium={demonCompendium}\r\n                ingredients={ingredients}\r\n                ingredientsSettings={ingredientsSettings}\r\n                onRemoveIngredient={removeDemonFromIngredientsHandler} />\r\n            </div>\r\n            <div className={styles.section} hidden={!fusionResults.hasFusionResult()}>\r\n              <h2>Results</h2>\r\n              <div ref={refResultsTable}>\r\n                <ResultsTable fusionResults={fusionResults} onOpenDemonRecipes={openDemonRecipesHandler} />\r\n              </div>\r\n            </div>\r\n            \r\n            <Backdrop open={fusionResultsPromise !== undefined} hidden={fusionResultsPromise === undefined}>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          </div>\r\n\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}","import React from 'react';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionCalculator from './fusion-calculator';\r\n\r\nimport './app.scss';\r\nimport { Tab, Tabs } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\"\r\n  }\r\n});\r\n\r\nfunction loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/desu2/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/desu2/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  const presetJsonPromise = import(\"./data/desu2/presets.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2], loadedJsons[3]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nfunction loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/p4g/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/p4g/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/p4g/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    setLoadedCompendiumCallback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nfunction loadPersona5RoyalDemonCompendium(setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/p5r/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/p5r/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/p5r/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    setLoadedCompendiumCallback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nexport enum Game {\r\n  person4Golden = 0,\r\n  persona5Royal = 1,\r\n  devilSurvivor2 = 2\r\n}\r\n\r\nfunction loadGameData(game: Game, setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  switch(game) {\r\n    case Game.person4Golden:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    case Game.persona5Royal:\r\n      loadPersona5RoyalDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    case Game.devilSurvivor2:\r\n      loadDesu2DemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    default:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n  }\r\n}\r\n\r\nconst urlParamToGameMap: { [gameStr: string]: Game } = {\r\n  p4g: Game.person4Golden,\r\n  p5r: Game.persona5Royal,\r\n  desu2: Game.devilSurvivor2\r\n}\r\n\r\nfunction getGameUrlPath(game: Game): string | undefined {\r\n  for (const gameStrCode in urlParamToGameMap) {\r\n    if (urlParamToGameMap[gameStrCode] === game) {\r\n      return gameStrCode;\r\n    }\r\n  }\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const urlParams = useParams<{gameStrCode: string}>();\r\n  const [demonCompendium, setDemonCompendium] = React.useState<DemonCompendium | undefined>(undefined);\r\n  const [currentGame, setCurrentGame] = React.useState<Game>(Game.person4Golden);\r\n\r\n  React.useEffect(()=>{\r\n      loadGameData(currentGame, setDemonCompendium);\r\n  }, [currentGame]);\r\n  \r\n  const history = useHistory();\r\n  \r\n  const changeGameTabHandler = (event: React.ChangeEvent<{}> | undefined, gameId: Game) => {\r\n    if (gameId !== currentGame) {\r\n      setDemonCompendium(undefined);\r\n    }\r\n    history.push(\"/megaten-fusion-recommender/\" + getGameUrlPath(gameId));\r\n  };\r\n\r\n  const gameFromUrlParam: Game | undefined = urlParamToGameMap[urlParams.gameStrCode];\r\n  if (gameFromUrlParam === undefined) {\r\n    changeGameTabHandler(undefined, Game.person4Golden);\r\n    return <React.Fragment />\r\n  } else if (gameFromUrlParam !== currentGame) {\r\n    setCurrentGame(gameFromUrlParam);\r\n    return <React.Fragment />\r\n  }\r\n\r\n  if (!demonCompendium) {\r\n    return <React.Fragment />\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n\r\n        <header>\r\n          <h1>MegaTen Fusion by Results Calculator</h1>\r\n        </header>\r\n        <Tabs value={currentGame} onChange={changeGameTabHandler}>\r\n          <Tab label=\"Persona 4 Golden\" />\r\n          <Tab label=\"Persona 5 Royal\" />\r\n          <Tab label=\"Devil Survivor 2\" />\r\n        </Tabs>\r\n\r\n        <div className=\"appBody\">\r\n          <FusionCalculator demonCompendium={demonCompendium} />\r\n        </div>\r\n\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Router,\r\n  Redirect\r\n} from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport App from './app';\r\n\r\nReactDOM.render(<GitHubPageRedirect />,\r\n  document.getElementById('gitHubPageRedirector'));\r\n\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route path=\"/megaten-fusion-recommender/:gameStrCode?\">\r\n          <App/>\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Redirect to=\"/megaten-fusion-recommender/\" />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction GitHubPageRedirect(): JSX.Element {\r\n  // Single Page Apps for GitHub Pages\r\n  // MIT License\r\n  // https://github.com/rafgraph/spa-github-pages\r\n  // This script checks to see if a redirect is present in the query string,\r\n  // converts it back into the correct url and adds it to the\r\n  // browser's history using window.history.replaceState(...),\r\n  // which won't cause the browser to attempt to load the new url.\r\n  // When the single page app is loaded further down in this file,\r\n  // the correct url will be waiting in the browser's history for\r\n  // the single page app to route accordingly.\r\n  (function(loc) {\r\n    if (loc.search[1] === '/' ) {\r\n      var decoded = loc.search.slice(1).split('&').map(function(s) { \r\n        return s.replace(/~and~/g, '&')\r\n      }).join('?');\r\n      window.history.replaceState(null, \"\",\r\n          loc.pathname.slice(0, -1) + decoded + loc.hash\r\n      );\r\n    }\r\n  }(window.location))\r\n  return <React.Fragment />\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"results-table_dataTable__BqyI6\",\"nameColumn\":\"results-table_nameColumn__3-ncz\",\"lvlColumn\":\"results-table_lvlColumn__35Aqx\",\"raceColumn\":\"results-table_raceColumn__34cLH\",\"statColumn\":\"results-table_statColumn__3szBY\",\"ingredientsColumn\":\"results-table_ingredientsColumn__3-up2\",\"recipeButton\":\"results-table_recipeButton__1xtnD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionCalculator\":\"fusion-calculator_fusionCalculator__3Zguo\",\"loading\":\"fusion-calculator_loading__pGhei\",\"addDemonsAndButtonsRowContainer\":\"fusion-calculator_addDemonsAndButtonsRowContainer__wkZrf\",\"buttonsRow\":\"fusion-calculator_buttonsRow__1YLsP\",\"calculateButton\":\"fusion-calculator_calculateButton__31LRV\",\"section\":\"fusion-calculator_section__3Ez8Z\",\"shining\":\"fusion-calculator_shining__3n0sX\",\"settingsButton\":\"fusion-calculator_settingsButton__2qcyE\",\"resetButton\":\"fusion-calculator_resetButton__12QkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"ingredients-table_dataTable__3eHDj\",\"checkBox\":\"ingredients-table_checkBox__3TQeR\",\"nameColumnHeader\":\"ingredients-table_nameColumnHeader__6MDJR\",\"raceColumnHeader\":\"ingredients-table_raceColumnHeader__1WXYk\",\"removeDemonButton\":\"ingredients-table_removeDemonButton__3uoAu\",\"removeDemonButtonIcon\":\"ingredients-table_removeDemonButtonIcon__2l4m2\",\"warningIcon\":\"ingredients-table_warningIcon__p_Iu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentContainer\":\"recipes-table_componentContainer__gd3Wo\",\"filterField\":\"recipes-table_filterField__2wbHr\",\"pagination\":\"recipes-table_pagination__o4sqn\",\"recipeCardsContainer\":\"recipes-table_recipeCardsContainer__3P3w_\",\"recipeCard\":\"recipes-table_recipeCard__2-jxu\",\"baseIngredientName\":\"recipes-table_baseIngredientName__3mt6k\",\"centerText\":\"recipes-table_centerText__2NUff\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPanel\":\"settings-panel_settingsPanel__Jlbex\",\"paper\":\"settings-panel_paper__ee3p0\",\"settingsLine\":\"settings-panel_settingsLine__1HRFl\",\"numberSettings\":\"settings-panel_numberSettings__RpSac\",\"numberFieldLabel\":\"settings-panel_numberFieldLabel__30ovM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__1Nq5q\",\"subAdderContainer\":\"ui-components_subAdderContainer__2g7zq\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1oqYT\",\"addDemonButton\":\"ui-components_addDemonButton__1Md5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentContainer\":\"demon-displayer_componentContainer__1vk7N\",\"section\":\"demon-displayer_section__K-bBK\",\"label\":\"demon-displayer_label__3kKVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paperContainer\":\"data-table_paperContainer__yXedv\",\"tableContainer\":\"data-table_tableContainer__2trr1\",\"header\":\"data-table_header__19DGp\",\"tableBody\":\"data-table_tableBody__1DiId\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warningBanner\":\"minor-ui-components_warningBanner__27C77\",\"icon\":\"minor-ui-components_icon__1xTlq\"};"],"sourceRoot":""}
{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/data-table.tsx","ui-components/ingredients-table.tsx","ui-components/minor-ui-components.tsx","ui-components/results-table.tsx","ui-components/settings-panel.tsx","ui-components/demon-adder.tsx","ui-components/recipes-table.tsx","demon-displayer.tsx","fusion-calculator.tsx","app.tsx","index.tsx","ui-components/scss/results-table.module.scss","fusion-calculator.module.scss","ui-components/scss/ingredients-table.module.scss","ui-components/scss/recipes-table.module.scss","ui-components/scss/settings-panel.module.scss","ui-components/scss/ui-components.module.scss","demon-displayer.module.scss","ui-components/scss/data-table.module.scss","ui-components/scss/minor-ui-components.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","rank","specialRecipe","this","statsName","FusedDemon","demon","ingredients","length","ret","ingDemon","getBaseIngredients","parentIngCount","getBaseIngredientsCounts","baseDemonId","Object","keys","join","values","map","getHighestIngredientLvl","highestIngLvl","DemonsPreset","caption","demons","FusionResults","data","metadata","ingredientCountMap","populateFusionResultsIngCountMap","demonId","hasFusionResult","ingCount","Number","FUSION_CHART_NULLS","DemonCompendium","demonListJson","fusionChartJson","fusionSettingsJson","presetJson","demonsAry","normalFusionChart","tripleFusionChart","elementsMap","elementFusionChart","demonsPresets","_sameRaceFuseToElement","_enableTripleFusion","disableSameDemonFusion","idMap","nameMap","raceIdMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseSettings","parseFusionChart","prepRaceLvlInfo","parsePresets","demonA","demonB","demonIsElement","fuseDemonWithElement","fuseDemonSameRaceNoElement","fuseDemonDiffRaceNoElement","demonC","sort","x","y","getRaceOrder","demonWeak","demonMid","demonStrong","intermediateRace","getFusionRace","resultRace","getTripleFusionRace","resultLvlTable","getLvlTableForRace","resultLvlTest","resultLvl","findResultLvlFromLvlTable","demonResult","getDemonFromRaceLvl","resultLvlIndex","indexOf","demonName","getDemonByName","randomDemonIndex","Math","floor","random","elementsIds","elementsCount","randomElementIdIndex","randomElementId","testGetDemon","results","i","demonR","fuseDemons","console","log","results2","j","tripleFuseDemons","push","demonsJson","Models","Boolean","sameRaceFuseToElement","enableTripleFusion","row","raceFusionTable","col","chartsToUpdate","raceA","races","raceB","raceC","undefined","chart","specialRecipes","elements","elementIdIndexMap","elementName","elementFusionTable","raceId","elementId","elementIndex","presetsJson","presets","preset","presetModel","demon1","demon2","includeUnfusable","lvlTable","demonIsUnfusable","lvlToCheck","isTripleFusion","index","raceR","lvlTableR","lvlResultTest","lvlR","elementNameR","filter","element","demonRankChange","resultRank","DataTable","params","maxPage","dataTableProvider","React","useState","page","setPage","sortByCol","setSortByCol","sortDirection","setSortDirection","sortType","setSortType","pageSize","colDefs","getColumnDefinition","preIdRowData","getAllRowsData","totalRowCount","Fragment","banner","renderBanner","ceil","rowData","rd","getSortValue","bind","sortMult","comparitor","numberComparitor","stringComparitor","a","b","valA","valB","paginizedRowData","headerCells","colNum","colDef","headerContent","sortSpec","buildSortableHeaderCellContent","TableCell","headerProps","renderedRows","TableRow","renderRow","paperContainerClassName","styles","paperContainer","className","Paper","elevation","TableContainer","tableContainer","Table","TableHead","header","TableBody","tableBody","Pagination","count","onChange","event","value","size","headerInnerContent","colSortType","_sortByCol","_sortDirection","_sortType","TableSortLabel","active","direction","onClick","createSortHandler","setOrderBy","nextSortDirection","IngredientsSettingsEnum","WarningBannerCore","icon","warningBanner","message","WarningBanner","memo","RemoveDemonButton","IconButton","onRemoveIngredient","removeDemonButton","removeDemonButtonIcon","CheckboxSetting","setting","ingredientsSettings","defaultChecked","mustUse","multipleUse","Checkbox","checkBox","checked","target","color","FusionIngredientsDataTableProvider","allRowsData","demonCompendium","nameColumnHeader","raceColumnHeader","width","align","warningIcon","IngredientsTable","initializeIngredientsSettings","useMemo","getDemonById","dataProvider","dataTable","FusionResultsDataTableProvider","onRecipesButtonClick","fusionResults","recipesButtonHandler","columnCount","nameColumn","lvlColumn","raceColumn","statColumn","ingredientsColumn","resultsAsRowsArray","ingCountStr","fusedDemon","renderedRow","keyId","stat","getIngredientCount","Button","variant","recipeButton","ResultsTable","props","onOpenDemonRecipes","UserSettings","charLvl","maxIngredient","useTripleFusion","useTripleFusionSettingIsVisible","SettingsPanel","eventHandlers","settings","isVisible","setIsVisible","charLvlFieldValue","setCharLvlFieldValue","maxIngFieldValue","setMaxIngFieldValue","toggleVisibility","settingsPanelStyle","height","style","settingsPanel","paper","NumberSettings","label","min","max","emptyFieldValue","fieldStateValueAndSetter","onSetSettings","newValue","CheckboxSettings","stateValueAndSetter","stateValue","stateSetter","settingsLine","numberSettings","numberFieldLabel","TextField","type","InputLabelProps","shrink","inputProps","step","valueAsNumber","FormControlLabel","control","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","selection","onKeyPress","key","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","keyIsAccepted","preventDefault","stopPropagation","valueSetterFunc","lvlFieldsContainer","selectedOption","setSelectedOption","addDemonButton","renderDemonName","isFused","baseIngredientName","renderRecipe","priorRecipes","curRecipe","isFirstLoop","separator","nameR","Divider","light","centerText","DemonCard","Card","recipeCard","CardContent","RecipesTable","setFilter","filteredRecipesAry","filterMap","filterOption","recipesAry","filteredAry","ingDemonsCount","filterCheckList","ingDemonId","filterRecipesAry","filterOptions","currFilter","ingDemonsMap","ingDemons","createFilterOptions","componentContainer","multiple","filterField","defaultValue","filterSelectedOptions","pagination","hidden","recipeCardsContainer","DemonDisplayer","demonIdStr","useParams","history","useHistory","isNaN","goBackUrlPath","fusionResultsSection","section","Label","text","promise","Promise","resolver","setTimeout","calculateAllFusionCombinations","newFusionResults","newFusionResultsData","ingCountR","ingCountA","ingCountB","speciesUsedAsA","idA","speciesA","idB","speciesB","speciesR","filterDemonsAfterSpeciesFusion","resultingFusedDemons","crissCrossFusedDemons","calculateTripleFusionCombinations","mustUseDemons","ingSettings","prepareIngredientsSettingsForFinalFilter","filterFunction","filterDemonsAfterCalculation","demonAry","isWeakerThanIngredients","updateMetaData","ingCounts","fusionResultsData","getNextTripleFusionIngCounts","ingCountC","alreadyCalculatedAsA","alreadyCalculatedAsB","idC","speciesC","resultFusedDemons","fusionIngCounts","speciesIngs","canBeMadeWithLessIngredient","sizeCheck","speciesIng","filterDemonsAfterCrissCross","baseIngCount","myMustUseDemons","demonBaseIngCount","resultSpecies","indeces","fusedDemonIngredientsHistory","hasCarry","initializeUserSettings","FusionCalculator","setIngredients","setFusionResults","fusionResultsPromise","setFusionResultsPromise","resetterKey","setResetterKey","routeMatcher","useRouteMatch","nonRenderingStates","settingsPanelEventHandlers","refResultsTable","useRef","useEffect","isMounted","fr","current","scrollIntoView","behavior","removeDemonFromIngredientsHandler","useCallback","newIngredients","path","url","fusionCalculator","loading","addDemonsAndButtonsRowContainer","buttonsRow","calculateButton","calculateAllFusionCombinationsAsync","disabled","settingsButton","resetButton","ref","Backdrop","open","CircularProgress","Game","theme","createMuiTheme","palette","typography","fontFamily","loadPersona4GoldenDemonCompendium","setLoadedCompendiumCallback","demonJsonPromise","importedJson","default","fusionChartJsonPromise","settingsJsonPromise","all","loadedJsons","newDemonCompendium","loadGameData","game","person4Golden","persona5Royal","loadPersona5RoyalDemonCompendium","devilSurvivor2","callback","presetJsonPromise","loadDesu2DemonCompendium","urlParamToGameMap","p4g","p5r","desu2","App","urlParams","setDemonCompendium","currentGame","setCurrentGame","changeGameTabHandler","gameId","gameStrCode","getGameUrlPath","gameFromUrlParam","ThemeProvider","CssBaseline","Tabs","Tab","ReactDOM","render","GitHubPageRedirect","document","getElementById","createBrowserHistory","loc","search","decoded","slice","split","s","replace","window","replaceState","pathname","hash","location","StrictMode","to","module","exports"],"mappings":"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","file":"static/js/main.29afe1e1.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    rank: number = 0;\r\n    specialRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredients?: FusedDemon[];\r\n\r\n    constructor(demon: Demon, ingredients?: FusedDemon[]) {\r\n        this.demon = demon;\r\n        this.ingredients = ingredients;\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        if (!this.ingredients) { return false; }\r\n        return this.ingredients.length > 0;\r\n    }\r\n\r\n    public getBaseIngredients(): { [id: number]: Demon } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: Demon } = {};\r\n            for (const ingDemon of this.ingredients) {\r\n                ret = {...ret, ...ingDemon.getBaseIngredients()};\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: Demon } = {};\r\n            ret[this.demon.id] = this.demon;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public getBaseIngredientsCounts(): { [id: number]: number } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: number } = {};\r\n            for (const parentDemon of this.ingredients) {\r\n                const parentIngCount = parentDemon.getBaseIngredientsCounts();\r\n                for (const baseDemonId in parentIngCount) {\r\n                    ret[baseDemonId] = (ret[baseDemonId] || 0) + parentIngCount[baseDemonId];\r\n                }\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: number } = {};\r\n            ret[this.demon.id] = 1;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public toBaseIngredientsIdCode(): string {\r\n        return Object.keys(this.getBaseIngredients()).join(\"-\");\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        return Object.values(this.getBaseIngredients()).map(demon => demon.name).join(\" \");\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredients) {\r\n            for (const ingDemon of this.ingredients) {\r\n                let highestIngLvl: number = ingDemon.getHighestIngredientLvl();\r\n                if (highestIngLvl > lvl) { lvl = highestIngLvl; }\r\n            }\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport class FusionResults {\r\n    data: { [ingredientCount: number]: { [demonId: number]: FusedDemon[] } };\r\n    metadata: {\r\n        ingredientCountMap: { [demonId: number]: number }\r\n    };\r\n\r\n    constructor() {\r\n        this.data = {};\r\n        this.metadata = { ingredientCountMap: {} };\r\n    }\r\n\r\n    public updateMetaData(): void {\r\n        this.populateFusionResultsIngCountMap();\r\n    }\r\n\r\n    public getIngredientCount(demonId: number): number | undefined {\r\n        return this.metadata.ingredientCountMap[demonId];\r\n    }\r\n\r\n    public hasFusionResult(): boolean {\r\n        let hasFusionResult = false;\r\n        for (const ingCount in this.data) {\r\n            if (Number(ingCount) === 1) { continue; }\r\n            if (Object.keys(this.data[ingCount]).length > 0) { \r\n                hasFusionResult = true;\r\n                break; }\r\n        }\r\n        return hasFusionResult;\r\n    }\r\n\r\n    private populateFusionResultsIngCountMap(): void {\r\n        for (const ingCount in this.data) {\r\n            for (const id in this.data[ingCount]) {\r\n                this.metadata.ingredientCountMap[Number(id)] = Number(ingCount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type Ingredients = { [demonId: number]: boolean };\r\nexport type IngredientsSettings = { [demonId: number]: { mustUse: boolean, multipleUse: boolean } };\r\nexport type MustUseDemonsMap = {[demonId: number]: boolean};","import * as Models from './data-models';\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionSettingsJson = {\r\n    sameRaceFuseToElement?: boolean,\r\n    enableTripleFusion?: boolean,\r\n    disableSameDemonFusion?: boolean,\r\n}\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    raceFusionTable: string[][],\r\n    \r\n    elements?: string[],\r\n    elementFusionTable?: number[][],\r\n    specialRecipes?: { [resultName: string]: string[] }\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetsJson = { presets: Preset[] };\r\n\r\nconst FUSION_CHART_NULLS: { [nullStr: string]: boolean } = { \"None\": true };\r\n\r\nexport class DemonCompendium {\r\n    private demonsAry: Models.Demon[] = [];\r\n    private normalFusionChart: { [race: string]: { [race: string]: string | undefined } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private tripleFusionChart: { [race: string]: { [race: string]: string | undefined } } = {};\r\n    private elementsMap: { [demonId: number]: Models.Demon } = {};\r\n    private elementFusionChart: { [race: string]: { [elementId: string]: number | undefined } } = {};\r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n\r\n    private _sameRaceFuseToElement: boolean = false;\r\n    private _enableTripleFusion: boolean = false;\r\n    private disableSameDemonFusion: boolean = false;\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceIdMap: { [race: string]: number } = {}\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJson: DemonJson, fusionChartJson: FusionChartJson, fusionSettingsJson?: FusionSettingsJson, presetJson?: PresetsJson) {\r\n        this.parseDemons(demonListJson);\r\n        this.prepDemonIds();\r\n\r\n        if (fusionSettingsJson) {\r\n            this.parseSettings(fusionSettingsJson);\r\n        }\r\n\r\n        this.parseFusionChart(fusionChartJson);\r\n        this.prepRaceLvlInfo();\r\n        \r\n        if (presetJson) {\r\n            this.parsePresets(presetJson);\r\n        }\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonsAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public get enableTripleFusion(): boolean {\r\n        return this._enableTripleFusion;\r\n    }\r\n\r\n    public get sameRaceFuseToElement(): boolean {\r\n        return this._sameRaceFuseToElement;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.id === demonB.id && this.disableSameDemonFusion) { return undefined; }\r\n        \r\n        if (this.demonIsElement(demonA) && this.demonIsElement(demonB)) {\r\n            return undefined;\r\n        } else if (this.demonIsElement(demonA) || this.demonIsElement(demonB)) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoElement(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    public tripleFuseDemons(demonA: Models.Demon, demonB: Models.Demon, demonC: Models.Demon): Models.Demon | undefined {\r\n        if (this.disableSameDemonFusion) {\r\n            if (demonA.id === demonB.id ||\r\n                demonA.id === demonC.id ||\r\n                demonB.id === demonC.id) { return undefined; }\r\n        }\r\n\r\n        const [demonWeak, demonMid, demonStrong] = [demonA, demonB, demonC].sort((x, y) => (x.lvl !== y.lvl) ? x.lvl - y.lvl : this.getRaceOrder(y.race) - this.getRaceOrder(x.race)); // sort from lowest to highest lv. If lvs are the same, sort by race order from highest to lowest.\r\n        const intermediateRace: string | undefined = this.getFusionRace(demonWeak.race, demonMid.race);\r\n        if (!intermediateRace) { return undefined; }\r\n        const resultRace: string | undefined = this.getTripleFusionRace(intermediateRace, demonStrong.race);\r\n        if (!resultRace) { return undefined; }\r\n        const resultLvlTable: number[] = this.getLvlTableForRace(resultRace);\r\n        const resultLvlTest: number = (demonWeak.lvl + demonMid.lvl + demonStrong.lvl + 12.75) / 3;\r\n        let resultLvl: number = this.findResultLvlFromLvlTable(resultLvlTable, resultLvlTest, true);\r\n        let demonResult: Models.Demon | undefined = this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n        if (!demonResult) { return undefined; }\r\n        if (demonResult.id !== demonWeak.id && demonResult.id !== demonMid.id && demonResult.id !== demonStrong.id) {\r\n            return demonResult;\r\n        } else {\r\n            let resultLvlIndex = resultLvlTable.indexOf(resultLvl);\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            if (resultLvlIndex + 1 < resultLvlTable.length) {\r\n                resultLvl = resultLvlTable[resultLvlIndex + 1];\r\n                return this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private testGetDemon(demonName?: string): Models.Demon | undefined {\r\n        if (demonName) { return this.getDemonByName(demonName); }\r\n        if (this.demonsAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonsAry.length);\r\n        return this.demonsAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        const elementsIds = Object.keys(this.elementsMap);\r\n        const elementsCount = elementsIds.length;\r\n        if (elementsCount === 0) { return undefined };\r\n        const randomElementIdIndex: number = Math.floor(Math.random() * elementsCount);\r\n        const randomElementId: number = Number(elementsIds[randomElementIdIndex]);\r\n        return this.elementsMap[randomElementId];\r\n    }\r\n\r\n    private testFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [name: string]: Models.Demon} = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            const demonR = this.fuseDemons(demon, demonB);\r\n            if (!demonR) {continue;}\r\n            results[demonB.name] = demonR;\r\n        }\r\n        \r\n        console.log(demon);\r\n        console.log(results);\r\n    }\r\n\r\n    private testTripleFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [resultName: string]: Models.Demon[][] } = {};\r\n        const results2: { [resultName: string]: { [ing2Name: string]: string[] } } = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            for (let j = i; j < this.demonsAry.length; j++) {\r\n                const demonC = this.demonsAry[j];\r\n                const demonR = this.tripleFuseDemons(demon, demonB, demonC);\r\n                if (!demonR) {continue;}\r\n                if (!results[demonR.name]) { results[demonR.name] = []; }\r\n                if (!results2[demonR.name]) { results2[demonR.name] = {}; }\r\n                if (!results2[demonR.name][demonB.name]) { results2[demonR.name][demonB.name] = []; }\r\n                if (!results2[demonR.name][demonC.name]) { results2[demonR.name][demonC.name] = []; }\r\n                results[demonR.name].push([demonB, demonC]);\r\n                results2[demonR.name][demonB.name].push(demonC.name);\r\n                results2[demonR.name][demonC.name].push(demonB.name);\r\n            }\r\n        }\r\n        console.log(demon);\r\n        console.log(results);\r\n        console.log(results2);\r\n    }\r\n\r\n    private parseDemons(demonsJson: DemonJson): void {\r\n        Models.Demon.statsName = demonsJson.statsName;\r\n        const demons = demonsJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonsAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseSettings(fusionSettingsJson: FusionSettingsJson): void {\r\n        this._sameRaceFuseToElement = Boolean(fusionSettingsJson.sameRaceFuseToElement);\r\n        this._enableTripleFusion = Boolean(fusionSettingsJson.enableTripleFusion);\r\n        this.disableSameDemonFusion = Boolean(fusionSettingsJson.disableSameDemonFusion);\r\n    }\r\n\r\n    private parseFusionChart(fusionChartJson: FusionChartJson): void {\r\n        for (let row: number = 0; row < fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const chartsToUpdate = [];\r\n                if (this._enableTripleFusion) {\r\n                    if (col < row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                    } else if (col === row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    } else {\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    }\r\n                } else {\r\n                    if (col > row) { \r\n                        continue;\r\n                    }\r\n                    chartsToUpdate.push(this.normalFusionChart);\r\n                }\r\n\r\n                const raceA: string = fusionChartJson.races[row];\r\n                const raceB: string = fusionChartJson.races[col];\r\n                let raceC: string | undefined = fusionChartJson.raceFusionTable[row][col];\r\n                if (FUSION_CHART_NULLS[raceC])\r\n                {\r\n                    raceC = undefined;\r\n                }\r\n\r\n                // Set the .raceA.raceB property of the parsed fusion table\r\n                for (const chart of chartsToUpdate) {\r\n                    if (!chart[raceA]) {\r\n                        chart[raceA] = {};\r\n                    }\r\n                    chart[raceA][raceB] = raceC;\r\n\r\n                    // Set the .raceB.raceA property of the parsed fusion table\r\n                    if (!chart[raceB]) {\r\n                        chart[raceB] = {};\r\n                    }\r\n                    chart[raceB][raceA] = raceC;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fusionChartJson.specialRecipes) {\r\n            for (const demonName in fusionChartJson.specialRecipes) {\r\n                const demon = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demon.specialRecipe = true;\r\n                demon.rank = 1000;\r\n            }\r\n        }\r\n\r\n        // Parse race data\r\n        for (let i = 0; i < fusionChartJson.races.length; i++) {\r\n            this.raceIdMap[fusionChartJson.races[i]] = i;\r\n        }\r\n\r\n        // Parse elements data\r\n        if (fusionChartJson.elements && fusionChartJson.elements.length > 0) {\r\n            const elementIdIndexMap: { [elementId: number]: number } = {};\r\n            for (let i = 0; i < fusionChartJson.elements.length; i++) {\r\n                const elementName = fusionChartJson.elements[i];\r\n                const demon = this.getDemonByName(elementName);\r\n                if (!demon) { continue; };\r\n                this.elementsMap[demon.id] = demon;\r\n                elementIdIndexMap[demon.id] = i;\r\n            }\r\n\r\n            if (fusionChartJson.elementFusionTable) {\r\n                for (const race in this.raceIdMap) {\r\n                    this.elementFusionChart[race] = {};\r\n                    const raceId: number = this.raceIdMap[race];\r\n                    for (const elementId in this.elementsMap) {\r\n                        const elementIndex = elementIdIndexMap[elementId];\r\n                        if (fusionChartJson.elementFusionTable[raceId]) {\r\n                            this.elementFusionChart[race][elementId] = fusionChartJson.elementFusionTable[raceId][elementIndex];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private parsePresets(presetsJson: PresetsJson): void {\r\n        if (!presetsJson) { return; }\r\n        for (const preset of presetsJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonsAry = this.demonsAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonsAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonsAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonsAry) {\r\n            if (demon.specialRecipe) { continue; }\r\n            demon.rank = this.getLvlTableForRace(demon.race).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string, includeUnfusable?: boolean): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        const lvlTable: number[] = [];\r\n        for (const lvl in this.raceLvlDemonMap[race]) {\r\n            if (!includeUnfusable && this.demonIsUnfusable(this.raceLvlDemonMap[race][lvl])) {\r\n                continue;\r\n            }\r\n            lvlTable.push(Number(lvl));\r\n        }\r\n        return lvlTable;\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.normalFusionChart[raceA]) {\r\n            if (this.normalFusionChart[raceA][raceB]) {\r\n                return this.normalFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getTripleFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.tripleFusionChart[raceA]) {\r\n            if (this.tripleFusionChart[raceA][raceB]) {\r\n                return this.tripleFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getRaceOrder(race: string): number {\r\n        return this.raceIdMap[race];\r\n    }\r\n\r\n    private findResultLvlFromLvlTable(lvlTable: number[], lvlToCheck: number, isTripleFusion?: boolean) {\r\n        let index = 0;\r\n        for (let i = 0; i < lvlTable.length; i++) {\r\n            if (lvlToCheck > lvlTable[i]) {\r\n                index++;\r\n            }\r\n        }\r\n        if (index >= lvlTable.length) { \r\n            if (isTripleFusion) { return -1; }\r\n            index = lvlTable.length - 1 \r\n        };\r\n        return lvlTable[index];\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const lvlResultTest = (demonB.lvl + demonA.lvl + 1) / 2;\r\n        const lvlR: number = this.findResultLvlFromLvlTable(lvlTableR, lvlResultTest);\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (this._sameRaceFuseToElement) {\r\n            const elementNameR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n            if (!elementNameR) { return undefined; }\r\n            return this.getDemonByName(elementNameR);\r\n        } else {\r\n            const resultLvlTable = this.getLvlTableForRace(demonB.race).filter(lvl => lvl !== demonA.lvl);\r\n            let resultLvlIndex = -1;\r\n            for (const resultLvl of resultLvlTable) {\r\n                if (demonA.lvl + demonB.lvl >= 2 * resultLvl) { resultLvlIndex = resultLvlIndex + 1 }\r\n            }\r\n\r\n            if (resultLvlTable[resultLvlIndex] === demonB.lvl) {\r\n                resultLvlIndex = resultLvlIndex - 1;\r\n            }\r\n\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            const resultLvl = resultLvlTable[resultLvlIndex];\r\n            return this.getDemonFromRaceLvl(demonA.race, resultLvl);\r\n        }\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (this.demonIsElement(demonA)) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (this.demonIsElement(demonB)) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        }\r\n\r\n        const demonRankChange = (this.elementFusionChart[demon.race] || {})[element.id];\r\n        if (demonRankChange === undefined) { return undefined; }\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined; }\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n\r\n    private demonIsElement(demon: Models.Demon): boolean {\r\n        return this.elementsMap[demon.id] !== undefined;\r\n    }\r\n\r\n    private demonIsUnfusable(demon: Models.Demon): boolean {\r\n        return demon.rank === 1000;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell, { TableCellProps } from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/data-table.module.scss';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\ntype StatePair<T> = [T, React.Dispatch<React.SetStateAction<T>>];\r\nexport type SortSpec = {\r\n    sortType: 'number' | 'string'\r\n}\r\nexport type ColDef = {\r\n    headerContent?: JSX.Element | string;\r\n    sortSpec?: SortSpec;\r\n    headerProps?: TableCellProps;\r\n}\r\nexport interface DataTableProvider<T> {\r\n    pageSize: number;\r\n    getColumnDefinition(): ColDef[];\r\n    getAllRowsData(): T[];\r\n    renderRow(rowData: T): JSX.Element | string | undefined;\r\n    getSortValue?(rowData: T, sortByCol: number): string | number;\r\n    renderBanner?(): JSX.Element | undefined;\r\n}\r\ninterface DataTableProps extends PaperProps {\r\n    dataTableProvider: DataTableProvider<any>;\r\n}\r\nconst DataTable = (params: DataTableProps): JSX.Element => {\r\n    const {dataTableProvider} = params;\r\n    const [page, setPage] = React.useState<number>(1);\r\n    const [sortByCol, setSortByCol] = React.useState<number | undefined>(undefined);\r\n    const [sortDirection, setSortDirection] = React.useState<\"desc\" | \"asc\" | undefined>(undefined);\r\n    const [sortType, setSortType] = React.useState<\"number\" | \"string\">(\"string\");\r\n    const pageSize: number = dataTableProvider.pageSize;\r\n    let maxPage: number = 1;\r\n\r\n    const colDefs: ColDef[] = dataTableProvider.getColumnDefinition();\r\n    const preIdRowData: any[] = dataTableProvider.getAllRowsData();\r\n    const totalRowCount: number = preIdRowData.length;\r\n\r\n    // Empty row banner\r\n    if (totalRowCount === 0) {\r\n        if (sortByCol !== undefined) { setSortByCol(undefined); }\r\n        if (page !== 1) { setPage(1); }\r\n        if (sortDirection !== undefined) { setSortDirection(undefined); }\r\n        let ret = <React.Fragment />;\r\n        let banner = dataTableProvider.renderBanner? dataTableProvider.renderBanner() : undefined;\r\n        if (banner) { ret = banner }\r\n        return ret;\r\n    }\r\n\r\n    // Shift page down if table loses rows\r\n    maxPage = Math.ceil(totalRowCount / pageSize);\r\n    if ((page - 1)* pageSize >= totalRowCount)\r\n    {\r\n        setPage(Math.ceil(totalRowCount / pageSize));\r\n        return <React.Fragment />;\r\n    }\r\n\r\n    // ID rows\r\n    const rowData: { id: number, data: any }[] = preIdRowData.map((rd, index) => { return { id: index, data: rd } });\r\n\r\n    // Sort rows\r\n    if ((sortByCol !== undefined) && (sortDirection !== undefined) && (dataTableProvider.getSortValue !== undefined)) {\r\n        const getSortValue = dataTableProvider.getSortValue.bind(dataTableProvider);\r\n        const sortMult: number = (sortDirection === \"asc\") ? 1 : -1;\r\n        const comparitor: (...x: any) => number = (sortType === \"number\") ? numberComparitor : stringComparitor;\r\n        rowData.sort((a, b) => { \r\n            const valA = getSortValue(a.data, sortByCol);\r\n            const valB = getSortValue(b.data, sortByCol);\r\n            return sortMult * comparitor(valA, valB) });\r\n    }\r\n\r\n    // Paginate\r\n    const paginizedRowData = rowData.filter((data, index) => (index >= (page - 1) * pageSize) && (index < page * pageSize));\r\n    function changePage(event: React.ChangeEvent<unknown>, value: number) {\r\n        setPage(value);\r\n    }\r\n    \r\n    // Render headers\r\n    const headerCells: JSX.Element[] = [];\r\n    let colNum: number = 0;\r\n    for (const colDef of colDefs) {\r\n        const headerContent = colDef.sortSpec ? buildSortableHeaderCellContent(colDef.headerContent, colNum, colDef.sortSpec.sortType, [sortByCol, setSortByCol], [sortDirection, setSortDirection], [sortType, setSortType]) : colDef.headerContent;\r\n\r\n        headerCells.push(<TableCell key={\"H-\" + colNum} {...colDef.headerProps}>{headerContent}</TableCell>);\r\n        colNum++;\r\n    }\r\n\r\n    // Render rows\r\n    const renderedRows: JSX.Element[] = [];\r\n    for (const row of paginizedRowData) {\r\n        renderedRows.push(\r\n            <TableRow key={row.id}>\r\n                {dataTableProvider.renderRow(row.data)}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    let paperContainerClassName: string = styles.paperContainer;\r\n    if (params.className) {\r\n        paperContainerClassName += \" \" + params.className;\r\n    }\r\n\r\n    return <Paper className={paperContainerClassName} elevation={3}>\r\n        <TableContainer className={styles.tableContainer}>\r\n            <Table>\r\n                <TableHead className={styles.header}>\r\n                    <TableRow>\r\n                        {headerCells}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className={styles.tableBody}>\r\n                    {renderedRows}\r\n                </TableBody>\r\n            </Table>\r\n            <Pagination count={maxPage} page={page} onChange={changePage} size=\"small\" />\r\n        </TableContainer>\r\n    </Paper>\r\n};\r\nexport default DataTable;\r\n\r\nfunction stringComparitor(a: string, b: string): number {\r\n    return (a > b) ? 1 : (a === b) ? 0 : -1;\r\n}\r\n\r\nfunction numberComparitor(a: number, b: number): number {\r\n    return a - b;\r\n}\r\n\r\nfunction buildSortableHeaderCellContent(\r\n    headerInnerContent: JSX.Element | string | undefined,\r\n    id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): JSX.Element {\r\n    const [sortByCol] = _sortByCol;\r\n    const [sortDirection] = _sortDirection;\r\n\r\n    return <TableSortLabel\r\n        active={sortByCol === id && sortDirection !== undefined}\r\n        direction={sortByCol === id ? sortDirection : undefined}\r\n        onClick={createSortHandler(id, colSortType, _sortByCol, _sortDirection, _sortType)}>\r\n        {headerInnerContent}\r\n    </TableSortLabel>;\r\n}\r\n\r\nfunction createSortHandler(id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void {\r\n    return (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        const [sortByCol, setOrderBy] = _sortByCol;\r\n        const [sortDirection, setSortDirection] = _sortDirection;\r\n        const [, setSortType] = _sortType;\r\n\r\n        let nextSortDirection = sortDirection;\r\n        if (sortByCol === id) {\r\n            if (sortDirection === \"asc\") { nextSortDirection = \"desc\" }\r\n            if (sortDirection === \"desc\") { nextSortDirection = undefined }\r\n            if (sortDirection === undefined) {nextSortDirection = \"asc\"}\r\n        } else {\r\n            nextSortDirection = \"asc\";\r\n        }\r\n        setSortDirection(nextSortDirection);\r\n        setOrderBy(id);\r\n        setSortType(colSortType);\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { WarningBanner } from './minor-ui-components';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nimport styles from './scss/ingredients-table.module.scss';\r\n\r\n//====================================================================================================\r\n\r\ntype RemoveDemonButtonProps = {\r\n    demonId: number;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nfunction RemoveDemonButton(params: RemoveDemonButtonProps): JSX.Element {\r\n\r\n    function onIconButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\r\n        if (params.onRemoveIngredient) {\r\n            params.onRemoveIngredient(params.demonId);\r\n        }\r\n    }\r\n\r\n    return <IconButton onClick={onIconButtonClick} className={styles.removeDemonButton}>\r\n    <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n  </IconButton>\r\n}\r\n\r\n//====================================================================================================\r\n\r\nenum IngredientsSettingsEnum {\r\n    multipleUse = 1,\r\n    mustUse = 2\r\n}\r\ntype CheckboxSettingProps = {\r\n    demonId: number,\r\n    setting: IngredientsSettingsEnum,\r\n    ingredientsSettings: Models.IngredientsSettings\r\n}\r\nfunction CheckboxSetting(params: CheckboxSettingProps): JSX.Element {\r\n    const {demonId, setting, ingredientsSettings} = params;\r\n    let defaultChecked: boolean = false;\r\n    switch (setting) {\r\n        case IngredientsSettingsEnum.mustUse: {\r\n            defaultChecked = ingredientsSettings[demonId].mustUse;\r\n            break;\r\n        }\r\n        case IngredientsSettingsEnum.multipleUse: \r\n        default: {\r\n            defaultChecked = ingredientsSettings[demonId].multipleUse;\r\n        }\r\n    }\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        switch (setting) {\r\n            case IngredientsSettingsEnum.mustUse: {\r\n                ingredientsSettings[demonId].mustUse = event.target.checked;\r\n                break;\r\n            }\r\n            case IngredientsSettingsEnum.multipleUse: \r\n            default: {\r\n                ingredientsSettings[demonId].multipleUse = event.target.checked;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <Checkbox\r\n        className={styles.checkBox}\r\n        defaultChecked={defaultChecked}\r\n        onChange={onCheckboxChange}\r\n        color=\"default\"\r\n    />;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeIngredientsSettings(ingredients: Models.Ingredients, ingredientsSettings: Models.IngredientsSettings) {\r\n    for (const demonId in ingredients) {\r\n        if (!ingredientsSettings[demonId]) {\r\n            ingredientsSettings[demonId] = { mustUse: false, multipleUse: false };\r\n        }\r\n    }\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FusionIngredientsTableProps = {\r\n    demonCompendium: DemonCompendium\r\n    ingredients: Models.Ingredients\r\n    ingredientsSettings: Models.IngredientsSettings\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nclass FusionIngredientsDataTableProvider implements DataTables.DataTableProvider<Models.Demon> {\r\n\r\n    pageSize: number = 25;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        return [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: {className: styles.nameColumnHeader} },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: {className: styles.raceColumnHeader} },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" } },\r\n            { headerContent: \"Only Show Recipes That Use This Demon\", headerProps: { width: 150, align: \"center\" } },\r\n            { headerContent: \"Can Use Multiple per Recipe\", headerProps: { width: 120, align: \"center\" } },\r\n            {}\r\n        ];\r\n    }\r\n\r\n    getAllRowsData(): Models.Demon[] {\r\n        return this.allRowsData;\r\n    }\r\n\r\n    renderRow(rowData: Models.Demon): JSX.Element {\r\n        return <React.Fragment>\r\n            <TableCell>\r\n                {rowData.name}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.lvl}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.race}\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.mustUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.multipleUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell>\r\n                <RemoveDemonButton demonId={rowData.id} onRemoveIngredient={this.onRemoveIngredient} />\r\n            </TableCell>\r\n        </React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.Demon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.name; }\r\n            case 1: { \r\n                return rowData.lvl; }\r\n            case 2: { \r\n                return rowData.race; }\r\n            default: {\r\n                return rowData.name; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        const icon = <WarningIcon className={styles.warningIcon}/>;\r\n        return <WarningBanner message=\"No ingredient demons. Use the section above to add demons to use for fusions.\" icon={icon}/>\r\n    }\r\n\r\n    demonCompendium: DemonCompendium;\r\n    ingredients: Models.Ingredients;\r\n    ingredientsSettings: Models.IngredientsSettings;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n\r\n    allRowsData: Models.Demon[];\r\n\r\n    constructor(params: FusionIngredientsTableProps, allRowsData: Models.Demon[]) {\r\n        this.demonCompendium = params.demonCompendium;\r\n        this.ingredients = params.ingredients;\r\n        this.ingredientsSettings = params.ingredientsSettings;\r\n        this.onRemoveIngredient = params.onRemoveIngredient;\r\n\r\n        this.allRowsData = allRowsData;\r\n    }\r\n}\r\n\r\nconst IngredientsTable = (params: FusionIngredientsTableProps): JSX.Element => {\r\n    initializeIngredientsSettings(params.ingredients, params.ingredientsSettings);\r\n    const rowData: Models.Demon[] = React.useMemo(() => {\r\n        let rowData: Models.Demon[] = [];\r\n        for (const demonId in params.ingredients) {\r\n            const demon = params.demonCompendium.getDemonById(Number(demonId));\r\n            if (!demon) { continue; }\r\n            rowData.push(demon);\r\n        }\r\n        return rowData;\r\n    }, [params.ingredients, params.demonCompendium]);\r\n    const dataProvider = new FusionIngredientsDataTableProvider(params, rowData);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n}\r\nexport default React.memo(IngredientsTable);","import React from 'react';\r\n\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport styles from './scss/minor-ui-components.module.scss';\r\n\r\ntype WarningBannerProps = {\r\n    message?: string;\r\n    icon?: JSX.Element;\r\n    className?: string;\r\n}\r\nconst WarningBannerCore = (params: WarningBannerProps): JSX.Element => {\r\n    let icon;\r\n    if (params.icon) {\r\n        icon = <div className={styles.icon}>{params.icon}</div>\r\n    }\r\n    return <Paper className={params.className? params.className : styles.warningBanner}>\r\n        {icon}<span>{params.message}</span>\r\n    </Paper>\r\n}\r\nexport const WarningBanner = React.memo(WarningBannerCore);","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {WarningBanner} from './minor-ui-components';\r\n\r\nimport styles from './scss/results-table.module.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass FusionResultsDataTableProvider implements DataTables.DataTableProvider<Models.FusedDemon> {\r\n\r\n    pageSize: number = 50;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        const colDefs: DataTables.ColDef[] = [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.nameColumn } },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.lvlColumn } },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.raceColumn } },\r\n        ];\r\n        const statsName: string[] = Models.Demon.statsName;\r\n        for (let i = 0; i < statsName.length; i++) {\r\n            colDefs.push(\r\n                { headerContent: statsName[i], headerProps: { className: styles.statColumn }, sortSpec: { sortType: \"number\" } }\r\n            );\r\n        }\r\n        colDefs.push({ headerContent: \"Ingredients Used\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.ingredientsColumn } });\r\n        colDefs.push({ headerContent: \"\" });\r\n        this.columnCount = colDefs.length;\r\n        return colDefs;\r\n    }\r\n\r\n    getAllRowsData(): Models.FusedDemon[] {\r\n        const resultsAsRowsArray: Models.FusedDemon[] = [];\r\n        for (const ingCountStr in this.fusionResults.data) {\r\n            const ingCount = Number(ingCountStr);\r\n            if (Number(ingCount) === 1) { continue; }\r\n            for (const demonId in this.fusionResults.data[ingCount]) {\r\n                for (const fusedDemon of this.fusionResults.data[ingCount][demonId]) {\r\n                    resultsAsRowsArray.push(fusedDemon);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return resultsAsRowsArray;\r\n    }\r\n\r\n    renderRow(fusedDemon: Models.FusedDemon): JSX.Element {\r\n        const renderedRow: JSX.Element[] = [];\r\n        let keyId: number = 0;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.nameColumn}>\r\n                {fusedDemon.demon.name}\r\n            </TableCell>\r\n            <TableCell className={styles.lvlColumn}>\r\n                {fusedDemon.demon.lvl}\r\n            </TableCell>\r\n            <TableCell className={styles.raceColumn}>\r\n                {fusedDemon.demon.race}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        for (const stat of fusedDemon.demon.stats) {\r\n            renderedRow.push(<React.Fragment key={keyId}>\r\n                <TableCell className={styles.statColumn}>\r\n                    {stat}\r\n                </TableCell>\r\n            </React.Fragment>);\r\n            keyId++;\r\n        }\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.ingredientsColumn}>\r\n                {this.fusionResults.getIngredientCount(fusedDemon.demon.id)}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell>\r\n            <Button variant=\"outlined\" onClick={this.recipesButtonHandler.bind(undefined, fusedDemon.demon.id)} className={styles.recipeButton}>View recipes</Button>\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        return <React.Fragment>{renderedRow}</React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.FusedDemon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.demon.name; }\r\n            case 1: { \r\n                return rowData.demon.lvl; }\r\n            case 2: { \r\n                return rowData.demon.race; }\r\n            case (this.columnCount - 2):\r\n                return this.fusionResults.getIngredientCount(rowData.demon.id) || 0;\r\n            default: {\r\n                return rowData.demon.stats[sortByCol-3]; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        return <WarningBanner message=\"No results found\" />\r\n    }\r\n\r\n    fusionResults: Models.FusionResults;\r\n    recipesButtonHandler: (...x: any) => void;\r\n    \r\n    columnCount: number = 0;\r\n\r\n    constructor(params: FusionResultsTableProps, onRecipesButtonClick: (demonId: number) => void) {\r\n        this.recipesButtonHandler = onRecipesButtonClick;\r\n        this.fusionResults = params.fusionResults;\r\n    }\r\n}\r\n\r\ntype FusionResultsTableProps = {\r\n    fusionResults: Models.FusionResults,\r\n    onOpenDemonRecipes: (demonId: number) => void\r\n}\r\nconst ResultsTable = (props: FusionResultsTableProps): JSX.Element => {\r\n\r\n    function openDemonRecipesHandler(demonId: number) {\r\n      props.onOpenDemonRecipes(demonId);\r\n    }\r\n    \r\n    const dataProvider = new FusionResultsDataTableProvider(props, openDemonRecipesHandler);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n};\r\nexport default React.memo(ResultsTable);","import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/settings-panel.module.scss';\r\n\r\nexport class UserSettings {\r\n    charLvl: number = 99;\r\n    maxIngredient: number = 3;\r\n    useTripleFusion: boolean = false;\r\n\r\n    useTripleFusionSettingIsVisible: boolean = false;\r\n}\r\nexport type SettingsPanelEventHandlers = { toggleVisibility?: Function }\r\ntype SettingsPanelProps = {\r\n    eventHandlers: SettingsPanelEventHandlers,\r\n    settings: UserSettings\r\n}\r\nexport default function SettingsPanel(params: SettingsPanelProps) : JSX.Element {\r\n    const {eventHandlers, settings } = params;\r\n    \r\n    const [isVisible, setIsVisible] = useState<boolean>(false);\r\n    const [charLvlFieldValue, setCharLvlFieldValue] = useState<number | string>(settings.charLvl);\r\n    const [maxIngFieldValue, setMaxIngFieldValue] = useState<number | string>(settings.maxIngredient);\r\n\r\n    function onVisibilityToggle(): void {\r\n        setIsVisible(!isVisible);\r\n    }\r\n    eventHandlers.toggleVisibility = onVisibilityToggle;\r\n\r\n    function onSetCharLvl(newValue: number): void {\r\n        settings.charLvl = newValue;\r\n    }\r\n\r\n    function onSetMaxIng(newValue: number): void {\r\n        settings.maxIngredient = newValue;\r\n    }\r\n\r\n    function onSetUseTripleFusion(newValue: boolean): void {\r\n        settings.useTripleFusion = newValue;\r\n    }\r\n\r\n    const settingsPanelStyle: React.CSSProperties = {};\r\n    if (!isVisible) { settingsPanelStyle.height = \"0px\"; }\r\n    return <div style={settingsPanelStyle} className={styles.settingsPanel}>\r\n        <Paper variant=\"outlined\" className={styles.paper}>\r\n            <h2>Settings</h2>\r\n            <NumberSettings\r\n                label=\"Character level\"\r\n                min={1}\r\n                max={99}\r\n                emptyFieldValue={99}\r\n                fieldStateValueAndSetter={[charLvlFieldValue, setCharLvlFieldValue]}\r\n                onSetSettings={onSetCharLvl} />\r\n            <NumberSettings\r\n                label=\"Max ingredients per recipe\"\r\n                min={2}\r\n                max={5}\r\n                emptyFieldValue={3}\r\n                fieldStateValueAndSetter={[maxIngFieldValue, setMaxIngFieldValue]}\r\n                onSetSettings={onSetMaxIng} />\r\n            {settings.useTripleFusionSettingIsVisible ?\r\n                <CheckboxSettings\r\n                    label=\"Allow triple fusion\"\r\n                    checked={settings.useTripleFusion}\r\n                    onSetSettings={onSetUseTripleFusion}\r\n                /> : undefined}\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\ntype NumberSettingsProp = {\r\n    label: string,\r\n    fieldStateValueAndSetter: [number | string, React.Dispatch<React.SetStateAction<number | string>>],\r\n    onSetSettings: (newValue: number) => void,\r\n    min: number,\r\n    max: number,\r\n    emptyFieldValue: number\r\n}\r\nfunction NumberSettings(params: NumberSettingsProp): JSX.Element {\r\n    const {label, fieldStateValueAndSetter: stateValueAndSetter, onSetSettings, min, max, emptyFieldValue} = params;\r\n    const [stateValue, stateSetter] = stateValueAndSetter;\r\n\r\n    function onNumberFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let value: number | string = event.target.value;\r\n        if (value === \"\") {\r\n            stateSetter(\"\");\r\n            onSetSettings(emptyFieldValue);\r\n            return;\r\n        }\r\n        const valueAsNumber = Number(value);\r\n        if (valueAsNumber >= min && valueAsNumber <= max) {\r\n            stateSetter(valueAsNumber);\r\n            onSetSettings(valueAsNumber);\r\n        }\r\n    }\r\n    return <div className={`${styles.settingsLine} ${styles.numberSettings}`}>\r\n        <span className={styles.numberFieldLabel}>{label}</span>\r\n        <TextField\r\n            style={{ width: \"50px\" }}\r\n            type=\"number\"\r\n            InputLabelProps={{ shrink: true }}\r\n            inputProps={{ min: min, max: max, step: 1 }}\r\n            variant=\"outlined\"\r\n            value={stateValue}\r\n            onChange={onNumberFieldChange}\r\n        />\r\n    </div>;\r\n}\r\n\r\ntype CheckboxSettingsProps = {\r\n    label: string,\r\n    checked: boolean,\r\n    onSetSettings: (newValue: boolean) => void\r\n}\r\nfunction CheckboxSettings(params: CheckboxSettingsProps): JSX.Element {\r\n    const {label, checked, onSetSettings} = params;\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        onSetSettings(event.target.checked);\r\n    }\r\n\r\n    return <div className={`${styles.settingsLine}`}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    defaultChecked={checked}\r\n                    onChange={onCheckboxChange}\r\n                    color=\"default\"\r\n                />}\r\n            label={label} />\r\n    </div>;\r\n}","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './scss/ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by entering level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 250 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            size=\"small\"\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        const acceptedKeys: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let keyIsAccepted: boolean = false;\r\n        for (const acceptedKey of acceptedKeys) {\r\n            if (key === acceptedKey) {\r\n                keyIsAccepted = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!keyIsAccepted) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"122px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                    size=\"small\"\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"122px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    size=\"small\"\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 250 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            size=\"small\"\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","import React from \"react\";\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport styles from './scss/recipes-table.module.scss';\r\n\r\nfunction renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n    if (demon.isFused()) {\r\n        return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n    } else {\r\n        return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n    }\r\n}\r\n\r\nfunction renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let priorRecipes: JSX.Element = <React.Fragment />;\r\n    if (demon.ingredients) {\r\n        let curRecipe: JSX.Element = <React.Fragment />;\r\n        let isFirstLoop: boolean = true;\r\n        for (const ingDemon of demon.ingredients) {\r\n            priorRecipes = <React.Fragment>{priorRecipes}{renderRecipe(ingDemon)}</React.Fragment>;\r\n            const separator = isFirstLoop ? undefined : <React.Fragment> + </React.Fragment>;\r\n            curRecipe = <React.Fragment>{curRecipe}{separator}{renderDemonName(ingDemon)}</React.Fragment>\r\n            isFirstLoop = false;\r\n        }\r\n        const nameR = renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {priorRecipes}\r\n            <Divider light />\r\n            <div className={styles.centerText}>{curRecipe}</div><div>&darr;</div><div>{nameR}</div>\r\n        </React.Fragment>;\r\n    }\r\n    return priorRecipes;\r\n}\r\n\r\nfunction DemonCard(props: {demon: Models.FusedDemon}): JSX.Element {\r\n    return <Card className={styles.recipeCard}>\r\n      <CardContent>\r\n          {renderRecipe(props.demon)}\r\n      </CardContent>\r\n    </Card>\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FilterMap = { [demonId: number]: boolean};\r\ntype FilterOption = { demonId: number, demonName: string};\r\n\r\nfunction createFilterOptions(recipesAry: Models.FusedDemon[], currFilter: FilterOption[]): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    let ingDemonsMap: { [demonId: number]: string} = {};\r\n    for (const fusedDemon of recipesAry) {\r\n        const ingDemons = fusedDemon.getBaseIngredients();\r\n        for (const ingDemon in ingDemons) {\r\n            ingDemonsMap[Number(ingDemon)] = ingDemons[ingDemon].name;\r\n        }\r\n    }\r\n    currFilter.map((filterOption: FilterOption, i) => ingDemonsMap[filterOption.demonId] = filterOption.demonName);\r\n    for (const ingDemonId in ingDemonsMap) {\r\n        filterOptions.push({ demonId: Number(ingDemonId), demonName: ingDemonsMap[ingDemonId]});\r\n    }\r\n    return filterOptions;\r\n}\r\n\r\nfunction filterRecipesAry(recipesAry: Models.FusedDemon[], filterMap: FilterMap): Models.FusedDemon[] {\r\n    const filteredAry: Models.FusedDemon[] = [];\r\n    for (const fusedDemon of recipesAry) {\r\n        const ingDemonsCount: { [demonId: number]: number } = fusedDemon.getBaseIngredientsCounts();\r\n        const filterCheckList = {...filterMap};\r\n        for (const ingDemonId in ingDemonsCount) {\r\n            delete filterCheckList[ingDemonId];\r\n        }\r\n        if (Object.keys(filterCheckList).length === 0) {\r\n            filteredAry.push(fusedDemon);\r\n        }\r\n    }\r\n    return filteredAry\r\n}\r\n\r\n\r\nexport default function RecipesTable(props: {demonId: number, recipesAry: Models.FusedDemon[]}): JSX.Element {\r\n    const pageSize: number = 100;\r\n    const [page, setPage] = React.useState<number>(1);\r\n    const [filter, setFilter] = React.useState<FilterOption[]>([]);\r\n    \r\n    const filteredRecipesAry = React.useMemo(()=>{\r\n        const filterMap: FilterMap = {};\r\n        filter.map((filterOption: FilterOption, i: number) => filterMap[filterOption.demonId] = true);\r\n        return filterRecipesAry(props.recipesAry, filterMap)\r\n    }, [props.recipesAry, filter]);\r\n\r\n    function handlePageChange(event: React.ChangeEvent<unknown>, page: number) {\r\n        setPage(page);\r\n    }\r\n    \r\n    function handleFilterChange(event: React.ChangeEvent<{}>, value: FilterOption[]) {\r\n        setPage(1);\r\n        setFilter(value);\r\n    }\r\n\r\n    const filterOptions = createFilterOptions(filteredRecipesAry, filter);\r\n\r\n    const maxPage: number = Math.ceil(filteredRecipesAry.length / pageSize);\r\n\r\n    return (\r\n    <div className={styles.componentContainer}>\r\n            <Autocomplete\r\n            multiple\r\n            className={styles.filterField}\r\n            size=\"small\"\r\n            onChange={handleFilterChange}\r\n            value={filter}\r\n            defaultValue={filter}\r\n            options={filterOptions}\r\n            getOptionLabel={(option) => option.demonName}\r\n            getOptionSelected={(option, value) => option.demonId === value.demonId}\r\n            autoHighlight={true}\r\n            filterSelectedOptions\r\n            renderInput={(params) => (<TextField {...params} variant=\"outlined\" label=\"Filter\" /> )}\r\n        />\r\n        <Pagination count={maxPage} page={page} onChange={handlePageChange} size=\"small\" className={styles.pagination} hidden={maxPage <= 1}/>\r\n        <div className={styles.recipeCardsContainer}>\r\n            {filteredRecipesAry\r\n            .filter((demon, i) => (i >= (page - 1) * pageSize) && (i < page * pageSize))\r\n            .map((demon, i) => <DemonCard key={i} demon={demon} />)}\r\n        </div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport * as Models from './data/data-models';\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport RecipesTable from './ui-components/recipes-table';\r\n\r\nimport styles from './demon-displayer.module.scss';\r\n\r\nexport default function DemonDisplayer(props: { demonCompendium: DemonCompendium, goBackUrlPath: string, fusionResults?: Models.FusionResults}): JSX.Element {\r\n    const demonIdStr = useParams<{ demonId: string }>().demonId;\r\n    const demonId = Number(demonIdStr);\r\n    const history = useHistory();\r\n\r\n    if (isNaN(demonId)) {\r\n        history.push(props.goBackUrlPath);\r\n        return <React.Fragment/>;\r\n    }\r\n    const demon = props.demonCompendium.getDemonById(demonId);\r\n    if (!demon) {\r\n        history.push(props.goBackUrlPath);\r\n        return <React.Fragment/>;\r\n    }\r\n    \r\n    let fusionResultsSection: JSX.Element | undefined = undefined;\r\n    if (props.fusionResults) {\r\n        let recipesAry: Models.FusedDemon[] | undefined = undefined;\r\n        for (const ingCountStr in props.fusionResults.data) {\r\n            const ingCount: number = Number(ingCountStr);\r\n            for (const id in props.fusionResults.data[ingCount]) {\r\n                if (Number(id) === demonId) {\r\n                    recipesAry = props.fusionResults.data[ingCount][id];\r\n                    break;\r\n                }\r\n            }\r\n            if (recipesAry) {\r\n                break;\r\n            }\r\n        }\r\n        if (recipesAry) {\r\n        fusionResultsSection = <React.Fragment>\r\n            <h2>Recipes</h2>\r\n            <RecipesTable demonId={demonId} recipesAry={recipesAry} />\r\n        </React.Fragment>;\r\n        }\r\n    }\r\n\r\n    return <div className={styles.componentContainer}>\r\n        <div className={styles.section}>\r\n            <h2>{demon.name}</h2>\r\n            <div><Label text=\"Race\" />{demon.race}<Label text=\"Level\" />{demon.lvl}</div>\r\n        </div>\r\n        <div className={styles.section}>\r\n            <h2>Stats</h2>\r\n            <div>{demon.stats.map((stat, i) => <React.Fragment key={i}><Label text={Models.Demon.statsName[i]} />{stat}</React.Fragment>)}</div>\r\n        </div>\r\n        <div className={styles.section}>{fusionResultsSection}</div>\r\n    </div>\r\n}\r\n\r\nfunction Label(props: { text: string }): JSX.Element {\r\n    return <span className={styles.label}>{props.text}</span>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from './data/data-models';\r\nimport { DemonCompendium } from './data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport IngredientsTable from './ui-components/ingredients-table';\r\nimport ResultsTable from './ui-components/results-table';\r\nimport SettingsPanel, { UserSettings, SettingsPanelEventHandlers } from './ui-components/settings-panel';\r\nimport DemonAdder from './ui-components/demon-adder';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport styles from './fusion-calculator.module.scss';\r\nimport { Route, Router, Switch, useHistory, useRouteMatch } from 'react-router-dom';\r\nimport DemonDisplayer from './demon-displayer';\r\n\r\nconst MAX_FUSION_INGREDIENT_HARD_CAP = 5;\r\n\r\nasync function calculateAllFusionCombinationsAsync(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings): Promise<Models.FusionResults> {\r\n  const promise = new Promise<Models.FusionResults>(function(resolver) {\r\n    setTimeout(function () {\r\n      resolver(calculateAllFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings));\r\n    }, 100);\r\n  });\r\n  return promise;\r\n}\r\n\r\nfunction calculateAllFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings): Models.FusionResults {\r\n  const newFusionResults = new Models.FusionResults();\r\n  const newFusionResultsData = newFusionResults.data;\r\n  for (let size = 1; size <= settings.maxIngredient && size <= MAX_FUSION_INGREDIENT_HARD_CAP; size++) {\r\n    newFusionResultsData[size] = {};\r\n  }\r\n\r\n  for (const demonId in ingredients) {\r\n    const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n    if (!demon) { continue; }\r\n    const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n    if (!newFusionResultsData[1][demon.id]) {\r\n      newFusionResultsData[1][demon.id] = [];\r\n    }\r\n    newFusionResultsData[1][demon.id].push(fusedDemon);\r\n  }\r\n\r\n  for (let ingCountR = 2; ingCountR <= settings.maxIngredient && ingCountR <= MAX_FUSION_INGREDIENT_HARD_CAP; ingCountR++) {\r\n    for (let ingCountA = ingCountR - 1; ingCountA >= (ingCountR / 2); ingCountA--) {\r\n      const ingCountB: number = ingCountR - ingCountA;\r\n      const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n      for (const idA in newFusionResultsData[ingCountA]) {\r\n        if (newFusionResultsData[ingCountA][idA].length === 0) { continue; }\r\n        const speciesA: Models.Demon = newFusionResultsData[ingCountA][idA][0].demon;\r\n        for (const idB in newFusionResultsData[ingCountB]) {\r\n          if (newFusionResultsData[ingCountB][idB].length === 0) { continue; }\r\n          const speciesB: Models.Demon = newFusionResultsData[ingCountB][idB][0].demon;\r\n\r\n          // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n          if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n          const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(newFusionResults, settings, speciesR, ingCountR, [speciesA, speciesB])) { continue; }\r\n\r\n          const resultingFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, newFusionResultsData[ingCountA][idA], newFusionResultsData[ingCountB][idB]);\r\n          if (!newFusionResultsData[ingCountR][speciesR.id]) { newFusionResultsData[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultingFusedDemons) {\r\n            newFusionResultsData[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        speciesUsedAsA[speciesA.id] = true;\r\n      }\r\n    }\r\n\r\n    if (settings.useTripleFusion) {\r\n      calculateTripleFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings, newFusionResults, ingCountR);\r\n    }\r\n  }\r\n\r\n  // At this point, we're completely finished with all fusion combinations\r\n  // Re-traverse the entire results and purge fusions that don't satisfy various constraints/settings\r\n  const mustUseDemons: Models.MustUseDemonsMap = prepareIngredientsSettingsForFinalFilter(ingredientsSettings, ingredients);\r\n  let filterFunction = filterDemonsAfterCalculation.bind(undefined, mustUseDemons);\r\n  for (const ingCount in newFusionResultsData) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    for (const id in newFusionResultsData[ingCount]) {\r\n      let demonAry: Models.FusedDemon[] = newFusionResultsData[ingCount][id];\r\n      demonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() });\r\n      demonAry = demonAry.filter(filterFunction);\r\n      newFusionResultsData[ingCount][id] = demonAry;\r\n    }\r\n  }\r\n\r\n  newFusionResults.updateMetaData();\r\n  return newFusionResults;\r\n}\r\n\r\nfunction calculateTripleFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings, fusionResults: Models.FusionResults, ingCountR: number): void {\r\n  let ingCounts: number[] = [];\r\n  const fusionResultsData = fusionResults.data;\r\n  while (getNextTripleFusionIngCounts(ingCounts, ingCountR)) {\r\n    const [ingCountA, ingCountB, ingCountC] = ingCounts;\r\n    const alreadyCalculatedAsA: { [id: number]: boolean } = {};\r\n    for (const idA in fusionResultsData[ingCountA]) {\r\n      if (fusionResultsData[ingCountA][idA].length === 0) { continue; }\r\n      const speciesA: Models.Demon = fusionResultsData[ingCountA][idA][0].demon;\r\n\r\n      const alreadyCalculatedAsB: { [id: number]: boolean } = {};\r\n      for (const idB in fusionResultsData[ingCountB]) {\r\n        if (alreadyCalculatedAsA[Number(idB)]) { continue; }\r\n        if (fusionResultsData[ingCountB][idB].length === 0) { continue; }\r\n        const speciesB: Models.Demon = fusionResultsData[ingCountB][idB][0].demon;\r\n\r\n        for (const idC in fusionResultsData[ingCountC]) {\r\n          if (alreadyCalculatedAsA[Number(idC)]) { continue; }\r\n          if (alreadyCalculatedAsB[Number(idC)]) { continue; }\r\n          if (fusionResultsData[ingCountC][idC].length === 0) { continue; }\r\n          const speciesC: Models.Demon = fusionResultsData[ingCountC][idC][0].demon;\r\n          const speciesR: Models.Demon | undefined = demonCompendium.tripleFuseDemons(speciesA, speciesB, speciesC);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(fusionResults, settings, speciesR, ingCountR, [speciesA, speciesB, speciesC])) { continue; }\r\n          const resultFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, fusionResultsData[ingCountA][idA], fusionResultsData[ingCountB][idB], fusionResultsData[ingCountC][idC]);\r\n          if (!fusionResultsData[ingCountR][speciesR.id]) { fusionResultsData[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            fusionResultsData[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        alreadyCalculatedAsB[speciesB.id] = true;\r\n      }\r\n      alreadyCalculatedAsA[speciesA.id] = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNextTripleFusionIngCounts(fusionIngCounts: number[], ingCountR: number): boolean {\r\n  if (ingCountR < 3) { return false; }\r\n  if (fusionIngCounts.length < 3) { \r\n    fusionIngCounts[0] = ingCountR - 2;\r\n    fusionIngCounts[1] = 1;\r\n    fusionIngCounts[2] = 1;\r\n    return true;\r\n  }\r\n  for (let i = fusionIngCounts.length - 2; i >= 0; i--) {\r\n    const j: number = i + 1;\r\n    if (fusionIngCounts[i] - fusionIngCounts[j] >= 2) {\r\n      fusionIngCounts[i] = fusionIngCounts[i] - 1;\r\n      fusionIngCounts[j] = fusionIngCounts[j] + 1;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction filterDemonsAfterSpeciesFusion(fusionResults: Models.FusionResults, settings: UserSettings, speciesR: Models.Demon, ingCountR: number, speciesIngs: Models.Demon[]): boolean {\r\n  const fusionResultsData = fusionResults.data;\r\n  // throw out the resulting species if we knew how to make it with fewer ingredients\r\n  let canBeMadeWithLessIngredient: boolean = false;\r\n  for (let sizeCheck = ingCountR - 1; sizeCheck >= 1; sizeCheck--) {\r\n    if (fusionResultsData[sizeCheck][speciesR.id]) {\r\n      canBeMadeWithLessIngredient = true;\r\n      break;\r\n    }\r\n  }\r\n  if (canBeMadeWithLessIngredient) { return false; }\r\n\r\n  if (speciesR.lvl > settings.charLvl) { return false; }\r\n\r\n  // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n  if (ingCountR === settings.maxIngredient) {\r\n    for (const speciesIng of speciesIngs) {\r\n      if (speciesR.lvl < speciesIng.lvl) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCrissCross(ingSettings: Models.IngredientsSettings, demon: Models.FusedDemon): boolean {\r\n  const baseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const id in baseIngCount) {\r\n    if (baseIngCount[id] > 1 && !ingSettings[id].multipleUse) { return false; }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCalculation(mustUseDemons: Models.MustUseDemonsMap, demon: Models.FusedDemon): boolean {\r\n  const myMustUseDemons = {...mustUseDemons};\r\n  const demonBaseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const demonId in demonBaseIngCount) {\r\n    delete myMustUseDemons[demonId];\r\n  }\r\n  if (Object.keys(myMustUseDemons).length > 0) { return false; }\r\n  return true;\r\n}\r\n\r\nfunction prepareIngredientsSettingsForFinalFilter(ingSettings: Models.IngredientsSettings, ingredients: Models.Ingredients): Models.MustUseDemonsMap {\r\n  const mustUseDemons: Models.MustUseDemonsMap = {};\r\n  for (const id in ingredients) {\r\n    if (ingSettings[id].mustUse) { mustUseDemons[id] = true };\r\n  }\r\n  return mustUseDemons;\r\n}\r\n\r\nfunction crissCrossFusedDemons(resultSpecies: Models.Demon, ingredientsSettings: Models.IngredientsSettings, ...ingredients: Models.FusedDemon[][]): Models.FusedDemon[] {\r\n  const indeces: number[] = [];\r\n  const ret: Models.FusedDemon[] = [];\r\n  for (let i = 0; i < ingredients.length; i++) { indeces.push(0); }\r\n  while (true) {\r\n    const fusedDemonIngredientsHistory: Models.FusedDemon[] = [];\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      fusedDemonIngredientsHistory.push(ingredients[i][indeces[i]]);\r\n    }\r\n    ret.push(new Models.FusedDemon(resultSpecies, fusedDemonIngredientsHistory));\r\n\r\n    // Increment the indeces\r\n    let hasCarry: boolean = true;\r\n    for (let i = indeces.length - 1; i >= 0; i--) {\r\n      let index: number = indeces[i];\r\n      if (hasCarry) { index = index + 1; hasCarry = false; }\r\n      if (index >= ingredients[i].length) { index = 0; hasCarry = true; }\r\n      indeces[i] = index;\r\n      if (!hasCarry) { break; }\r\n    }\r\n    if (hasCarry) { break; }\r\n  }\r\n  \r\n  return ret.filter(filterDemonsAfterCrissCross.bind(undefined, ingredientsSettings));;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeUserSettings(demonCompendium: DemonCompendium): UserSettings {\r\n  const settings = new UserSettings();\r\n  settings.useTripleFusion = demonCompendium.enableTripleFusion;\r\n  settings.useTripleFusionSettingIsVisible = demonCompendium.enableTripleFusion;\r\n  return settings;\r\n}\r\n\r\nexport default function FusionCalculator(props: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = props;\r\n\r\n  const [ingredients, setIngredients] = useState<Models.Ingredients>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>(new Models.FusionResults());\r\n  const [fusionResultsPromise, setFusionResultsPromise] = useState<Promise<Models.FusionResults> | undefined>(undefined);\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  const history = useHistory();\r\n  const routeMatcher = useRouteMatch();\r\n\r\n  let [nonRenderingStates] = useState<[UserSettings, Models.IngredientsSettings]>([initializeUserSettings(demonCompendium), {}]);\r\n  const settings = nonRenderingStates[0];\r\n  const ingredientsSettings = nonRenderingStates[1];\r\n  const settingsPanelEventHandlers: SettingsPanelEventHandlers = {};\r\n  const refResultsTable = useRef<HTMLHeadingElement>(null);\r\n\r\n  useEffect(()=>{\r\n    let isMounted: boolean = true;\r\n\r\n    if (fusionResultsPromise) {\r\n      fusionResultsPromise.then((fr)=>{\r\n        if (isMounted) {\r\n          setFusionResults(fr);\r\n          setFusionResultsPromise(undefined);\r\n          if (fr.hasFusionResult()) {\r\n            refResultsTable.current?.scrollIntoView({ behavior: \"smooth\" });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return ()=>{ isMounted = false; }\r\n  }, [fusionResults, fusionResultsPromise]);\r\n\r\n  const removeDemonFromIngredientsHandler = useCallback(function (demonId: number): void {\r\n    const newIngredients = { ...ingredients };\r\n    delete newIngredients[demonId];\r\n    setIngredients(newIngredients);\r\n  }, [ingredients]);\r\n\r\n  function addDemonToIngredientsHandler(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function calculateButtonHandler(): void {\r\n    setFusionResultsPromise(calculateAllFusionCombinationsAsync(ingredients, demonCompendium, settings, ingredientsSettings));\r\n  }\r\n\r\n  function settingsButtonHandler(): void {\r\n    if (settingsPanelEventHandlers.toggleVisibility) {\r\n      settingsPanelEventHandlers.toggleVisibility();\r\n    }\r\n  }\r\n\r\n  function resetButtonHandler(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n    for (const key in ingredientsSettings) {\r\n      delete ingredientsSettings[key];\r\n    }\r\n    \r\n    setFusionResults(new Models.FusionResults());\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n\r\n  function openDemonRecipesHandler(demonId: number) {\r\n    history.push(`${routeMatcher.url}/demon/${demonId}`);\r\n  }\r\n  \r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route path={`${routeMatcher.path}/demon/:demonId`}>\r\n          <DemonDisplayer demonCompendium={demonCompendium} goBackUrlPath={routeMatcher.url} fusionResults={fusionResults} />\r\n        </Route>\r\n        <Route path={`${routeMatcher.path}/`}>\r\n\r\n          <div className={styles.fusionCalculator + (fusionResultsPromise ? \" \" + styles.loading : \"\")}>\r\n            <div className={styles.section}>\r\n              <h2>Add Demons to Use as Fusion Ingredients</h2>\r\n              <div className={styles.addDemonsAndButtonsRowContainer}>\r\n                <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredientsHandler} />\r\n                <div className={styles.buttonsRow}>\r\n                  <Button className={styles.calculateButton} variant=\"outlined\" onClick={calculateButtonHandler} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n                  <Button className={styles.settingsButton} variant=\"outlined\" onClick={settingsButtonHandler}><SettingsIcon /></Button>\r\n                  <Button className={styles.resetButton} variant=\"outlined\" onClick={resetButtonHandler}><ReplayIcon />Reset</Button>\r\n                </div>\r\n              </div>\r\n              <SettingsPanel key={resetterKey} settings={settings} eventHandlers={settingsPanelEventHandlers} />\r\n            </div>\r\n            <div className={styles.section} hidden={Object.keys(ingredients).length === 0}>\r\n              <h2>Fusion Ingredients</h2>\r\n              <IngredientsTable\r\n                demonCompendium={demonCompendium}\r\n                ingredients={ingredients}\r\n                ingredientsSettings={ingredientsSettings}\r\n                onRemoveIngredient={removeDemonFromIngredientsHandler} />\r\n            </div>\r\n            <div className={styles.section} hidden={!fusionResults.hasFusionResult()}>\r\n              <h2>Results</h2>\r\n              <div ref={refResultsTable}>\r\n                <ResultsTable fusionResults={fusionResults} onOpenDemonRecipes={openDemonRecipesHandler} />\r\n              </div>\r\n            </div>\r\n            \r\n            <Backdrop open={fusionResultsPromise !== undefined} hidden={fusionResultsPromise === undefined}>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          </div>\r\n\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}","import React from 'react';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionCalculator from './fusion-calculator';\r\n\r\nimport './app.scss';\r\nimport { Tab, Tabs } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\"\r\n  }\r\n});\r\n\r\nfunction loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/desu2/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/desu2/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  const presetJsonPromise = import(\"./data/desu2/presets.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2], loadedJsons[3]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nfunction loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/p4g/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/p4g/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/p4g/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    setLoadedCompendiumCallback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nfunction loadPersona5RoyalDemonCompendium(setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/p5r/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/p5r/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/p5r/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    setLoadedCompendiumCallback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nexport enum Game {\r\n  person4Golden = 0,\r\n  persona5Royal = 1,\r\n  devilSurvivor2 = 2\r\n}\r\n\r\nfunction loadGameData(game: Game, setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  switch(game) {\r\n    case Game.person4Golden:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    case Game.persona5Royal:\r\n      loadPersona5RoyalDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    case Game.devilSurvivor2:\r\n      loadDesu2DemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    default:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n  }\r\n}\r\n\r\nconst urlParamToGameMap: { [gameStr: string]: Game } = {\r\n  p4g: Game.person4Golden,\r\n  p5r: Game.persona5Royal,\r\n  desu2: Game.devilSurvivor2\r\n}\r\n\r\nfunction getGameUrlPath(game: Game): string | undefined {\r\n  for (const gameStrCode in urlParamToGameMap) {\r\n    if (urlParamToGameMap[gameStrCode] === game) {\r\n      return gameStrCode;\r\n    }\r\n  }\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const urlParams = useParams<{gameStrCode: string}>();\r\n  const [demonCompendium, setDemonCompendium] = React.useState<DemonCompendium | undefined>(undefined);\r\n  const [currentGame, setCurrentGame] = React.useState<Game>(Game.person4Golden);\r\n\r\n  React.useEffect(()=>{\r\n      loadGameData(currentGame, setDemonCompendium);\r\n  }, [currentGame]);\r\n  \r\n  const history = useHistory();\r\n  \r\n  const changeGameTabHandler = (event: React.ChangeEvent<{}> | undefined, gameId: Game) => {\r\n    if (gameId !== currentGame) {\r\n      setDemonCompendium(undefined);\r\n    }\r\n    history.push(\"/megaten-fusion-recommender/\" + getGameUrlPath(gameId));\r\n  };\r\n\r\n  const gameFromUrlParam: Game | undefined = urlParamToGameMap[urlParams.gameStrCode];\r\n  if (gameFromUrlParam === undefined) {\r\n    changeGameTabHandler(undefined, Game.person4Golden);\r\n    return <React.Fragment />\r\n  } else if (gameFromUrlParam !== currentGame) {\r\n    setCurrentGame(gameFromUrlParam);\r\n    return <React.Fragment />\r\n  }\r\n\r\n  if (!demonCompendium) {\r\n    return <React.Fragment />\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n\r\n        <header>\r\n          <h1>MegaTen Fusion by Results Calculator</h1>\r\n        </header>\r\n        <Tabs value={currentGame} onChange={changeGameTabHandler}>\r\n          <Tab label=\"Persona 4 Golden\" />\r\n          <Tab label=\"Persona 5 Royal\" />\r\n          <Tab label=\"Devil Survivor 2\" />\r\n        </Tabs>\r\n\r\n        <div className=\"appBody\">\r\n          <FusionCalculator demonCompendium={demonCompendium} />\r\n        </div>\r\n\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Router,\r\n  Redirect\r\n} from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport App from './app';\r\n\r\nReactDOM.render(<GitHubPageRedirect />,\r\n  document.getElementById('gitHubPageRedirector'));\r\n\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route path=\"/megaten-fusion-recommender/:gameStrCode?\">\r\n          <App/>\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Redirect to=\"/megaten-fusion-recommender/\" />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction GitHubPageRedirect(): JSX.Element {\r\n  // Single Page Apps for GitHub Pages\r\n  // MIT License\r\n  // https://github.com/rafgraph/spa-github-pages\r\n  // This script checks to see if a redirect is present in the query string,\r\n  // converts it back into the correct url and adds it to the\r\n  // browser's history using window.history.replaceState(...),\r\n  // which won't cause the browser to attempt to load the new url.\r\n  // When the single page app is loaded further down in this file,\r\n  // the correct url will be waiting in the browser's history for\r\n  // the single page app to route accordingly.\r\n  (function(loc) {\r\n    if (loc.search[1] === '/' ) {\r\n      var decoded = loc.search.slice(1).split('&').map(function(s) { \r\n        return s.replace(/~and~/g, '&')\r\n      }).join('?');\r\n      window.history.replaceState(null, \"\",\r\n          loc.pathname.slice(0, -1) + decoded + loc.hash\r\n      );\r\n    }\r\n  }(window.location))\r\n  return <React.Fragment />\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"results-table_dataTable__BqyI6\",\"nameColumn\":\"results-table_nameColumn__3-ncz\",\"lvlColumn\":\"results-table_lvlColumn__35Aqx\",\"raceColumn\":\"results-table_raceColumn__34cLH\",\"statColumn\":\"results-table_statColumn__3szBY\",\"ingredientsColumn\":\"results-table_ingredientsColumn__3-up2\",\"recipeButton\":\"results-table_recipeButton__1xtnD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionCalculator\":\"fusion-calculator_fusionCalculator__3Zguo\",\"loading\":\"fusion-calculator_loading__pGhei\",\"addDemonsAndButtonsRowContainer\":\"fusion-calculator_addDemonsAndButtonsRowContainer__wkZrf\",\"buttonsRow\":\"fusion-calculator_buttonsRow__1YLsP\",\"calculateButton\":\"fusion-calculator_calculateButton__31LRV\",\"section\":\"fusion-calculator_section__3Ez8Z\",\"shining\":\"fusion-calculator_shining__3n0sX\",\"settingsButton\":\"fusion-calculator_settingsButton__2qcyE\",\"resetButton\":\"fusion-calculator_resetButton__12QkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"ingredients-table_dataTable__3eHDj\",\"checkBox\":\"ingredients-table_checkBox__3TQeR\",\"nameColumnHeader\":\"ingredients-table_nameColumnHeader__6MDJR\",\"raceColumnHeader\":\"ingredients-table_raceColumnHeader__1WXYk\",\"removeDemonButton\":\"ingredients-table_removeDemonButton__3uoAu\",\"removeDemonButtonIcon\":\"ingredients-table_removeDemonButtonIcon__2l4m2\",\"warningIcon\":\"ingredients-table_warningIcon__p_Iu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentContainer\":\"recipes-table_componentContainer__gd3Wo\",\"filterField\":\"recipes-table_filterField__2wbHr\",\"pagination\":\"recipes-table_pagination__o4sqn\",\"recipeCardsContainer\":\"recipes-table_recipeCardsContainer__3P3w_\",\"recipeCard\":\"recipes-table_recipeCard__2-jxu\",\"baseIngredientName\":\"recipes-table_baseIngredientName__3mt6k\",\"centerText\":\"recipes-table_centerText__2NUff\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPanel\":\"settings-panel_settingsPanel__Jlbex\",\"paper\":\"settings-panel_paper__ee3p0\",\"settingsLine\":\"settings-panel_settingsLine__1HRFl\",\"numberSettings\":\"settings-panel_numberSettings__RpSac\",\"numberFieldLabel\":\"settings-panel_numberFieldLabel__30ovM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__1Nq5q\",\"subAdderContainer\":\"ui-components_subAdderContainer__2g7zq\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1oqYT\",\"addDemonButton\":\"ui-components_addDemonButton__1Md5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentContainer\":\"demon-displayer_componentContainer__1vk7N\",\"section\":\"demon-displayer_section__K-bBK\",\"label\":\"demon-displayer_label__3kKVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paperContainer\":\"data-table_paperContainer__yXedv\",\"tableContainer\":\"data-table_tableContainer__2trr1\",\"header\":\"data-table_header__19DGp\",\"tableBody\":\"data-table_tableBody__1DiId\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warningBanner\":\"minor-ui-components_warningBanner__27C77\",\"icon\":\"minor-ui-components_icon__1xTlq\"};"],"sourceRoot":""}
{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/ingredients-table.tsx","ui-components/fusion-result-table.tsx","ui-components/settings-panel.tsx","ui-components/demon-adder.tsx","ui-components/fusion-recommender.tsx","App.tsx","index.tsx","ui-components/ui-components.module.scss","ui-components/fusion-recommender.module.scss","ui-components/settings-panel.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","rank","specialRecipe","this","statsName","FusedDemon","demon","ingredients","length","ret","ingDemon","getBaseIngredients","Object","keys","join","values","map","getHighestIngredientLvl","highestIngLvl","DemonsPreset","caption","demons","ELEMENT_RACE","DemonCompendium","demonListJSON","fusionChartJSON","presetJSON","demonJson","fusionChartJson","presetJson","demonAry","normalFusionChart","tripleFusionChart","demonsPresets","gameHasElements","_usePersonaSameRaceFusionMechanic","_usePersonaTripleFusionMechanic","disableSameDemonFusion","idMap","nameMap","raceOrderMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseFusionChart","prepRaceLvlInfo","parsePresets","demonA","demonB","fuseDemonWithElement","fuseDemonSameRaceNoElement","fuseDemonDiffRaceNoElement","demonC","sort","x","y","getRaceOrder","demonWeak","demonMid","demonStrong","intermediateRace","getFusionRace","resultRace","getTripleFusionRace","resultLvlTable","getLvlTableForRace","resultLvlTest","resultLvl","findResultLvlFromLvlTable","demonResult","getDemonFromRaceLvl","resultLvlIndex","indexOf","demonName","getDemonByName","randomDemonIndex","Math","floor","random","elements","randomElementIndex","testGetDemon","results","i","demonR","fuseDemons","console","log","results2","j","tripleFuseDemons","push","Models","usePersonaSameRaceFusionMechanic","usePersonaTripleFusionMechanic","row","raceFusionTable","col","chartsToUpdate","raceA","races","raceB","raceC","chart","specialRecipes","presets","preset","presetModel","demon1","demon2","excludeDemonsWithSpecialRecipe","lvlTable","Number","lvlToCheck","isTripleFusion","index","raceR","lvlTableR","lvlResultTest","lvlR","elementNameR","filter","element","raceId","elementFusionTable","demonRankChange","resultRank","FusionIngredientsTable","params","demonCompendium","onRemoveIngredient","columns","field","headerName","flex","resizable","width","headerAlign","disableColumnMenu","sortable","renderCell","cellParams","demonId","value","IconButton","aria-label","onClick","raiseRemoveIngredientEvent","bind","undefined","className","styles","removeDemonButtonIcon","deletedId","ingredientsAsRowsArray","demonIdAsNumber","getDemonById","gridWrapperRef","useRef","useEffect","gridDiv","current","firstElementChild","style","height","maxWidth","ref","rows","disableSelectionOnClick","autoHeight","density","pageSize","rowsPerPageOptions","React","memo","renderDemonName","isFused","Fragment","baseIngredientName","renderRecipe","priorRecipes","curRecipe","isFirstLoop","separator","nameR","recipeLine","renderRecipeWrapper","getRecipeAsString","valueParam","toBaseIngredientSearchString","FusionResultTable","fusionResults","valueGetter","size","fusedDemon","demonRow","a","b","gridEl","querySelector","rowHeight","fusionResultsTable","Settings","charLvl","maxIngredient","useTripleFusion","useTripleFusionSettingIsVisible","SettingsPanel","visible","settings","useState","charLvlFieldValue","setCharLvlFieldValue","maxIngFieldValue","setMaxIngFieldValue","settingsPanelStyle","display","settingsPanel","NumberSettings","label","min","max","emptyFieldValue","fieldStateValueAndSetter","onSetSettings","newValue","CheckboxSettings","checked","stateValueAndSetter","stateValue","stateSetter","settingsLine","numberSettings","numberFieldLabel","TextField","type","InputLabelProps","shrink","inputProps","step","variant","onChange","event","target","valueAsNumber","FormControlLabel","control","Checkbox","defaultChecked","color","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","selection","onKeyPress","key","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","keyIsAccepted","preventDefault","stopPropagation","valueSetterFunc","lvlFieldsContainer","selectedOption","setSelectedOption","Button","addDemonButton","setIngredients","calculateTripleFusionCombinations","ingCountR","ingCounts","getNextTripleFusionIngCounts","ingCountA","ingCountB","ingCountC","alreadyCalculatedAsA","idA","speciesA","alreadyCalculatedAsB","idB","speciesB","idC","speciesC","speciesR","postSpeciesFusionCheck","resultFusedDemons","crossFuseIngredients","fusionIngCounts","speciesIngs","canBeMadeWithLessIngredient","sizeCheck","speciesIng","resultSpecies","indeces","fusedDemonIngredientsHistory","hasCarry","removeDemonFromIngredients","newIngredients","FusionRecommender","setFusionResults","settingsIsVisible","setSettingsIsVisible","resetterKey","setResetterKey","fusionResultSectionHeader","fusionRecommender","addDemonsAndButtonsRowContainer","buttonsRow","calculateButton","myFusionResults","speciesUsedAsA","ingCount","filteredDemonAry","isWeakerThanIngredients","calculateAllFusionCombinations","disabled","settingsButton","resetButton","theme","createMuiTheme","palette","typography","fontFamily","fontSize","App","setDemonCompendium","callback","demonJsonPromise","importedJson","default","fusionChartJsonPromise","Promise","all","loadedJsons","newDemonCompendium","loadPersona4GoldenDemonCompendium","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5c738abf.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    rank: number = 0;\r\n    specialRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredients?: FusedDemon[];\r\n\r\n    constructor(demon: Demon, ingredients?: FusedDemon[]) {\r\n        this.demon = demon;\r\n        this.ingredients = ingredients;\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        if (!this.ingredients) { return false; }\r\n        return this.ingredients.length > 0;\r\n    }\r\n\r\n    public getBaseIngredients(): { [id: number]: Demon } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: Demon } = {};\r\n            for (const ingDemon of this.ingredients) {\r\n                ret = {...ret, ...ingDemon.getBaseIngredients()};\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: Demon } = {};\r\n            ret[this.demon.id] = this.demon;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public toBaseIngredientsIdCode(): string {\r\n        return Object.keys(this.getBaseIngredients()).join(\"-\");\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        return Object.values(this.getBaseIngredients()).map(demon => demon.name).join(\" \");\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredients) {\r\n            for (const ingDemon of this.ingredients) {\r\n                let highestIngLvl: number = ingDemon.getHighestIngredientLvl();\r\n                if (highestIngLvl > lvl) { lvl = highestIngLvl; }\r\n            }\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport type Ingredients = {[demonId: number]: boolean};\r\nexport type FusionResults = { [ingredientCount: number]: { [id: string]: FusedDemon[] } };","import * as Models from './data-models';\r\n\r\nconst ELEMENT_RACE: string = \"Element\";\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    raceFusionTable: string[][],\r\n    \r\n    elements?: string[],\r\n    elementFusionTable?: number[][],\r\n    usePersonaSameRaceFusionMechanic?: boolean,\r\n    usePersonaTripleFusionMechanic?: boolean,\r\n    disableSameDemonFusion?: boolean,\r\n    specialRecipes?: { [resultName: string]: string[] }\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetJSON = { presets: Preset[] };\r\n\r\nexport class DemonCompendium {\r\n    private demonJson: DemonJson;\r\n    private fusionChartJson: FusionChartJson;\r\n    private presetJson?: PresetJSON;\r\n\r\n    private demonAry: Models.Demon[] = [];\r\n    private normalFusionChart: { [race: string]: { [race: string]: string } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private tripleFusionChart: { [race: string]: { [race: string]: string } } = {}; \r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n    private gameHasElements: boolean = false;\r\n    private _usePersonaSameRaceFusionMechanic: boolean = false;\r\n    private _usePersonaTripleFusionMechanic: boolean = false;\r\n    private disableSameDemonFusion: boolean = false;\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceOrderMap: { [race: string]: number } = {}\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJSON: DemonJson, fusionChartJSON: FusionChartJson, presetJSON?: PresetJSON) {\r\n        this.demonJson = demonListJSON;\r\n        this.fusionChartJson = fusionChartJSON;\r\n        this.presetJson = presetJSON;\r\n\r\n        this.parseDemons();\r\n        this.prepDemonIds();\r\n\r\n        this.parseFusionChart();\r\n        this.prepRaceLvlInfo();\r\n        \r\n        this.parsePresets();\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public get usePersonaTripleFusionMechanic(): boolean {\r\n        return this._usePersonaTripleFusionMechanic;\r\n    }\r\n\r\n    public get usePersonaSameRaceFusionMechanic(): boolean {\r\n        return this._usePersonaSameRaceFusionMechanic;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.id === demonB.id && this.disableSameDemonFusion) { return undefined; }\r\n        \r\n        if (demonA.race === ELEMENT_RACE && demonB.race === ELEMENT_RACE) {\r\n            return undefined;\r\n        } else if (demonA.race === ELEMENT_RACE || demonB.race === ELEMENT_RACE) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoElement(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    public tripleFuseDemons(demonA: Models.Demon, demonB: Models.Demon, demonC: Models.Demon): Models.Demon | undefined {\r\n        if (this.disableSameDemonFusion) {\r\n            if (demonA.id === demonB.id ||\r\n                demonA.id === demonC.id ||\r\n                demonB.id === demonC.id) { return undefined; }\r\n        }\r\n\r\n        const [demonWeak, demonMid, demonStrong] = [demonA, demonB, demonC].sort((x, y) => (x.lvl !== y.lvl) ? x.lvl - y.lvl : this.getRaceOrder(y.race) - this.getRaceOrder(x.race)); // sort from lowest to highest lv. If lvs are the same, sort by race order from highest to lowest.\r\n        const intermediateRace: string | undefined = this.getFusionRace(demonWeak.race, demonMid.race);\r\n        if (!intermediateRace) { return undefined; }\r\n        const resultRace: string | undefined = this.getTripleFusionRace(intermediateRace, demonStrong.race);\r\n        if (!resultRace) { return undefined; }\r\n        const resultLvlTable: number[] = this.getLvlTableForRace(resultRace, true);\r\n        const resultLvlTest: number = (demonWeak.lvl + demonMid.lvl + demonStrong.lvl + 12.75) / 3;\r\n        let resultLvl: number = this.findResultLvlFromLvlTable(resultLvlTable, resultLvlTest, true);\r\n        let demonResult: Models.Demon | undefined = this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n        if (!demonResult) { return undefined; }\r\n        if (demonResult.id !== demonWeak.id && demonResult.id !== demonMid.id && demonResult.id !== demonStrong.id) {\r\n            return demonResult;\r\n        } else {\r\n            let resultLvlIndex = resultLvlTable.indexOf(resultLvl);\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            if (resultLvlIndex + 1 < resultLvlTable.length) {\r\n                resultLvl = resultLvlTable[resultLvlIndex + 1];\r\n                return this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private testGetDemon(demonName?: string): Models.Demon | undefined {\r\n        if (demonName) { return this.getDemonByName(demonName); }\r\n        if (this.demonAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonAry.length);\r\n        return this.demonAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        if (!this.fusionChartJson.elements || this.fusionChartJson.elements.length === 0) {return undefined};\r\n        const randomElementIndex: number = Math.floor(Math.random() * this.fusionChartJson.elements.length);\r\n        return this.getDemonByName(this.fusionChartJson.elements[randomElementIndex]);\r\n    }\r\n\r\n    private testFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [name: string]: Models.Demon} = {};\r\n        for (let i = 0; i < this.demonAry.length; i++) {\r\n            const demonB = this.demonAry[i];\r\n            const demonR = this.fuseDemons(demon, demonB);\r\n            if (!demonR) {continue;}\r\n            results[demonB.name] = demonR;\r\n        }\r\n        \r\n        console.log(demon);\r\n        console.log(results);\r\n    }\r\n\r\n    private testTripleFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [resultName: string]: Models.Demon[][] } = {};\r\n        const results2: { [resultName: string]: { [ing2Name: string]: string[] } } = {};\r\n        for (let i = 0; i < this.demonAry.length; i++) {\r\n            const demonB = this.demonAry[i];\r\n            for (let j = i; j < this.demonAry.length; j++) {\r\n                const demonC = this.demonAry[j];\r\n                const demonR = this.tripleFuseDemons(demon, demonB, demonC);\r\n                if (!demonR) {continue;}\r\n                if (!results[demonR.name]) { results[demonR.name] = []; }\r\n                if (!results2[demonR.name]) { results2[demonR.name] = {}; }\r\n                if (!results2[demonR.name][demonB.name]) { results2[demonR.name][demonB.name] = []; }\r\n                if (!results2[demonR.name][demonC.name]) { results2[demonR.name][demonC.name] = []; }\r\n                results[demonR.name].push([demonB, demonC]);\r\n                results2[demonR.name][demonB.name].push(demonC.name);\r\n                results2[demonR.name][demonC.name].push(demonB.name);\r\n            }\r\n        }\r\n        console.log(demon);\r\n        console.log(results);\r\n        console.log(results2);\r\n    }\r\n\r\n    private parseDemons(): void {\r\n        Models.Demon.statsName = this.demonJson.statsName;\r\n        const demons = this.demonJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseFusionChart(): void {\r\n        if (this.fusionChartJson.elements && this.fusionChartJson.elements.length > 0) { this.gameHasElements = true; }\r\n        if (this.fusionChartJson.usePersonaSameRaceFusionMechanic) { this._usePersonaSameRaceFusionMechanic = true; }\r\n        if (this.fusionChartJson.usePersonaTripleFusionMechanic) { this._usePersonaTripleFusionMechanic = true; }\r\n        if (this.fusionChartJson.disableSameDemonFusion) { this.disableSameDemonFusion = true; }\r\n\r\n        for (let row: number = 0; row < this.fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < this.fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const chartsToUpdate = [];\r\n                if (this._usePersonaTripleFusionMechanic) {\r\n                    if (col < row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                    } else if (col === row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    } else {\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    }\r\n                } else {\r\n                    if (col > row) { \r\n                        continue;\r\n                    }\r\n                    chartsToUpdate.push(this.normalFusionChart);\r\n                }\r\n\r\n                const raceA: string = this.fusionChartJson.races[row];\r\n                const raceB: string = this.fusionChartJson.races[col];\r\n                const raceC: string = this.fusionChartJson.raceFusionTable[row][col];\r\n\r\n                // Set the .raceA.raceB property of the parsed fusion table\r\n                for (const chart of chartsToUpdate) {\r\n                    if (!chart[raceA]) {\r\n                        chart[raceA] = {};\r\n                    }\r\n                    chart[raceA][raceB] = raceC;\r\n\r\n                    // Set the .raceB.raceA property of the parsed fusion table\r\n                    if (!chart[raceB]) {\r\n                        chart[raceB] = {};\r\n                    }\r\n                    chart[raceB][raceA] = raceC;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.fusionChartJson.specialRecipes) {\r\n            for (const demonName in this.fusionChartJson.specialRecipes) {\r\n                const demon = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demon.specialRecipe = true;\r\n                demon.rank = 1000;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.fusionChartJson.races.length; i++) {\r\n            this.raceOrderMap[this.fusionChartJson.races[i]] = i;\r\n        }\r\n    }\r\n\r\n    private parsePresets(): void {\r\n        if (!this.presetJson) { return; }\r\n        for (const preset of this.presetJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonAry = this.demonAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonAry) {\r\n            if (demon.specialRecipe) { continue; }\r\n            demon.rank = this.getLvlTableForRace(demon.race, true).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string, excludeDemonsWithSpecialRecipe?: boolean): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        const lvlTable: number[] = [];\r\n        for (const lvl in this.raceLvlDemonMap[race]) {\r\n            if (excludeDemonsWithSpecialRecipe && this.raceLvlDemonMap[race][lvl].specialRecipe) {\r\n                continue;\r\n            }\r\n            lvlTable.push(Number(lvl));\r\n        }\r\n        return lvlTable;\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.normalFusionChart[raceA]) {\r\n            if (this.normalFusionChart[raceA][raceB]) {\r\n                return this.normalFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getTripleFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.tripleFusionChart[raceA]) {\r\n            if (this.tripleFusionChart[raceA][raceB]) {\r\n                return this.tripleFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getRaceOrder(race: string): number {\r\n        return this.raceOrderMap[race];\r\n    }\r\n\r\n    private findResultLvlFromLvlTable(lvlTable: number[], lvlToCheck: number, isTripleFusion?: boolean) {\r\n        let index = 0;\r\n        for (let i = 0; i < lvlTable.length; i++) {\r\n            if (lvlToCheck > lvlTable[i]) {\r\n                index++;\r\n            }\r\n        }\r\n        if (index >= lvlTable.length) { \r\n            if (isTripleFusion) { return -1; }\r\n            index = lvlTable.length - 1 \r\n        };\r\n        return lvlTable[index];\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR, true);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const lvlResultTest = (demonB.lvl + demonA.lvl + 1) / 2;\r\n        const lvlR: number = this.findResultLvlFromLvlTable(lvlTableR, lvlResultTest);\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (this.gameHasElements) {\r\n            const elementNameR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n            if (!elementNameR) { return undefined; }\r\n            return this.getDemonByName(elementNameR);\r\n        } else if (this._usePersonaSameRaceFusionMechanic) {\r\n            const resultLvlTable = this.getLvlTableForRace(demonB.race, true).filter(lvl => lvl !== demonA.lvl);\r\n            let resultLvlIndex = -1;\r\n            for (const resultLvl of resultLvlTable) {\r\n                if (demonA.lvl + demonB.lvl >= 2 * resultLvl) { resultLvlIndex = resultLvlIndex + 1 }\r\n            }\r\n\r\n            if (resultLvlTable[resultLvlIndex] === demonB.lvl) {\r\n                resultLvlIndex = resultLvlIndex - 1;\r\n            }\r\n\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            const resultLvl = resultLvlTable[resultLvlIndex];\r\n            return this.getDemonFromRaceLvl(demonA.race, resultLvl);\r\n        }\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (demonA.race === ELEMENT_RACE) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (demonB.race === ELEMENT_RACE) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        }\r\n\r\n        const raceId: number = this.fusionChartJson.races.indexOf(demon.race);\r\n        if (raceId < 0 || raceId >= this.fusionChartJson.elementFusionTable!.length) {return undefined;}\r\n        const demonRankChange: number = this.fusionChartJson.elementFusionTable![raceId][element.rank];\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined };\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport { DataGrid, ColDef, CellParams } from '@material-ui/data-grid';\r\nimport { useRef, useEffect } from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport styles from './ui-components.module.scss';\r\n\r\nconst FusionIngredientsTable = (params: {\r\n  demonCompendium: DemonCompendium\r\n  ingredients: Models.Ingredients\r\n  onRemoveIngredient?: (deletedId: number) => void;\r\n}): JSX.Element => {\r\n  const { demonCompendium, ingredients, onRemoveIngredient } = params;\r\n\r\n  const columns: ColDef[] = [\r\n    { field: \"name\", headerName: \"Demon\", flex: 1, resizable: false },\r\n    { field: \"lvl\", headerName: \"Level\", width: 70, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n    { field: \"race\", headerName: \"Race\", width: 100, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n    { field: \"remove\", headerName: \" \", width: 50, sortable: false, disableColumnMenu: true, renderCell: createRemoveButtonForCell }\r\n  ]\r\n\r\n  function raiseRemoveIngredientEvent(deletedId: number): void {\r\n    if (onRemoveIngredient) {\r\n      onRemoveIngredient(deletedId);\r\n    }\r\n  }\r\n\r\n  function createRemoveButtonForCell(cellParams: CellParams): JSX.Element {\r\n    const demonId = cellParams.value as number;\r\n    return <IconButton aria-label=\"delete\" onClick={raiseRemoveIngredientEvent.bind(undefined, demonId)}>\r\n      <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n    </IconButton>;\r\n  }\r\n\r\n  const ingredientsAsRowsArray = Object.keys(ingredients).map(\r\n    (demonId, index) => {\r\n      const demonIdAsNumber: number = (demonId as unknown) as number;\r\n      const demon: Models.Demon = demonCompendium.getDemonById(demonIdAsNumber)!;\r\n      return {\r\n        id: index,\r\n        \"name\": demon.name,\r\n        \"lvl\": demon.lvl,\r\n        \"race\": demon.race,\r\n        \"remove\": demon.id\r\n      }\r\n    });\r\n\r\n  // This trick is needed to prevent the table from running into other content\r\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    const gridDiv = gridWrapperRef.current;\r\n    if (gridDiv) {\r\n      const gridEl: HTMLDivElement = gridDiv.firstElementChild as HTMLDivElement;\r\n      gridEl.style.height = \"\";\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"600px\" }} ref={gridWrapperRef}>\r\n      <DataGrid\r\n        rows={ingredientsAsRowsArray}\r\n        columns={columns}\r\n        disableSelectionOnClick={true}\r\n        autoHeight={true}\r\n        density='compact'\r\n        pageSize={25}\r\n        rowsPerPageOptions={[25]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default React.memo(FusionIngredientsTable);","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DataGrid, ColDef, CellParams, ValueGetterParams } from '@material-ui/data-grid';\r\nimport { useRef, useEffect } from 'react';\r\nimport styles from './ui-components.module.scss';\r\n\r\nfunction renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n    if (demon.isFused()) {\r\n        return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n    } else {\r\n        return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n    }\r\n}\r\n\r\nfunction renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let priorRecipes: JSX.Element = <React.Fragment/>;\r\n    if (demon.ingredients) {\r\n        let curRecipe: JSX.Element = <React.Fragment/>;\r\n        let isFirstLoop: boolean = true;\r\n        for (const ingDemon of demon.ingredients) {\r\n            priorRecipes = <React.Fragment>{priorRecipes}{renderRecipe(ingDemon)}</React.Fragment>;\r\n            const separator = isFirstLoop ? undefined : <React.Fragment> + </React.Fragment>;\r\n            curRecipe = <React.Fragment>{curRecipe}{separator}{renderDemonName(ingDemon)}</React.Fragment>\r\n            isFirstLoop = false;\r\n        }\r\n        const nameR = renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {priorRecipes}\r\n            <div className={styles.recipeLine}>\r\n                {curRecipe} = {nameR}\r\n            </div>\r\n        </React.Fragment>;\r\n    }\r\n    return priorRecipes;\r\n}\r\n\r\nfunction renderRecipeWrapper(cellParams: CellParams): JSX.Element {\r\n    return <div>{renderRecipe(cellParams.value as Models.FusedDemon)}</div>;\r\n}\r\n\r\nfunction getRecipeAsString(valueParam: ValueGetterParams): string {\r\n    return (valueParam.value as Models.FusedDemon).toBaseIngredientSearchString();\r\n}\r\n\r\nconst FusionResultTable = (params: {\r\n    fusionResults: Models.FusionResults\r\n  }): JSX.Element => {\r\n    const { fusionResults } = params;\r\n\r\n    const columns: ColDef[] = [\r\n        { field: \"name\", headerName: \"Demon\", width: 120 },\r\n        { field: \"lvl\", headerName: \"Level\", width: 70, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n        { field: \"race\", headerName: \"Race\", width: 100, headerAlign: \"center\", resizable: false }\r\n      ]\r\n      const statsName: string[] = Models.Demon.statsName;\r\n      for (let i = 0; i < statsName.length; i++) {\r\n          columns.push(\r\n              { field: \"stat\" + i, headerName: statsName[i], width: 60, headerAlign: \"center\", resizable: false, disableColumnMenu: true}\r\n          );\r\n      }\r\n      columns.push(\r\n          { field: \"recipe\", headerName: \"Recipe\", flex: 1, renderCell: renderRecipeWrapper, valueGetter: getRecipeAsString});\r\n\r\n      const ingredientsAsRowsArray = [];\r\n      for (const size in fusionResults) {\r\n          if (Number(size) === 1) { continue; }\r\n          for (const demonId in fusionResults[size]) {\r\n              for (const fusedDemon of fusionResults[size][demonId]) {\r\n                  const {demon} = fusedDemon;\r\n                  const demonRow: any = {\r\n                      \"id\": 0,\r\n                      \"name\": demon.name,\r\n                      \"lvl\": demon.lvl,\r\n                      \"race\": demon.race,\r\n                      \"recipe\": fusedDemon\r\n                  };\r\n                  for (let i = 0; i < statsName.length; i++) {\r\n                      demonRow[\"stat\" + i] = demon.stats[i];\r\n                  }\r\n                  ingredientsAsRowsArray.push(demonRow);\r\n              }\r\n          }\r\n      }\r\n      ingredientsAsRowsArray.sort((a, b) => { return b.lvl - a.lvl});\r\n      let id: number = 1;\r\n      for (const row of ingredientsAsRowsArray) {\r\n          row.id = id;\r\n          id++;\r\n      }\r\n  \r\n    // This trick is needed to prevent the table from running into other content\r\n    const gridWrapperRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        const gridDiv = gridWrapperRef.current;\r\n        if (gridDiv){\r\n            const gridEl: HTMLDivElement = gridDiv.querySelector('div')!;\r\n            gridEl.style.height = \"\";\r\n            gridEl.style.width = \"\";\r\n        }\r\n    }, []);\r\n  \r\n    return (\r\n        <DataGrid\r\n            rows={ingredientsAsRowsArray}\r\n            rowHeight={75}\r\n            className={styles.fusionResultsTable}\r\n            columns={columns}\r\n            disableSelectionOnClick={true}\r\n            autoHeight={true}\r\n            rowsPerPageOptions={[10]}\r\n            density='compact'\r\n        />\r\n    );\r\n  };\r\n  export default React.memo(FusionResultTable);","import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nimport styles from './settings-panel.module.scss';\r\n\r\nexport class Settings {\r\n    charLvl: number = 99;\r\n    maxIngredient: number = 3;\r\n    useTripleFusion: boolean = false;\r\n\r\n    useTripleFusionSettingIsVisible: boolean = false;\r\n}\r\n\r\nexport default function SettingsPanel(params: { visible: boolean, settings: Settings }) : JSX.Element {\r\n    const {visible, settings } = params;\r\n    const [charLvlFieldValue, setCharLvlFieldValue] = useState<number | string>(settings.charLvl);\r\n    const [maxIngFieldValue, setMaxIngFieldValue] = useState<number | string>(settings.maxIngredient);\r\n\r\n    function onSetCharLvl(newValue: number): void {\r\n        settings.charLvl = newValue;\r\n    }\r\n\r\n    function onSetMaxIng(newValue: number): void {\r\n        settings.maxIngredient = newValue;\r\n    }\r\n\r\n    function onSetUseTripleFusion(newValue: boolean): void {\r\n        settings.useTripleFusion = newValue;\r\n    }\r\n\r\n    const settingsPanelStyle: React.CSSProperties = {};\r\n    if (!visible) { settingsPanelStyle.display = \"none\"; }\r\n    return <div style={settingsPanelStyle} className={styles.settingsPanel}>\r\n        <h2>Settings</h2>\r\n        <NumberSettings\r\n            label=\"Character level\"\r\n            min={1}\r\n            max={99}\r\n            emptyFieldValue={99}\r\n            fieldStateValueAndSetter={[charLvlFieldValue, setCharLvlFieldValue]}\r\n            onSetSettings={onSetCharLvl} />\r\n        <NumberSettings\r\n            label=\"Max ingredients per recipe\"\r\n            min={2}\r\n            max={5}\r\n            emptyFieldValue={3}\r\n            fieldStateValueAndSetter={[maxIngFieldValue, setMaxIngFieldValue]}\r\n            onSetSettings={onSetMaxIng} />\r\n        {settings.useTripleFusionSettingIsVisible ?\r\n            <CheckboxSettings\r\n                label=\"Allow triple fusion\"\r\n                checked={settings.useTripleFusion}\r\n                onSetSettings={onSetUseTripleFusion}\r\n            /> : undefined}\r\n    </div>\r\n}\r\n\r\ntype NumberSettingsProp = {\r\n    label: string,\r\n    fieldStateValueAndSetter: [number | string, React.Dispatch<React.SetStateAction<number | string>>],\r\n    onSetSettings: (newValue: number) => void,\r\n    min: number,\r\n    max: number,\r\n    emptyFieldValue: number\r\n}\r\nfunction NumberSettings(params: NumberSettingsProp): JSX.Element {\r\n    const {label, fieldStateValueAndSetter: stateValueAndSetter, onSetSettings, min, max, emptyFieldValue} = params;\r\n    const [stateValue, stateSetter] = stateValueAndSetter;\r\n\r\n    function onNumberFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let value: number | string = event.target.value;\r\n        if (value === \"\") {\r\n            stateSetter(\"\");\r\n            onSetSettings(emptyFieldValue);\r\n            return;\r\n        }\r\n        const valueAsNumber = Number(value);\r\n        if (valueAsNumber >= min && valueAsNumber <= max) {\r\n            stateSetter(valueAsNumber);\r\n            onSetSettings(valueAsNumber);\r\n        }\r\n    }\r\n    return <div className={`${styles.settingsLine} ${styles.numberSettings}`}>\r\n        <span className={styles.numberFieldLabel}>{label}</span>\r\n        <TextField\r\n            style={{ width: \"50px\" }}\r\n            type=\"number\"\r\n            InputLabelProps={{ shrink: true }}\r\n            inputProps={{ min: min, max: max, step: 1 }}\r\n            variant=\"outlined\"\r\n            value={stateValue}\r\n            onChange={onNumberFieldChange}\r\n        />\r\n    </div>;\r\n}\r\n\r\ntype CheckboxSettingsProps = {\r\n    label: string,\r\n    checked: boolean,\r\n    onSetSettings: (newValue: boolean) => void\r\n}\r\nfunction CheckboxSettings(params: CheckboxSettingsProps): JSX.Element {\r\n    const {label, checked, onSetSettings} = params;\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        onSetSettings(event.target.checked);\r\n    }\r\n\r\n    return <div className={`${styles.settingsLine}`}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    defaultChecked={checked}\r\n                    onChange={onCheckboxChange}\r\n                    color=\"default\"\r\n                />}\r\n            label={label} />\r\n    </div>;\r\n}","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by entering level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        const acceptedKeys: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let keyIsAccepted: boolean = false;\r\n        for (const acceptedKey of acceptedKeys) {\r\n            if (key === acceptedKey) {\r\n                keyIsAccepted = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!keyIsAccepted) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport FusionIngredientsTable from './ingredients-table';\r\nimport FusionResultTable from './fusion-result-table';\r\nimport SettingsPanel, { Settings } from './settings-panel';\r\nimport DemonAdder from './demon-adder';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport styles from './fusion-recommender.module.scss';\r\n\r\nconst MAX_FUSION_INGREDIENT_HARD_CAP = 7;\r\n\r\nfunction calculateAllFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: Settings): Models.FusionResults {\r\n  const myFusionResults: Models.FusionResults = {};\r\n  for (let size = 1; size <= settings.maxIngredient && size <= MAX_FUSION_INGREDIENT_HARD_CAP; size++) {\r\n    myFusionResults[size] = {};\r\n  }\r\n\r\n  for (const demonId in ingredients) {\r\n    const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n    if (!demon) { continue; }\r\n    const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n    if (!myFusionResults[1][demon.id]) {\r\n      myFusionResults[1][demon.id] = [];\r\n    }\r\n    myFusionResults[1][demon.id].push(fusedDemon);\r\n  }\r\n\r\n  for (let ingCountR = 2; ingCountR <= settings.maxIngredient && ingCountR <= MAX_FUSION_INGREDIENT_HARD_CAP; ingCountR++) {\r\n    for (let ingCountA = ingCountR - 1; ingCountA >= (ingCountR / 2); ingCountA--) {\r\n      const ingCountB: number = ingCountR - ingCountA;\r\n      const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n      for (const idA in myFusionResults[ingCountA]) {\r\n        if (myFusionResults[ingCountA][idA].length === 0) { continue; }\r\n        const speciesA: Models.Demon = myFusionResults[ingCountA][idA][0].demon;\r\n        for (const idB in myFusionResults[ingCountB]) {\r\n          if (myFusionResults[ingCountB][idB].length === 0) { continue; }\r\n          const speciesB: Models.Demon = myFusionResults[ingCountB][idB][0].demon;\r\n\r\n          // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n          if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n          const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n          if (!speciesR) { continue; }\r\n          if (!postSpeciesFusionCheck(myFusionResults, settings, speciesR, ingCountR, [speciesA, speciesB])) { continue; }\r\n\r\n          const resultFusedDemons: Models.FusedDemon[] = crossFuseIngredients(speciesR, myFusionResults[ingCountA][idA], myFusionResults[ingCountB][idB]);\r\n          if (!myFusionResults[ingCountR][speciesR.id]) { myFusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            myFusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        speciesUsedAsA[speciesA.id] = true;\r\n      }\r\n    }\r\n\r\n    if (settings.useTripleFusion) {\r\n      calculateTripleFusionCombinations(ingredients, demonCompendium, settings, myFusionResults, ingCountR);\r\n    }\r\n  }\r\n\r\n  // Re-traverse the entire results and fully purge fusion recipes that produce demons of lower level\r\n  for (const ingCount in myFusionResults) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    for (const id in myFusionResults[ingCount]) {\r\n      const demonAry: Models.FusedDemon[] = myFusionResults[ingCount][id];\r\n      const filteredDemonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() })\r\n      myFusionResults[ingCount][id] = filteredDemonAry;\r\n    }\r\n  }\r\n\r\n  return myFusionResults;\r\n}\r\n\r\nfunction calculateTripleFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: Settings, fusionResults: Models.FusionResults, ingCountR: number): void {\r\n  let ingCounts: number[] = [];\r\n  while (getNextTripleFusionIngCounts(ingCounts, ingCountR)) {\r\n    const [ingCountA, ingCountB, ingCountC] = ingCounts;\r\n    const alreadyCalculatedAsA: { [id: number]: boolean } = {};\r\n    for (const idA in fusionResults[ingCountA]) {\r\n      if (fusionResults[ingCountA][idA].length === 0) { continue; }\r\n      const speciesA: Models.Demon = fusionResults[ingCountA][idA][0].demon;\r\n\r\n      const alreadyCalculatedAsB: { [id: number]: boolean } = {};\r\n      for (const idB in fusionResults[ingCountB]) {\r\n        if (alreadyCalculatedAsA[Number(idB)]) { continue; }\r\n        if (fusionResults[ingCountB][idB].length === 0) { continue; }\r\n        const speciesB: Models.Demon = fusionResults[ingCountB][idB][0].demon;\r\n\r\n        for (const idC in fusionResults[ingCountC]) {\r\n          if (alreadyCalculatedAsA[Number(idC)]) { continue; }\r\n          if (alreadyCalculatedAsB[Number(idC)]) { continue; }\r\n          if (fusionResults[ingCountC][idC].length === 0) { continue; }\r\n          const speciesC: Models.Demon = fusionResults[ingCountC][idC][0].demon;\r\n          const speciesR: Models.Demon | undefined = demonCompendium.tripleFuseDemons(speciesA, speciesB, speciesC);\r\n          if (!speciesR) { continue; }\r\n          if (!postSpeciesFusionCheck(fusionResults, settings, speciesR, ingCountR, [speciesA, speciesB, speciesC])) { continue; }\r\n          const resultFusedDemons: Models.FusedDemon[] = crossFuseIngredients(speciesR, fusionResults[ingCountA][idA], fusionResults[ingCountB][idB], fusionResults[ingCountC][idC]);\r\n          if (!fusionResults[ingCountR][speciesR.id]) { fusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            fusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        alreadyCalculatedAsB[speciesB.id] = true;\r\n      }\r\n      alreadyCalculatedAsA[speciesA.id] = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNextTripleFusionIngCounts(fusionIngCounts: number[], ingCountR: number): boolean {\r\n  if (ingCountR < 3) { return false; }\r\n  if (fusionIngCounts.length < 3) { \r\n    fusionIngCounts[0] = ingCountR - 2;\r\n    fusionIngCounts[1] = 1;\r\n    fusionIngCounts[2] = 1;\r\n    return true;\r\n  }\r\n  for (let i = fusionIngCounts.length - 2; i >= 0; i--) {\r\n    const j: number = i + 1;\r\n    if (fusionIngCounts[i] - fusionIngCounts[j] >= 2) {\r\n      fusionIngCounts[i] = fusionIngCounts[i] - 1;\r\n      fusionIngCounts[j] = fusionIngCounts[j] + 1;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction postSpeciesFusionCheck(fusionResults: Models.FusionResults, settings: Settings, speciesR: Models.Demon, ingCountR: number, speciesIngs: Models.Demon[]): boolean {\r\n  // throw out inefficient fusions that the user can already make using fewer ingredients\r\n  let canBeMadeWithLessIngredient: boolean = false;\r\n  for (let sizeCheck = ingCountR - 1; sizeCheck >= 1; sizeCheck--) {\r\n    if (fusionResults[sizeCheck][speciesR.id]) {\r\n      canBeMadeWithLessIngredient = true;\r\n      break;\r\n    }\r\n  }\r\n  if (canBeMadeWithLessIngredient) { return false; }\r\n\r\n  if (speciesR.lvl > settings.charLvl) { return false; }\r\n\r\n  // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n  if (ingCountR === settings.maxIngredient) {\r\n    for (const speciesIng of speciesIngs) {\r\n      if (speciesR.lvl < speciesIng.lvl) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction crossFuseIngredients(resultSpecies: Models.Demon, ...ingredients: Models.FusedDemon[][]): Models.FusedDemon[] {\r\n  const indeces: number[] = [];\r\n  const ret: Models.FusedDemon[] = [];\r\n  for (let i = 0; i < ingredients.length; i++) { indeces.push(0); }\r\n  while (true) {\r\n    const fusedDemonIngredientsHistory: Models.FusedDemon[] = [];\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      fusedDemonIngredientsHistory.push(ingredients[i][indeces[i]]);\r\n    }\r\n    ret.push(new Models.FusedDemon(resultSpecies, fusedDemonIngredientsHistory));\r\n\r\n    // Increment the indeces\r\n    let hasCarry: boolean = true;\r\n    for (let i = indeces.length - 1; i >= 0; i--) {\r\n      let index: number = indeces[i];\r\n      if (hasCarry) { index = index + 1; hasCarry = false; }\r\n      if (index >= ingredients[i].length) { index = 0; hasCarry = true; }\r\n      indeces[i] = index;\r\n      if (!hasCarry) { break; }\r\n    }\r\n    if (hasCarry) { break; }\r\n  }\r\n  return ret;\r\n}\r\n\r\nlet ingredients: Models.Ingredients;\r\nlet setIngredients: React.Dispatch<React.SetStateAction<Models.Ingredients>>;\r\nfunction removeDemonFromIngredients(demonId: number): void {\r\n  const newIngredients = { ...ingredients };\r\n  delete newIngredients[demonId];\r\n  setIngredients(newIngredients);\r\n}\r\nlet settings: Settings;\r\n\r\nexport default function FusionRecommender(params: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = params;\r\n  [ingredients, setIngredients] = useState<Models.Ingredients>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>({});\r\n  let [settingsIsVisible, setSettingsIsVisible] = useState<boolean>(false);\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  if (!settings) {\r\n    settings = new Settings();\r\n    settings.useTripleFusion = demonCompendium.usePersonaTripleFusionMechanic;\r\n    settings.useTripleFusionSettingIsVisible = demonCompendium.usePersonaTripleFusionMechanic;\r\n  }\r\n\r\n  const fusionResultSectionHeader = useRef<HTMLHeadingElement>(null);\r\n\r\n  function addDemonToIngredients(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function onCalculateButtonClick(): void {\r\n    setFusionResults(calculateAllFusionCombinations(ingredients, demonCompendium, settings));\r\n  }\r\n\r\n  function onSettingsButtonClick(): void {\r\n    setSettingsIsVisible(!settingsIsVisible);\r\n  }\r\n\r\n  function onResetButtonClick(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n\r\n    const newFusionResults = {};\r\n    setFusionResults(newFusionResults);\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.fusionRecommender}>\r\n      <h2>Add demons to use as fusion ingredients</h2>\r\n      <div className={styles.addDemonsAndButtonsRowContainer}>\r\n        <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredients} />\r\n        <div className={styles.buttonsRow}>\r\n          <Button className={styles.calculateButton} variant=\"outlined\" onClick={onCalculateButtonClick} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n          <Button className={styles.settingsButton} variant=\"outlined\" onClick={onSettingsButtonClick}><SettingsIcon /></Button>\r\n          <Button className={styles.resetButton} variant=\"outlined\" onClick={onResetButtonClick}><ReplayIcon />Reset</Button>\r\n        </div>\r\n      </div>\r\n      <SettingsPanel key={resetterKey} visible={settingsIsVisible} settings={settings} />\r\n      <h2>Fusion Ingredients</h2>\r\n      <FusionIngredientsTable demonCompendium={demonCompendium} ingredients={ingredients} onRemoveIngredient={removeDemonFromIngredients} />\r\n      <h2 ref={fusionResultSectionHeader}>Results</h2>\r\n      <FusionResultTable fusionResults={fusionResults} />\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionRecommender from './ui-components/fusion-recommender';\r\n\r\nimport './App.scss';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\",\r\n    fontSize: 14\r\n  }\r\n});\r\n\r\n// function loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n//   const demonJsonPromise = import(\"./desu2/demons.json\").then(importedJson => importedJson.default);\r\n//   const fusionChartJsonPromise = import(\"./desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n//   const presetJsonPromise = import(\"./desu2/presets.json\").then(importedJson => importedJson.default);\r\n//   Promise.all([demonJsonPromise, fusionChartJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n//     const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n//     callback(newDemonCompendium);\r\n//   })\r\n// }\r\n\r\nfunction loadPersona4GoldenDemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./p4g/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./p4g/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const [demonCompendium, setDemonCompendium] = useState<DemonCompendium | undefined>(undefined);\r\n\r\n  useEffect(()=>{\r\n    if (!demonCompendium) {\r\n      loadPersona4GoldenDemonCompendium(setDemonCompendium);\r\n    }\r\n  }, [demonCompendium]);\r\n\r\n  let fusionRecommender: JSX.Element = (demonCompendium) ? <FusionRecommender demonCompendium={demonCompendium} /> : <React.Fragment />;\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n        <header className=\"App-header\">\r\n          <h1>Megami Tensei Fusion Recommender</h1>\r\n        </header>\r\n        {fusionRecommender}\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__2j3Dm\",\"subAdderContainer\":\"ui-components_subAdderContainer__wG2As\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1OXHc\",\"addDemonButton\":\"ui-components_addDemonButton__1BBcP\",\"removeDemonButtonIcon\":\"ui-components_removeDemonButtonIcon__2ga3t\",\"fusionResultsTable\":\"ui-components_fusionResultsTable__2Hl-s\",\"baseIngredientName\":\"ui-components_baseIngredientName__18Eu_\",\"recipeLine\":\"ui-components_recipeLine__12QIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionRecommender\":\"fusion-recommender_fusionRecommender__zW_X6\",\"addDemonsAndButtonsRowContainer\":\"fusion-recommender_addDemonsAndButtonsRowContainer__3PpcL\",\"buttonsRow\":\"fusion-recommender_buttonsRow__2bfHg\",\"calculateButton\":\"fusion-recommender_calculateButton__31QNj\",\"shining\":\"fusion-recommender_shining__1og21\",\"settingsButton\":\"fusion-recommender_settingsButton__2v9Cz\",\"resetButton\":\"fusion-recommender_resetButton__3V_j0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPanel\":\"settings-panel_settingsPanel__1T-fU\",\"settingsLine\":\"settings-panel_settingsLine__nhSDF\",\"numberSettings\":\"settings-panel_numberSettings__29pFN\",\"numberFieldLabel\":\"settings-panel_numberFieldLabel__1csHC\"};"],"sourceRoot":""}
{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/data-table.tsx","ui-components/ingredients-table.tsx","ui-components/fusion-result-datagrid.tsx","ui-components/settings-panel.tsx","ui-components/demon-adder.tsx","ui-components/fusion-recommender.tsx","App.tsx","index.tsx","ui-components/ui-components.module.scss","ui-components/fusion-recommender.module.scss","ui-components/settings-panel.module.scss","ui-components/data-table.module.scss","ui-components/ingredients-table.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","rank","specialRecipe","this","statsName","FusedDemon","demon","ingredients","length","ret","ingDemon","getBaseIngredients","Object","keys","join","values","map","getHighestIngredientLvl","highestIngLvl","DemonsPreset","caption","demons","ELEMENT_RACE","DemonCompendium","demonListJSON","fusionChartJSON","presetJSON","demonJson","fusionChartJson","presetJson","demonAry","normalFusionChart","tripleFusionChart","demonsPresets","gameHasElements","_usePersonaSameRaceFusionMechanic","_usePersonaTripleFusionMechanic","disableSameDemonFusion","idMap","nameMap","raceOrderMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseFusionChart","prepRaceLvlInfo","parsePresets","demonA","demonB","fuseDemonWithElement","fuseDemonSameRaceNoElement","fuseDemonDiffRaceNoElement","demonC","sort","x","y","getRaceOrder","demonWeak","demonMid","demonStrong","intermediateRace","getFusionRace","resultRace","getTripleFusionRace","resultLvlTable","getLvlTableForRace","resultLvlTest","resultLvl","findResultLvlFromLvlTable","demonResult","getDemonFromRaceLvl","resultLvlIndex","indexOf","demonName","getDemonByName","randomDemonIndex","Math","floor","random","elements","randomElementIndex","testGetDemon","results","i","demonR","fuseDemons","console","log","results2","j","tripleFuseDemons","push","Models","usePersonaSameRaceFusionMechanic","usePersonaTripleFusionMechanic","row","raceFusionTable","col","chartsToUpdate","raceA","races","raceB","raceC","chart","specialRecipes","presets","preset","presetModel","demon1","demon2","excludeDemonsWithSpecialRecipe","lvlTable","Number","lvlToCheck","isTripleFusion","index","raceR","lvlTableR","lvlResultTest","lvlR","elementNameR","filter","element","raceId","elementFusionTable","demonRankChange","resultRank","DataTable","params","dataTableProvider","React","useState","page","setPage","undefined","sortByCol","setSortByCol","sortDirection","setSortDirection","sortType","setSortType","pageSize","colDefs","getColumnDefinition","preIdRowData","getRowData","totalRowCount","Fragment","rowData","rd","data","sortMult","comparitor","numberComparitor","stringComparitor","a","b","valA","getSortValue","valB","paginizedRowData","headerCells","colNum","colDef","headerContent","sortSpec","buildSortableHeaderCellContent","TableCell","headerProps","renderedRows","TableRow","renderRow","Paper","className","styles","paperContainer","elevation","TableContainer","tableContainer","Table","TableHead","header","TableBody","tableBody","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","headerInnerContent","colSortType","_sortByCol","_sortDirection","_sortType","TableSortLabel","active","direction","onClick","createSortHandler","setOrderBy","nextSortDirection","IngredientsSettingsEnum","RemoveDemonButton","IconButton","onRemoveIngredient","demonId","removeDemonButton","removeDemonButtonIcon","CheckboxSetting","setting","ingredientsSettings","defaultChecked","mustUse","multipleUse","Checkbox","checkBox","onChange","checked","target","color","FusionIngredientsDataTableProvider","demonCompendium","width","align","FusionIngredientsTable","initializeIngredientsSettings","useMemo","getDemonById","dataProvider","memo","renderDemonName","isFused","baseIngredientName","renderRecipe","priorRecipes","curRecipe","isFirstLoop","separator","nameR","recipeLine","renderRecipeWrapper","cellParams","value","getRecipeAsString","valueParam","toBaseIngredientSearchString","FusionResultDataGrid","fusionResults","columns","field","headerName","headerAlign","resizable","disableColumnMenu","flex","renderCell","valueGetter","ingredientsAsRowsArray","size","fusedDemon","demonRow","gridWrapperRef","useRef","useEffect","gridDiv","current","gridEl","querySelector","style","height","rows","rowHeight","fusionResultsTable","disableSelectionOnClick","autoHeight","density","Settings","charLvl","maxIngredient","useTripleFusion","useTripleFusionSettingIsVisible","SettingsPanel","visible","settings","charLvlFieldValue","setCharLvlFieldValue","maxIngFieldValue","setMaxIngFieldValue","settingsPanelStyle","display","settingsPanel","NumberSettings","label","min","max","emptyFieldValue","fieldStateValueAndSetter","onSetSettings","newValue","CheckboxSettings","stateValueAndSetter","stateValue","stateSetter","settingsLine","numberSettings","numberFieldLabel","TextField","type","InputLabelProps","shrink","inputProps","step","variant","valueAsNumber","FormControlLabel","control","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","selection","onKeyPress","key","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","keyIsAccepted","preventDefault","stopPropagation","valueSetterFunc","lvlFieldsContainer","bind","selectedOption","setSelectedOption","Button","addDemonButton","setIngredients","calculateTripleFusionCombinations","ingCountR","ingCounts","getNextTripleFusionIngCounts","ingCountA","ingCountB","ingCountC","alreadyCalculatedAsA","idA","speciesA","alreadyCalculatedAsB","idB","speciesB","idC","speciesC","speciesR","postSpeciesFusionCheck","resultFusedDemons","crossFuseIngredients","fusionIngCounts","speciesIngs","canBeMadeWithLessIngredient","sizeCheck","speciesIng","resultSpecies","indeces","fusedDemonIngredientsHistory","hasCarry","removeDemonFromIngredients","newIngredients","FusionRecommender","setFusionResults","settingsIsVisible","setSettingsIsVisible","resetterKey","setResetterKey","fusionResultSectionHeader","fusionRecommender","addDemonsAndButtonsRowContainer","buttonsRow","calculateButton","myFusionResults","speciesUsedAsA","ingCount","filteredDemonAry","isWeakerThanIngredients","calculateAllFusionCombinations","disabled","settingsButton","resetButton","ref","theme","createMuiTheme","palette","typography","fontFamily","fontSize","App","setDemonCompendium","callback","demonJsonPromise","importedJson","default","fusionChartJsonPromise","Promise","all","loadedJsons","newDemonCompendium","loadPersona4GoldenDemonCompendium","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.71ec02ff.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    rank: number = 0;\r\n    specialRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredients?: FusedDemon[];\r\n\r\n    constructor(demon: Demon, ingredients?: FusedDemon[]) {\r\n        this.demon = demon;\r\n        this.ingredients = ingredients;\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        if (!this.ingredients) { return false; }\r\n        return this.ingredients.length > 0;\r\n    }\r\n\r\n    public getBaseIngredients(): { [id: number]: Demon } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: Demon } = {};\r\n            for (const ingDemon of this.ingredients) {\r\n                ret = {...ret, ...ingDemon.getBaseIngredients()};\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: Demon } = {};\r\n            ret[this.demon.id] = this.demon;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public toBaseIngredientsIdCode(): string {\r\n        return Object.keys(this.getBaseIngredients()).join(\"-\");\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        return Object.values(this.getBaseIngredients()).map(demon => demon.name).join(\" \");\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredients) {\r\n            for (const ingDemon of this.ingredients) {\r\n                let highestIngLvl: number = ingDemon.getHighestIngredientLvl();\r\n                if (highestIngLvl > lvl) { lvl = highestIngLvl; }\r\n            }\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport type Ingredients = { [demonId: number]: boolean };\r\nexport type IngredientsSettings = { [demonId: number]: { mustUse: boolean, multipleUse: boolean } };\r\nexport type FusionResults = { [ingredientCount: number]: { [id: string]: FusedDemon[] } };","import * as Models from './data-models';\r\n\r\nconst ELEMENT_RACE: string = \"Element\";\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    raceFusionTable: string[][],\r\n    \r\n    elements?: string[],\r\n    elementFusionTable?: number[][],\r\n    usePersonaSameRaceFusionMechanic?: boolean,\r\n    usePersonaTripleFusionMechanic?: boolean,\r\n    disableSameDemonFusion?: boolean,\r\n    specialRecipes?: { [resultName: string]: string[] }\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetJSON = { presets: Preset[] };\r\n\r\nexport class DemonCompendium {\r\n    private demonJson: DemonJson;\r\n    private fusionChartJson: FusionChartJson;\r\n    private presetJson?: PresetJSON;\r\n\r\n    private demonAry: Models.Demon[] = [];\r\n    private normalFusionChart: { [race: string]: { [race: string]: string } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private tripleFusionChart: { [race: string]: { [race: string]: string } } = {}; \r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n    private gameHasElements: boolean = false;\r\n    private _usePersonaSameRaceFusionMechanic: boolean = false;\r\n    private _usePersonaTripleFusionMechanic: boolean = false;\r\n    private disableSameDemonFusion: boolean = false;\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceOrderMap: { [race: string]: number } = {}\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJSON: DemonJson, fusionChartJSON: FusionChartJson, presetJSON?: PresetJSON) {\r\n        this.demonJson = demonListJSON;\r\n        this.fusionChartJson = fusionChartJSON;\r\n        this.presetJson = presetJSON;\r\n\r\n        this.parseDemons();\r\n        this.prepDemonIds();\r\n\r\n        this.parseFusionChart();\r\n        this.prepRaceLvlInfo();\r\n        \r\n        this.parsePresets();\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public get usePersonaTripleFusionMechanic(): boolean {\r\n        return this._usePersonaTripleFusionMechanic;\r\n    }\r\n\r\n    public get usePersonaSameRaceFusionMechanic(): boolean {\r\n        return this._usePersonaSameRaceFusionMechanic;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.id === demonB.id && this.disableSameDemonFusion) { return undefined; }\r\n        \r\n        if (demonA.race === ELEMENT_RACE && demonB.race === ELEMENT_RACE) {\r\n            return undefined;\r\n        } else if (demonA.race === ELEMENT_RACE || demonB.race === ELEMENT_RACE) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoElement(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    public tripleFuseDemons(demonA: Models.Demon, demonB: Models.Demon, demonC: Models.Demon): Models.Demon | undefined {\r\n        if (this.disableSameDemonFusion) {\r\n            if (demonA.id === demonB.id ||\r\n                demonA.id === demonC.id ||\r\n                demonB.id === demonC.id) { return undefined; }\r\n        }\r\n\r\n        const [demonWeak, demonMid, demonStrong] = [demonA, demonB, demonC].sort((x, y) => (x.lvl !== y.lvl) ? x.lvl - y.lvl : this.getRaceOrder(y.race) - this.getRaceOrder(x.race)); // sort from lowest to highest lv. If lvs are the same, sort by race order from highest to lowest.\r\n        const intermediateRace: string | undefined = this.getFusionRace(demonWeak.race, demonMid.race);\r\n        if (!intermediateRace) { return undefined; }\r\n        const resultRace: string | undefined = this.getTripleFusionRace(intermediateRace, demonStrong.race);\r\n        if (!resultRace) { return undefined; }\r\n        const resultLvlTable: number[] = this.getLvlTableForRace(resultRace, true);\r\n        const resultLvlTest: number = (demonWeak.lvl + demonMid.lvl + demonStrong.lvl + 12.75) / 3;\r\n        let resultLvl: number = this.findResultLvlFromLvlTable(resultLvlTable, resultLvlTest, true);\r\n        let demonResult: Models.Demon | undefined = this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n        if (!demonResult) { return undefined; }\r\n        if (demonResult.id !== demonWeak.id && demonResult.id !== demonMid.id && demonResult.id !== demonStrong.id) {\r\n            return demonResult;\r\n        } else {\r\n            let resultLvlIndex = resultLvlTable.indexOf(resultLvl);\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            if (resultLvlIndex + 1 < resultLvlTable.length) {\r\n                resultLvl = resultLvlTable[resultLvlIndex + 1];\r\n                return this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private testGetDemon(demonName?: string): Models.Demon | undefined {\r\n        if (demonName) { return this.getDemonByName(demonName); }\r\n        if (this.demonAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonAry.length);\r\n        return this.demonAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        if (!this.fusionChartJson.elements || this.fusionChartJson.elements.length === 0) {return undefined};\r\n        const randomElementIndex: number = Math.floor(Math.random() * this.fusionChartJson.elements.length);\r\n        return this.getDemonByName(this.fusionChartJson.elements[randomElementIndex]);\r\n    }\r\n\r\n    private testFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [name: string]: Models.Demon} = {};\r\n        for (let i = 0; i < this.demonAry.length; i++) {\r\n            const demonB = this.demonAry[i];\r\n            const demonR = this.fuseDemons(demon, demonB);\r\n            if (!demonR) {continue;}\r\n            results[demonB.name] = demonR;\r\n        }\r\n        \r\n        console.log(demon);\r\n        console.log(results);\r\n    }\r\n\r\n    private testTripleFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [resultName: string]: Models.Demon[][] } = {};\r\n        const results2: { [resultName: string]: { [ing2Name: string]: string[] } } = {};\r\n        for (let i = 0; i < this.demonAry.length; i++) {\r\n            const demonB = this.demonAry[i];\r\n            for (let j = i; j < this.demonAry.length; j++) {\r\n                const demonC = this.demonAry[j];\r\n                const demonR = this.tripleFuseDemons(demon, demonB, demonC);\r\n                if (!demonR) {continue;}\r\n                if (!results[demonR.name]) { results[demonR.name] = []; }\r\n                if (!results2[demonR.name]) { results2[demonR.name] = {}; }\r\n                if (!results2[demonR.name][demonB.name]) { results2[demonR.name][demonB.name] = []; }\r\n                if (!results2[demonR.name][demonC.name]) { results2[demonR.name][demonC.name] = []; }\r\n                results[demonR.name].push([demonB, demonC]);\r\n                results2[demonR.name][demonB.name].push(demonC.name);\r\n                results2[demonR.name][demonC.name].push(demonB.name);\r\n            }\r\n        }\r\n        console.log(demon);\r\n        console.log(results);\r\n        console.log(results2);\r\n    }\r\n\r\n    private parseDemons(): void {\r\n        Models.Demon.statsName = this.demonJson.statsName;\r\n        const demons = this.demonJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseFusionChart(): void {\r\n        if (this.fusionChartJson.elements && this.fusionChartJson.elements.length > 0) { this.gameHasElements = true; }\r\n        if (this.fusionChartJson.usePersonaSameRaceFusionMechanic) { this._usePersonaSameRaceFusionMechanic = true; }\r\n        if (this.fusionChartJson.usePersonaTripleFusionMechanic) { this._usePersonaTripleFusionMechanic = true; }\r\n        if (this.fusionChartJson.disableSameDemonFusion) { this.disableSameDemonFusion = true; }\r\n\r\n        for (let row: number = 0; row < this.fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < this.fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const chartsToUpdate = [];\r\n                if (this._usePersonaTripleFusionMechanic) {\r\n                    if (col < row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                    } else if (col === row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    } else {\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    }\r\n                } else {\r\n                    if (col > row) { \r\n                        continue;\r\n                    }\r\n                    chartsToUpdate.push(this.normalFusionChart);\r\n                }\r\n\r\n                const raceA: string = this.fusionChartJson.races[row];\r\n                const raceB: string = this.fusionChartJson.races[col];\r\n                const raceC: string = this.fusionChartJson.raceFusionTable[row][col];\r\n\r\n                // Set the .raceA.raceB property of the parsed fusion table\r\n                for (const chart of chartsToUpdate) {\r\n                    if (!chart[raceA]) {\r\n                        chart[raceA] = {};\r\n                    }\r\n                    chart[raceA][raceB] = raceC;\r\n\r\n                    // Set the .raceB.raceA property of the parsed fusion table\r\n                    if (!chart[raceB]) {\r\n                        chart[raceB] = {};\r\n                    }\r\n                    chart[raceB][raceA] = raceC;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.fusionChartJson.specialRecipes) {\r\n            for (const demonName in this.fusionChartJson.specialRecipes) {\r\n                const demon = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demon.specialRecipe = true;\r\n                demon.rank = 1000;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.fusionChartJson.races.length; i++) {\r\n            this.raceOrderMap[this.fusionChartJson.races[i]] = i;\r\n        }\r\n    }\r\n\r\n    private parsePresets(): void {\r\n        if (!this.presetJson) { return; }\r\n        for (const preset of this.presetJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonAry = this.demonAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonAry) {\r\n            if (demon.specialRecipe) { continue; }\r\n            demon.rank = this.getLvlTableForRace(demon.race, true).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string, excludeDemonsWithSpecialRecipe?: boolean): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        const lvlTable: number[] = [];\r\n        for (const lvl in this.raceLvlDemonMap[race]) {\r\n            if (excludeDemonsWithSpecialRecipe && this.raceLvlDemonMap[race][lvl].specialRecipe) {\r\n                continue;\r\n            }\r\n            lvlTable.push(Number(lvl));\r\n        }\r\n        return lvlTable;\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.normalFusionChart[raceA]) {\r\n            if (this.normalFusionChart[raceA][raceB]) {\r\n                return this.normalFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getTripleFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.tripleFusionChart[raceA]) {\r\n            if (this.tripleFusionChart[raceA][raceB]) {\r\n                return this.tripleFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getRaceOrder(race: string): number {\r\n        return this.raceOrderMap[race];\r\n    }\r\n\r\n    private findResultLvlFromLvlTable(lvlTable: number[], lvlToCheck: number, isTripleFusion?: boolean) {\r\n        let index = 0;\r\n        for (let i = 0; i < lvlTable.length; i++) {\r\n            if (lvlToCheck > lvlTable[i]) {\r\n                index++;\r\n            }\r\n        }\r\n        if (index >= lvlTable.length) { \r\n            if (isTripleFusion) { return -1; }\r\n            index = lvlTable.length - 1 \r\n        };\r\n        return lvlTable[index];\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR, true);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const lvlResultTest = (demonB.lvl + demonA.lvl + 1) / 2;\r\n        const lvlR: number = this.findResultLvlFromLvlTable(lvlTableR, lvlResultTest);\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (this.gameHasElements) {\r\n            const elementNameR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n            if (!elementNameR) { return undefined; }\r\n            return this.getDemonByName(elementNameR);\r\n        } else if (this._usePersonaSameRaceFusionMechanic) {\r\n            const resultLvlTable = this.getLvlTableForRace(demonB.race, true).filter(lvl => lvl !== demonA.lvl);\r\n            let resultLvlIndex = -1;\r\n            for (const resultLvl of resultLvlTable) {\r\n                if (demonA.lvl + demonB.lvl >= 2 * resultLvl) { resultLvlIndex = resultLvlIndex + 1 }\r\n            }\r\n\r\n            if (resultLvlTable[resultLvlIndex] === demonB.lvl) {\r\n                resultLvlIndex = resultLvlIndex - 1;\r\n            }\r\n\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            const resultLvl = resultLvlTable[resultLvlIndex];\r\n            return this.getDemonFromRaceLvl(demonA.race, resultLvl);\r\n        }\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (demonA.race === ELEMENT_RACE) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (demonB.race === ELEMENT_RACE) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        }\r\n\r\n        const raceId: number = this.fusionChartJson.races.indexOf(demon.race);\r\n        if (raceId < 0 || raceId >= this.fusionChartJson.elementFusionTable!.length) {return undefined;}\r\n        const demonRankChange: number = this.fusionChartJson.elementFusionTable![raceId][element.rank];\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined };\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport styles from './data-table.module.scss';\r\n\r\ntype StatePair<T> = [T, React.Dispatch<React.SetStateAction<T>>];\r\nexport type CellProps = {\r\n    className?: string;\r\n    width?: number;\r\n    align?: 'inherit' | 'left' | 'center' | 'right' | 'justify';\r\n}\r\nexport type SortSpec = {\r\n    sortType: 'number' | 'string'\r\n}\r\nexport type ColDef = {\r\n    headerContent?: JSX.Element | string;\r\n    sortSpec?: SortSpec;\r\n    headerProps?: CellProps;\r\n}\r\nexport interface DataTableProvider<T> {\r\n    pageSize: number;\r\n    getColumnDefinition(): ColDef[];\r\n    getRowData(): T[];\r\n    renderRow(rowData: T): JSX.Element | string | undefined;\r\n    getSortValue(rowData: T, sortByCol: number): string | number;\r\n}\r\ntype DataTableProps = {\r\n    dataTableProvider: DataTableProvider<any>;\r\n}\r\nconst DataTable = (params: DataTableProps): JSX.Element => {\r\n    const {dataTableProvider} = params;\r\n    const [page, setPage] = React.useState<number>(0);\r\n    const [sortByCol, setSortByCol] = React.useState<number | undefined>(undefined);\r\n    const [sortDirection, setSortDirection] = React.useState<\"desc\" | \"asc\" | undefined>(undefined);\r\n    const [sortType, setSortType] = React.useState<\"number\" | \"string\">(\"string\");\r\n    const pageSize: number = dataTableProvider.pageSize;\r\n\r\n    const colDefs: ColDef[] = dataTableProvider.getColumnDefinition();\r\n    const preIdRowData: any[] = dataTableProvider.getRowData();\r\n    const totalRowCount: number = preIdRowData.length;\r\n\r\n    // Empty row banner\r\n    if (totalRowCount === 0) { return <React.Fragment /> }\r\n\r\n    // ID rows\r\n    const rowData: { id: number, data: any }[] = preIdRowData.map((rd, index) => { return { id: index, data: rd } });\r\n\r\n    // Sort rows\r\n    if (sortByCol && sortDirection !== undefined) {\r\n        const sortMult: number = (sortDirection === \"asc\") ? 1 : -1;\r\n        const comparitor: (...x: any) => number = (sortType === \"number\") ? numberComparitor : stringComparitor;\r\n        rowData.sort((a, b) => { \r\n            const valA = dataTableProvider.getSortValue(a.data, sortByCol);\r\n            const valB = dataTableProvider.getSortValue(b.data, sortByCol);\r\n            return sortMult * comparitor(valA, valB) });\r\n    }\r\n\r\n    // Paginate\r\n    const paginizedRowData = rowData.filter((data, index) => (index >= page * pageSize) && (index < (page + 1) * pageSize));\r\n    function changePage(event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) {\r\n        setPage(page);\r\n    }\r\n    \r\n    // Render headers\r\n    const headerCells: JSX.Element[] = [];\r\n    let colNum: number = 0;\r\n    for (const colDef of colDefs) {\r\n        const headerContent = colDef.sortSpec ? buildSortableHeaderCellContent(colDef.headerContent, colNum, colDef.sortSpec.sortType, [sortByCol, setSortByCol], [sortDirection, setSortDirection], [sortType, setSortType]) : colDef.headerContent;\r\n\r\n        headerCells.push(<TableCell {...colDef.headerProps}>{headerContent}</TableCell>);\r\n        colNum++;\r\n    }\r\n\r\n    // Render rows\r\n    const renderedRows: JSX.Element[] = [];\r\n    for (const row of paginizedRowData) {\r\n        renderedRows.push(\r\n            <TableRow key={row.id}>\r\n                {dataTableProvider.renderRow(row.data)}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    return <Paper className={styles.paperContainer} elevation={1}>\r\n        <TableContainer className={styles.tableContainer}>\r\n            <Table>\r\n                <TableHead className={styles.header}>\r\n                    <TableRow >\r\n                        {headerCells}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className={styles.tableBody}>\r\n                    {renderedRows}\r\n                </TableBody>\r\n            </Table>\r\n            <TablePagination\r\n                rowsPerPageOptions={[pageSize]}\r\n                component=\"div\"\r\n                count={totalRowCount}\r\n                rowsPerPage={pageSize}\r\n                page={page}\r\n                onChangePage={changePage}\r\n            />\r\n        </TableContainer>\r\n    </Paper>\r\n}\r\nexport default DataTable;\r\n\r\nfunction stringComparitor(a: string, b: string): number {\r\n    return (a > b) ? 1 : (a === b) ? 0 : -1;\r\n}\r\n\r\nfunction numberComparitor(a: number, b: number): number {\r\n    return a - b;\r\n}\r\n\r\nfunction buildSortableHeaderCellContent(\r\n    headerInnerContent: JSX.Element | string | undefined,\r\n    id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): JSX.Element {\r\n    const [sortByCol] = _sortByCol;\r\n    const [sortDirection] = _sortDirection;\r\n\r\n    return <TableSortLabel\r\n        active={sortByCol === id && sortDirection !== undefined}\r\n        direction={sortByCol === id ? sortDirection : undefined}\r\n        onClick={createSortHandler(id, colSortType, _sortByCol, _sortDirection, _sortType)}>\r\n        {headerInnerContent}\r\n    </TableSortLabel>;\r\n}\r\n\r\nfunction createSortHandler(id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void {\r\n    return (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        const [sortByCol, setOrderBy] = _sortByCol;\r\n        const [sortDirection, setSortDirection] = _sortDirection;\r\n        const [, setSortType] = _sortType;\r\n\r\n        let nextSortDirection = sortDirection;\r\n        if (sortByCol === id) {\r\n            if (sortDirection === \"asc\") { nextSortDirection = \"desc\" }\r\n            if (sortDirection === \"desc\") { nextSortDirection = undefined }\r\n            if (sortDirection === undefined) {nextSortDirection = \"asc\"}\r\n        } else {\r\n            nextSortDirection = \"asc\";\r\n        }\r\n        setSortDirection(nextSortDirection);\r\n        setOrderBy(id);\r\n        setSortType(colSortType);\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nimport styles from './ingredients-table.module.scss';\r\n\r\n//====================================================================================================\r\n\r\ntype RemoveDemonButtonProps = {\r\n    demonId: number;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nfunction RemoveDemonButton(params: RemoveDemonButtonProps): JSX.Element {\r\n\r\n    function onIconButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\r\n        if (params.onRemoveIngredient) {\r\n            params.onRemoveIngredient(params.demonId);\r\n        }\r\n    }\r\n\r\n    return <IconButton onClick={onIconButtonClick} className={styles.removeDemonButton}>\r\n    <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n  </IconButton>\r\n}\r\n\r\n//====================================================================================================\r\n\r\nenum IngredientsSettingsEnum {\r\n    multipleUse = 1,\r\n    mustUse = 2\r\n}\r\ntype CheckboxSettingProps = {\r\n    demonId: number,\r\n    setting: IngredientsSettingsEnum,\r\n    ingredientsSettings: Models.IngredientsSettings\r\n}\r\nfunction CheckboxSetting(params: CheckboxSettingProps): JSX.Element {\r\n    const {demonId, setting, ingredientsSettings} = params;\r\n    let defaultChecked: boolean = false;\r\n    switch (setting) {\r\n        case IngredientsSettingsEnum.mustUse: {\r\n            defaultChecked = ingredientsSettings[demonId].mustUse;\r\n            break;\r\n        }\r\n        case IngredientsSettingsEnum.multipleUse: \r\n        default: {\r\n            defaultChecked = ingredientsSettings[demonId].multipleUse;\r\n        }\r\n    }\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        switch (setting) {\r\n            case IngredientsSettingsEnum.mustUse: {\r\n                ingredientsSettings[demonId].mustUse = event.target.checked;\r\n                break;\r\n            }\r\n            case IngredientsSettingsEnum.multipleUse: \r\n            default: {\r\n                ingredientsSettings[demonId].multipleUse = event.target.checked;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <Checkbox\r\n        className={styles.checkBox}\r\n        defaultChecked={defaultChecked}\r\n        onChange={onCheckboxChange}\r\n        color=\"default\"\r\n    />;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeIngredientsSettings(ingredients: Models.Ingredients, ingredientsSettings: Models.IngredientsSettings) {\r\n    for (const demonId in ingredients) {\r\n        if (!ingredientsSettings[demonId]) {\r\n            ingredientsSettings[demonId] = { mustUse: false, multipleUse: false };\r\n        }\r\n    }\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FusionIngredientsTableProps = {\r\n    demonCompendium: DemonCompendium\r\n    ingredients: Models.Ingredients\r\n    ingredientsSettings: Models.IngredientsSettings\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nclass FusionIngredientsDataTableProvider implements DataTables.DataTableProvider<Models.Demon> {\r\n\r\n    pageSize: number = 25;\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        return [{ headerContent: \"Demon\", sortSpec: { sortType: \"string\" } },\r\n        { headerContent: \"Level\", sortSpec: { sortType: \"number\" } },\r\n        { headerContent: \"Race\", sortSpec: { sortType: \"string\" } },\r\n        { headerContent: \"Must Use in Fusion\", headerProps: { width: 70, align: \"center\" } },\r\n        { headerContent: \"Can Use Multiple per Recipe\", headerProps: { width: 120, align: \"center\" } },\r\n        {}];\r\n    }\r\n\r\n    getRowData(): Models.Demon[] {\r\n        return this.rowData;\r\n    }\r\n\r\n    renderRow(rowData: Models.Demon): JSX.Element {\r\n        return <React.Fragment>\r\n            <TableCell>\r\n                {rowData.name}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.lvl}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.race}\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.mustUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.multipleUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell>\r\n                <RemoveDemonButton demonId={rowData.id} onRemoveIngredient={this.onRemoveIngredient} />\r\n            </TableCell>\r\n        </React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.Demon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.name; }\r\n            case 1: { \r\n                return rowData.lvl; }\r\n            case 2: { \r\n                return rowData.race; }\r\n            default: {\r\n                return rowData.name; }\r\n        };\r\n    }\r\n\r\n    demonCompendium: DemonCompendium;\r\n    ingredients: Models.Ingredients;\r\n    ingredientsSettings: Models.IngredientsSettings;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n\r\n    rowData: Models.Demon[];\r\n\r\n    constructor(params: FusionIngredientsTableProps, rowData: Models.Demon[]) {\r\n        this.demonCompendium = params.demonCompendium;\r\n        this.ingredients = params.ingredients;\r\n        this.ingredientsSettings = params.ingredientsSettings;\r\n        this.onRemoveIngredient = params.onRemoveIngredient;\r\n\r\n        this.rowData = rowData;\r\n    }\r\n}\r\nconst FusionIngredientsTable = (params: FusionIngredientsTableProps): JSX.Element => {\r\n    initializeIngredientsSettings(params.ingredients, params.ingredientsSettings);\r\n    const rowData: Models.Demon[] = React.useMemo(() => {\r\n        let rowData: Models.Demon[] = [];\r\n        for (const demonId in params.ingredients) {\r\n            const demon = params.demonCompendium.getDemonById(Number(demonId));\r\n            if (!demon) { continue; }\r\n            rowData.push(demon);\r\n        }\r\n        return rowData;\r\n    }, [params.ingredients, params.demonCompendium]);\r\n    const dataProvider = new FusionIngredientsDataTableProvider(params, rowData);\r\n    return <DataTable dataTableProvider={dataProvider}/>\r\n}\r\nexport default React.memo(FusionIngredientsTable);","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DataGrid, ColDef, CellParams, ValueGetterParams } from '@material-ui/data-grid';\r\nimport { useRef, useEffect } from 'react';\r\nimport styles from './ui-components.module.scss';\r\n\r\nfunction renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n    if (demon.isFused()) {\r\n        return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n    } else {\r\n        return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n    }\r\n}\r\n\r\nfunction renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let priorRecipes: JSX.Element = <React.Fragment/>;\r\n    if (demon.ingredients) {\r\n        let curRecipe: JSX.Element = <React.Fragment/>;\r\n        let isFirstLoop: boolean = true;\r\n        for (const ingDemon of demon.ingredients) {\r\n            priorRecipes = <React.Fragment>{priorRecipes}{renderRecipe(ingDemon)}</React.Fragment>;\r\n            const separator = isFirstLoop ? undefined : <React.Fragment> + </React.Fragment>;\r\n            curRecipe = <React.Fragment>{curRecipe}{separator}{renderDemonName(ingDemon)}</React.Fragment>\r\n            isFirstLoop = false;\r\n        }\r\n        const nameR = renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {priorRecipes}\r\n            <div className={styles.recipeLine}>\r\n                {curRecipe} = {nameR}\r\n            </div>\r\n        </React.Fragment>;\r\n    }\r\n    return priorRecipes;\r\n}\r\n\r\nfunction renderRecipeWrapper(cellParams: CellParams): JSX.Element {\r\n    return <div>{renderRecipe(cellParams.value as Models.FusedDemon)}</div>;\r\n}\r\n\r\nfunction getRecipeAsString(valueParam: ValueGetterParams): string {\r\n    return (valueParam.value as Models.FusedDemon).toBaseIngredientSearchString();\r\n}\r\n\r\nconst FusionResultDataGrid = (params: {\r\n    fusionResults: Models.FusionResults\r\n  }): JSX.Element => {\r\n    const { fusionResults } = params;\r\n\r\n    const columns: ColDef[] = [\r\n        { field: \"name\", headerName: \"Demon\", width: 120 },\r\n        { field: \"lvl\", headerName: \"Level\", width: 70, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n        { field: \"race\", headerName: \"Race\", width: 100, headerAlign: \"center\", resizable: false }\r\n      ]\r\n      const statsName: string[] = Models.Demon.statsName;\r\n      for (let i = 0; i < statsName.length; i++) {\r\n          columns.push(\r\n              { field: \"stat\" + i, headerName: statsName[i], width: 60, headerAlign: \"center\", resizable: false, disableColumnMenu: true}\r\n          );\r\n      }\r\n      columns.push(\r\n          { field: \"recipe\", headerName: \"Recipe\", flex: 1, renderCell: renderRecipeWrapper, valueGetter: getRecipeAsString});\r\n\r\n      const ingredientsAsRowsArray = [];\r\n      for (const size in fusionResults) {\r\n          if (Number(size) === 1) { continue; }\r\n          for (const demonId in fusionResults[size]) {\r\n              for (const fusedDemon of fusionResults[size][demonId]) {\r\n                  const {demon} = fusedDemon;\r\n                  const demonRow: any = {\r\n                      \"id\": 0,\r\n                      \"name\": demon.name,\r\n                      \"lvl\": demon.lvl,\r\n                      \"race\": demon.race,\r\n                      \"recipe\": fusedDemon\r\n                  };\r\n                  for (let i = 0; i < statsName.length; i++) {\r\n                      demonRow[\"stat\" + i] = demon.stats[i];\r\n                  }\r\n                  ingredientsAsRowsArray.push(demonRow);\r\n              }\r\n          }\r\n      }\r\n      ingredientsAsRowsArray.sort((a, b) => { return b.lvl - a.lvl});\r\n      let id: number = 1;\r\n      for (const row of ingredientsAsRowsArray) {\r\n          row.id = id;\r\n          id++;\r\n      }\r\n  \r\n    // This trick is needed to prevent the table from running into other content\r\n    const gridWrapperRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        const gridDiv = gridWrapperRef.current;\r\n        if (gridDiv){\r\n            const gridEl: HTMLDivElement = gridDiv.querySelector('div')!;\r\n            gridEl.style.height = \"\";\r\n            gridEl.style.width = \"\";\r\n        }\r\n    }, []);\r\n  \r\n    return (\r\n        <DataGrid\r\n            rows={ingredientsAsRowsArray}\r\n            rowHeight={75}\r\n            className={styles.fusionResultsTable}\r\n            columns={columns}\r\n            disableSelectionOnClick={true}\r\n            autoHeight={true}\r\n            rowsPerPageOptions={[10]}\r\n            density='compact'\r\n        />\r\n    );\r\n  };\r\n  export default React.memo(FusionResultDataGrid);","import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nimport styles from './settings-panel.module.scss';\r\n\r\nexport class Settings {\r\n    charLvl: number = 99;\r\n    maxIngredient: number = 3;\r\n    useTripleFusion: boolean = false;\r\n\r\n    useTripleFusionSettingIsVisible: boolean = false;\r\n}\r\n\r\nexport default function SettingsPanel(params: { visible: boolean, settings: Settings }) : JSX.Element {\r\n    const {visible, settings } = params;\r\n    const [charLvlFieldValue, setCharLvlFieldValue] = useState<number | string>(settings.charLvl);\r\n    const [maxIngFieldValue, setMaxIngFieldValue] = useState<number | string>(settings.maxIngredient);\r\n\r\n    function onSetCharLvl(newValue: number): void {\r\n        settings.charLvl = newValue;\r\n    }\r\n\r\n    function onSetMaxIng(newValue: number): void {\r\n        settings.maxIngredient = newValue;\r\n    }\r\n\r\n    function onSetUseTripleFusion(newValue: boolean): void {\r\n        settings.useTripleFusion = newValue;\r\n    }\r\n\r\n    const settingsPanelStyle: React.CSSProperties = {};\r\n    if (!visible) { settingsPanelStyle.display = \"none\"; }\r\n    return <div style={settingsPanelStyle} className={styles.settingsPanel}>\r\n        <h2>Settings</h2>\r\n        <NumberSettings\r\n            label=\"Character level\"\r\n            min={1}\r\n            max={99}\r\n            emptyFieldValue={99}\r\n            fieldStateValueAndSetter={[charLvlFieldValue, setCharLvlFieldValue]}\r\n            onSetSettings={onSetCharLvl} />\r\n        <NumberSettings\r\n            label=\"Max ingredients per recipe\"\r\n            min={2}\r\n            max={5}\r\n            emptyFieldValue={3}\r\n            fieldStateValueAndSetter={[maxIngFieldValue, setMaxIngFieldValue]}\r\n            onSetSettings={onSetMaxIng} />\r\n        {settings.useTripleFusionSettingIsVisible ?\r\n            <CheckboxSettings\r\n                label=\"Allow triple fusion\"\r\n                checked={settings.useTripleFusion}\r\n                onSetSettings={onSetUseTripleFusion}\r\n            /> : undefined}\r\n    </div>\r\n}\r\n\r\ntype NumberSettingsProp = {\r\n    label: string,\r\n    fieldStateValueAndSetter: [number | string, React.Dispatch<React.SetStateAction<number | string>>],\r\n    onSetSettings: (newValue: number) => void,\r\n    min: number,\r\n    max: number,\r\n    emptyFieldValue: number\r\n}\r\nfunction NumberSettings(params: NumberSettingsProp): JSX.Element {\r\n    const {label, fieldStateValueAndSetter: stateValueAndSetter, onSetSettings, min, max, emptyFieldValue} = params;\r\n    const [stateValue, stateSetter] = stateValueAndSetter;\r\n\r\n    function onNumberFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let value: number | string = event.target.value;\r\n        if (value === \"\") {\r\n            stateSetter(\"\");\r\n            onSetSettings(emptyFieldValue);\r\n            return;\r\n        }\r\n        const valueAsNumber = Number(value);\r\n        if (valueAsNumber >= min && valueAsNumber <= max) {\r\n            stateSetter(valueAsNumber);\r\n            onSetSettings(valueAsNumber);\r\n        }\r\n    }\r\n    return <div className={`${styles.settingsLine} ${styles.numberSettings}`}>\r\n        <span className={styles.numberFieldLabel}>{label}</span>\r\n        <TextField\r\n            style={{ width: \"50px\" }}\r\n            type=\"number\"\r\n            InputLabelProps={{ shrink: true }}\r\n            inputProps={{ min: min, max: max, step: 1 }}\r\n            variant=\"outlined\"\r\n            value={stateValue}\r\n            onChange={onNumberFieldChange}\r\n        />\r\n    </div>;\r\n}\r\n\r\ntype CheckboxSettingsProps = {\r\n    label: string,\r\n    checked: boolean,\r\n    onSetSettings: (newValue: boolean) => void\r\n}\r\nfunction CheckboxSettings(params: CheckboxSettingsProps): JSX.Element {\r\n    const {label, checked, onSetSettings} = params;\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        onSetSettings(event.target.checked);\r\n    }\r\n\r\n    return <div className={`${styles.settingsLine}`}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    defaultChecked={checked}\r\n                    onChange={onCheckboxChange}\r\n                    color=\"default\"\r\n                />}\r\n            label={label} />\r\n    </div>;\r\n}","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by entering level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        const acceptedKeys: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let keyIsAccepted: boolean = false;\r\n        for (const acceptedKey of acceptedKeys) {\r\n            if (key === acceptedKey) {\r\n                keyIsAccepted = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!keyIsAccepted) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport FusionIngredientsTable from './ingredients-table';\r\nimport FusionResultDataGrid from './fusion-result-datagrid';\r\nimport SettingsPanel, { Settings } from './settings-panel';\r\nimport DemonAdder from './demon-adder';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport styles from './fusion-recommender.module.scss';\r\n\r\nconst MAX_FUSION_INGREDIENT_HARD_CAP = 7;\r\n\r\nfunction calculateAllFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: Settings): Models.FusionResults {\r\n  const myFusionResults: Models.FusionResults = {};\r\n  for (let size = 1; size <= settings.maxIngredient && size <= MAX_FUSION_INGREDIENT_HARD_CAP; size++) {\r\n    myFusionResults[size] = {};\r\n  }\r\n\r\n  for (const demonId in ingredients) {\r\n    const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n    if (!demon) { continue; }\r\n    const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n    if (!myFusionResults[1][demon.id]) {\r\n      myFusionResults[1][demon.id] = [];\r\n    }\r\n    myFusionResults[1][demon.id].push(fusedDemon);\r\n  }\r\n\r\n  for (let ingCountR = 2; ingCountR <= settings.maxIngredient && ingCountR <= MAX_FUSION_INGREDIENT_HARD_CAP; ingCountR++) {\r\n    for (let ingCountA = ingCountR - 1; ingCountA >= (ingCountR / 2); ingCountA--) {\r\n      const ingCountB: number = ingCountR - ingCountA;\r\n      const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n      for (const idA in myFusionResults[ingCountA]) {\r\n        if (myFusionResults[ingCountA][idA].length === 0) { continue; }\r\n        const speciesA: Models.Demon = myFusionResults[ingCountA][idA][0].demon;\r\n        for (const idB in myFusionResults[ingCountB]) {\r\n          if (myFusionResults[ingCountB][idB].length === 0) { continue; }\r\n          const speciesB: Models.Demon = myFusionResults[ingCountB][idB][0].demon;\r\n\r\n          // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n          if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n          const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n          if (!speciesR) { continue; }\r\n          if (!postSpeciesFusionCheck(myFusionResults, settings, speciesR, ingCountR, [speciesA, speciesB])) { continue; }\r\n\r\n          const resultFusedDemons: Models.FusedDemon[] = crossFuseIngredients(speciesR, myFusionResults[ingCountA][idA], myFusionResults[ingCountB][idB]);\r\n          if (!myFusionResults[ingCountR][speciesR.id]) { myFusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            myFusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        speciesUsedAsA[speciesA.id] = true;\r\n      }\r\n    }\r\n\r\n    if (settings.useTripleFusion) {\r\n      calculateTripleFusionCombinations(ingredients, demonCompendium, settings, myFusionResults, ingCountR);\r\n    }\r\n  }\r\n\r\n  // Re-traverse the entire results and fully purge fusion recipes that produce demons of lower level\r\n  for (const ingCount in myFusionResults) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    for (const id in myFusionResults[ingCount]) {\r\n      const demonAry: Models.FusedDemon[] = myFusionResults[ingCount][id];\r\n      const filteredDemonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() })\r\n      myFusionResults[ingCount][id] = filteredDemonAry;\r\n    }\r\n  }\r\n\r\n  return myFusionResults;\r\n}\r\n\r\nfunction calculateTripleFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: Settings, fusionResults: Models.FusionResults, ingCountR: number): void {\r\n  let ingCounts: number[] = [];\r\n  while (getNextTripleFusionIngCounts(ingCounts, ingCountR)) {\r\n    const [ingCountA, ingCountB, ingCountC] = ingCounts;\r\n    const alreadyCalculatedAsA: { [id: number]: boolean } = {};\r\n    for (const idA in fusionResults[ingCountA]) {\r\n      if (fusionResults[ingCountA][idA].length === 0) { continue; }\r\n      const speciesA: Models.Demon = fusionResults[ingCountA][idA][0].demon;\r\n\r\n      const alreadyCalculatedAsB: { [id: number]: boolean } = {};\r\n      for (const idB in fusionResults[ingCountB]) {\r\n        if (alreadyCalculatedAsA[Number(idB)]) { continue; }\r\n        if (fusionResults[ingCountB][idB].length === 0) { continue; }\r\n        const speciesB: Models.Demon = fusionResults[ingCountB][idB][0].demon;\r\n\r\n        for (const idC in fusionResults[ingCountC]) {\r\n          if (alreadyCalculatedAsA[Number(idC)]) { continue; }\r\n          if (alreadyCalculatedAsB[Number(idC)]) { continue; }\r\n          if (fusionResults[ingCountC][idC].length === 0) { continue; }\r\n          const speciesC: Models.Demon = fusionResults[ingCountC][idC][0].demon;\r\n          const speciesR: Models.Demon | undefined = demonCompendium.tripleFuseDemons(speciesA, speciesB, speciesC);\r\n          if (!speciesR) { continue; }\r\n          if (!postSpeciesFusionCheck(fusionResults, settings, speciesR, ingCountR, [speciesA, speciesB, speciesC])) { continue; }\r\n          const resultFusedDemons: Models.FusedDemon[] = crossFuseIngredients(speciesR, fusionResults[ingCountA][idA], fusionResults[ingCountB][idB], fusionResults[ingCountC][idC]);\r\n          if (!fusionResults[ingCountR][speciesR.id]) { fusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            fusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        alreadyCalculatedAsB[speciesB.id] = true;\r\n      }\r\n      alreadyCalculatedAsA[speciesA.id] = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNextTripleFusionIngCounts(fusionIngCounts: number[], ingCountR: number): boolean {\r\n  if (ingCountR < 3) { return false; }\r\n  if (fusionIngCounts.length < 3) { \r\n    fusionIngCounts[0] = ingCountR - 2;\r\n    fusionIngCounts[1] = 1;\r\n    fusionIngCounts[2] = 1;\r\n    return true;\r\n  }\r\n  for (let i = fusionIngCounts.length - 2; i >= 0; i--) {\r\n    const j: number = i + 1;\r\n    if (fusionIngCounts[i] - fusionIngCounts[j] >= 2) {\r\n      fusionIngCounts[i] = fusionIngCounts[i] - 1;\r\n      fusionIngCounts[j] = fusionIngCounts[j] + 1;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction postSpeciesFusionCheck(fusionResults: Models.FusionResults, settings: Settings, speciesR: Models.Demon, ingCountR: number, speciesIngs: Models.Demon[]): boolean {\r\n  // throw out inefficient fusions that the user can already make using fewer ingredients\r\n  let canBeMadeWithLessIngredient: boolean = false;\r\n  for (let sizeCheck = ingCountR - 1; sizeCheck >= 1; sizeCheck--) {\r\n    if (fusionResults[sizeCheck][speciesR.id]) {\r\n      canBeMadeWithLessIngredient = true;\r\n      break;\r\n    }\r\n  }\r\n  if (canBeMadeWithLessIngredient) { return false; }\r\n\r\n  if (speciesR.lvl > settings.charLvl) { return false; }\r\n\r\n  // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n  if (ingCountR === settings.maxIngredient) {\r\n    for (const speciesIng of speciesIngs) {\r\n      if (speciesR.lvl < speciesIng.lvl) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction crossFuseIngredients(resultSpecies: Models.Demon, ...ingredients: Models.FusedDemon[][]): Models.FusedDemon[] {\r\n  const indeces: number[] = [];\r\n  const ret: Models.FusedDemon[] = [];\r\n  for (let i = 0; i < ingredients.length; i++) { indeces.push(0); }\r\n  while (true) {\r\n    const fusedDemonIngredientsHistory: Models.FusedDemon[] = [];\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      fusedDemonIngredientsHistory.push(ingredients[i][indeces[i]]);\r\n    }\r\n    ret.push(new Models.FusedDemon(resultSpecies, fusedDemonIngredientsHistory));\r\n\r\n    // Increment the indeces\r\n    let hasCarry: boolean = true;\r\n    for (let i = indeces.length - 1; i >= 0; i--) {\r\n      let index: number = indeces[i];\r\n      if (hasCarry) { index = index + 1; hasCarry = false; }\r\n      if (index >= ingredients[i].length) { index = 0; hasCarry = true; }\r\n      indeces[i] = index;\r\n      if (!hasCarry) { break; }\r\n    }\r\n    if (hasCarry) { break; }\r\n  }\r\n  return ret;\r\n}\r\n\r\nlet ingredients: Models.Ingredients;\r\nlet setIngredients: React.Dispatch<React.SetStateAction<Models.Ingredients>>;\r\nfunction removeDemonFromIngredients(demonId: number): void {\r\n  const newIngredients = { ...ingredients };\r\n  delete newIngredients[demonId];\r\n  setIngredients(newIngredients);\r\n}\r\nlet ingredientsSettings: Models.IngredientsSettings = {};\r\nlet settings: Settings;\r\n\r\nexport default function FusionRecommender(params: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = params;\r\n  [ingredients, setIngredients] = useState<Models.Ingredients>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>({});\r\n  let [settingsIsVisible, setSettingsIsVisible] = useState<boolean>(false);\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  if (!settings) {\r\n    settings = new Settings();\r\n    settings.useTripleFusion = demonCompendium.usePersonaTripleFusionMechanic;\r\n    settings.useTripleFusionSettingIsVisible = demonCompendium.usePersonaTripleFusionMechanic;\r\n  }\r\n\r\n  const fusionResultSectionHeader = useRef<HTMLHeadingElement>(null);\r\n\r\n  function addDemonToIngredients(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function onCalculateButtonClick(): void {\r\n    setFusionResults(calculateAllFusionCombinations(ingredients, demonCompendium, settings));\r\n  }\r\n\r\n  function onSettingsButtonClick(): void {\r\n    setSettingsIsVisible(!settingsIsVisible);\r\n    console.log(ingredientsSettings);\r\n  }\r\n\r\n  function onResetButtonClick(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n    ingredientsSettings = {};\r\n\r\n    const newFusionResults = {};\r\n    setFusionResults(newFusionResults);\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.fusionRecommender}>\r\n      <h2>Add demons to use as fusion ingredients</h2>\r\n      <div className={styles.addDemonsAndButtonsRowContainer}>\r\n        <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredients} />\r\n        <div className={styles.buttonsRow}>\r\n          <Button className={styles.calculateButton} variant=\"outlined\" onClick={onCalculateButtonClick} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n          <Button className={styles.settingsButton} variant=\"outlined\" onClick={onSettingsButtonClick}><SettingsIcon /></Button>\r\n          <Button className={styles.resetButton} variant=\"outlined\" onClick={onResetButtonClick}><ReplayIcon />Reset</Button>\r\n        </div>\r\n      </div>\r\n      <SettingsPanel key={resetterKey} visible={settingsIsVisible} settings={settings} />\r\n      <h2>Fusion Ingredients</h2>\r\n      <FusionIngredientsTable \r\n        demonCompendium={demonCompendium}\r\n        ingredients={ingredients}\r\n        ingredientsSettings={ingredientsSettings}\r\n        onRemoveIngredient={removeDemonFromIngredients} />\r\n      <h2 ref={fusionResultSectionHeader}>Results</h2>\r\n      <FusionResultDataGrid fusionResults={fusionResults} />\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionRecommender from './ui-components/fusion-recommender';\r\n\r\nimport './App.scss';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\",\r\n    fontSize: 14\r\n  }\r\n});\r\n\r\n// function loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n//   const demonJsonPromise = import(\"./desu2/demons.json\").then(importedJson => importedJson.default);\r\n//   const fusionChartJsonPromise = import(\"./desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n//   const presetJsonPromise = import(\"./desu2/presets.json\").then(importedJson => importedJson.default);\r\n//   Promise.all([demonJsonPromise, fusionChartJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n//     const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n//     callback(newDemonCompendium);\r\n//   })\r\n// }\r\n\r\nfunction loadPersona4GoldenDemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./p4g/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./p4g/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const [demonCompendium, setDemonCompendium] = useState<DemonCompendium | undefined>(undefined);\r\n\r\n  useEffect(()=>{\r\n    if (!demonCompendium) {\r\n      loadPersona4GoldenDemonCompendium(setDemonCompendium);\r\n    }\r\n  }, [demonCompendium]);\r\n\r\n  let fusionRecommender: JSX.Element = (demonCompendium) ? <FusionRecommender demonCompendium={demonCompendium} /> : <React.Fragment />;\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n        <header className=\"App-header\">\r\n          <h1>Megami Tensei Fusion Recommender</h1>\r\n        </header>\r\n        {fusionRecommender}\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__2j3Dm\",\"subAdderContainer\":\"ui-components_subAdderContainer__wG2As\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1OXHc\",\"addDemonButton\":\"ui-components_addDemonButton__1BBcP\",\"removeDemonButtonIcon\":\"ui-components_removeDemonButtonIcon__2ga3t\",\"fusionResultsTable\":\"ui-components_fusionResultsTable__2Hl-s\",\"baseIngredientName\":\"ui-components_baseIngredientName__18Eu_\",\"recipeLine\":\"ui-components_recipeLine__12QIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionRecommender\":\"fusion-recommender_fusionRecommender__zW_X6\",\"addDemonsAndButtonsRowContainer\":\"fusion-recommender_addDemonsAndButtonsRowContainer__3PpcL\",\"buttonsRow\":\"fusion-recommender_buttonsRow__2bfHg\",\"calculateButton\":\"fusion-recommender_calculateButton__31QNj\",\"shining\":\"fusion-recommender_shining__1og21\",\"settingsButton\":\"fusion-recommender_settingsButton__2v9Cz\",\"resetButton\":\"fusion-recommender_resetButton__3V_j0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPanel\":\"settings-panel_settingsPanel__1T-fU\",\"settingsLine\":\"settings-panel_settingsLine__nhSDF\",\"numberSettings\":\"settings-panel_numberSettings__29pFN\",\"numberFieldLabel\":\"settings-panel_numberFieldLabel__1csHC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paperContainer\":\"data-table_paperContainer__1HiKS\",\"tableContainer\":\"data-table_tableContainer__2tNCz\",\"header\":\"data-table_header__1apdC\",\"tableBody\":\"data-table_tableBody__lN2In\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkBox\":\"ingredients-table_checkBox__G-IIC\",\"removeDemonButton\":\"ingredients-table_removeDemonButton__1uK5F\",\"removeDemonButtonIcon\":\"ingredients-table_removeDemonButtonIcon__mVoSL\"};"],"sourceRoot":""}
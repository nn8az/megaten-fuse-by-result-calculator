{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/data-table.tsx","ui-components/ingredients-table.tsx","ui-components/minor-ui-components.tsx","ui-components/results-table.tsx","ui-components/settings-panel.tsx","ui-components/demon-adder.tsx","ui-components/recipes-table.tsx","demon-displayer.tsx","fusion-calculator.tsx","app.tsx","index.tsx","ui-components/scss/results-table.module.scss","fusion-calculator.module.scss","ui-components/scss/ingredients-table.module.scss","ui-components/scss/settings-panel.module.scss","ui-components/scss/ui-components.module.scss","ui-components/scss/recipes-table.module.scss","demon-displayer.module.scss","ui-components/scss/data-table.module.scss","ui-components/scss/minor-ui-components.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","rank","specialRecipe","this","statsName","FusedDemon","demon","ingredients","length","ret","ingDemon","getBaseIngredients","parentIngCount","getBaseIngredientsCounts","baseDemonId","Object","keys","join","values","map","getHighestIngredientLvl","highestIngLvl","DemonsPreset","caption","demons","DemonCompendium","demonListJson","fusionChartJson","fusionSettingsJson","presetJson","demonsAry","normalFusionChart","tripleFusionChart","elementsMap","elementFusionChart","demonsPresets","gameHasElements","_usePersonaSameRaceFusionMechanic","_usePersonaTripleFusionMechanic","disableSameDemonFusion","idMap","nameMap","raceIdMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseSettings","parseFusionChart","prepRaceLvlInfo","parsePresets","demonA","demonB","isElement","fuseDemonWithElement","fuseDemonSameRaceNoElement","fuseDemonDiffRaceNoElement","demonC","sort","x","y","getRaceOrder","demonWeak","demonMid","demonStrong","intermediateRace","getFusionRace","resultRace","getTripleFusionRace","resultLvlTable","getLvlTableForRace","resultLvlTest","resultLvl","findResultLvlFromLvlTable","demonResult","getDemonFromRaceLvl","resultLvlIndex","indexOf","demonName","getDemonByName","randomDemonIndex","Math","floor","random","elementsIds","elementsCount","randomElementIdIndex","randomElementId","Number","testGetDemon","results","i","demonR","fuseDemons","console","log","results2","j","tripleFuseDemons","push","demonsJson","Models","sameRaceFusionMechanic","tripleFusionMechanic","Boolean","row","raceFusionTable","col","chartsToUpdate","raceA","races","raceB","raceC","chart","specialRecipes","elements","elementIdIndexMap","elementName","elementFusionTable","raceId","elementId","elementIndex","presetsJson","presets","preset","presetModel","demon1","demon2","excludeDemonsWithSpecialRecipe","lvlTable","lvlToCheck","isTripleFusion","index","raceR","lvlTableR","lvlResultTest","lvlR","elementNameR","filter","element","demonRankChange","undefined","resultRank","DataTable","params","maxPage","dataTableProvider","React","useState","page","setPage","sortByCol","setSortByCol","sortDirection","setSortDirection","sortType","setSortType","pageSize","colDefs","getColumnDefinition","preIdRowData","getAllRowsData","totalRowCount","Fragment","banner","renderBanner","ceil","rowData","rd","data","getSortValue","bind","sortMult","comparitor","numberComparitor","stringComparitor","a","b","valA","valB","paginizedRowData","headerCells","colNum","colDef","headerContent","sortSpec","buildSortableHeaderCellContent","TableCell","headerProps","renderedRows","TableRow","renderRow","paperContainerClassName","styles","paperContainer","className","Paper","elevation","TableContainer","tableContainer","Table","TableHead","header","TableBody","tableBody","Pagination","count","onChange","event","value","size","headerInnerContent","colSortType","_sortByCol","_sortDirection","_sortType","TableSortLabel","active","direction","onClick","createSortHandler","setOrderBy","nextSortDirection","IngredientsSettingsEnum","WarningBannerCore","icon","warningBanner","message","WarningBanner","memo","RemoveDemonButton","IconButton","onRemoveIngredient","demonId","removeDemonButton","removeDemonButtonIcon","CheckboxSetting","setting","ingredientsSettings","defaultChecked","mustUse","multipleUse","Checkbox","checkBox","checked","target","color","FusionIngredientsDataTableProvider","allRowsData","demonCompendium","nameColumnHeader","raceColumnHeader","width","align","warningIcon","IngredientsTable","initializeIngredientsSettings","useMemo","getDemonById","dataProvider","dataTable","FusionResultsDataTableProvider","onRecipesButtonClick","fusionResults","recipesButtonHandler","columnCount","nameColumn","lvlColumn","raceColumn","statColumn","ingredientsColumn","resultsAsRowsArray","ingCount","fusedDemon","renderedRow","keyId","stat","Button","variant","recipeButton","ResultsTable","props","onOpenDemonRecipes","UserSettings","charLvl","maxIngredient","useTripleFusion","useTripleFusionSettingIsVisible","SettingsPanel","eventHandlers","settings","isVisible","setIsVisible","charLvlFieldValue","setCharLvlFieldValue","maxIngFieldValue","setMaxIngFieldValue","toggleVisibility","settingsPanelStyle","height","style","settingsPanel","paper","NumberSettings","label","min","max","emptyFieldValue","fieldStateValueAndSetter","onSetSettings","newValue","CheckboxSettings","stateValueAndSetter","stateValue","stateSetter","settingsLine","numberSettings","numberFieldLabel","TextField","type","InputLabelProps","shrink","inputProps","step","valueAsNumber","FormControlLabel","control","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","selection","onKeyPress","key","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","keyIsAccepted","preventDefault","stopPropagation","valueSetterFunc","lvlFieldsContainer","selectedOption","setSelectedOption","addDemonButton","renderDemonName","isFused","baseIngredientName","renderRecipe","priorRecipes","curRecipe","isFirstLoop","separator","nameR","Divider","light","DemonCard","Card","recipeCard","CardContent","RecipesTable","setFilter","filteredRecipesAry","filterMap","filterOption","recipesAry","filteredAry","ingDemonsCount","filterCheckList","ingDemonId","filterRecipesAry","filterOptions","currFilter","ingDemonsMap","ingDemons","createFilterOptions","componentContainer","multiple","filterField","defaultValue","filterSelectedOptions","pagination","hidden","recipeCardsContainer","DemonDisplayer","demonIdStr","useParams","history","useHistory","isNaN","goBackUrlPath","fusionResultsSection","section","Label","text","calculateAllFusionCombinations","myFusionResults","ingCountR","ingCountA","ingCountB","speciesUsedAsA","idA","speciesA","idB","speciesB","speciesR","filterDemonsAfterSpeciesFusion","resultingFusedDemons","crissCrossFusedDemons","calculateTripleFusionCombinations","mustUseDemons","ingSettings","prepareIngredientsSettingsForFinalFilter","filterFunction","filterDemonsAfterCalculation","demonAry","isWeakerThanIngredients","ingCounts","getNextTripleFusionIngCounts","ingCountC","alreadyCalculatedAsA","alreadyCalculatedAsB","idC","speciesC","resultFusedDemons","fusionIngCounts","speciesIngs","canBeMadeWithLessIngredient","sizeCheck","speciesIng","filterDemonsAfterCrissCross","baseIngCount","myMustUseDemons","demonBaseIngCount","resultSpecies","indeces","fusedDemonIngredientsHistory","hasCarry","hasFusionResult","initializeUserSettings","usePersonaTripleFusionMechanic","FusionCalculator","setIngredients","setFusionResults","resetterKey","setResetterKey","routeMatcher","useRouteMatch","nonRenderingStates","settingsPanelEventHandlers","refResultsTable","useRef","useEffect","current","scrollIntoView","behavior","removeDemonFromIngredientsHandler","useCallback","newIngredients","path","url","fusionCalculator","addDemonsAndButtonsRowContainer","buttonsRow","calculateButton","disabled","settingsButton","resetButton","ref","Game","theme","createMuiTheme","palette","typography","fontFamily","fontSize","loadPersona4GoldenDemonCompendium","setLoadedCompendiumCallback","demonJsonPromise","importedJson","default","fusionChartJsonPromise","settingsJsonPromise","Promise","all","loadedJsons","newDemonCompendium","loadGameData","game","person4Golden","devilSurvivor2","callback","presetJsonPromise","loadDesu2DemonCompendium","urlParamToGameMap","p4g","desu2","App","urlParams","setDemonCompendium","currentGame","setCurrentGame","changeGameTabHandler","gameId","gameStrCode","getGameUrlPath","gameFromUrlParam","ThemeProvider","CssBaseline","Tabs","Tab","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b6202a01.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    rank: number = 0;\r\n    specialRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredients?: FusedDemon[];\r\n\r\n    constructor(demon: Demon, ingredients?: FusedDemon[]) {\r\n        this.demon = demon;\r\n        this.ingredients = ingredients;\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        if (!this.ingredients) { return false; }\r\n        return this.ingredients.length > 0;\r\n    }\r\n\r\n    public getBaseIngredients(): { [id: number]: Demon } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: Demon } = {};\r\n            for (const ingDemon of this.ingredients) {\r\n                ret = {...ret, ...ingDemon.getBaseIngredients()};\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: Demon } = {};\r\n            ret[this.demon.id] = this.demon;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public getBaseIngredientsCounts(): { [id: number]: number } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: number } = {};\r\n            for (const parentDemon of this.ingredients) {\r\n                const parentIngCount = parentDemon.getBaseIngredientsCounts();\r\n                for (const baseDemonId in parentIngCount) {\r\n                    ret[baseDemonId] = (ret[baseDemonId] || 0) + parentIngCount[baseDemonId];\r\n                }\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: number } = {};\r\n            ret[this.demon.id] = 1;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public toBaseIngredientsIdCode(): string {\r\n        return Object.keys(this.getBaseIngredients()).join(\"-\");\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        return Object.values(this.getBaseIngredients()).map(demon => demon.name).join(\" \");\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredients) {\r\n            for (const ingDemon of this.ingredients) {\r\n                let highestIngLvl: number = ingDemon.getHighestIngredientLvl();\r\n                if (highestIngLvl > lvl) { lvl = highestIngLvl; }\r\n            }\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport type Ingredients = { [demonId: number]: boolean };\r\nexport type IngredientsSettings = { [demonId: number]: { mustUse: boolean, multipleUse: boolean } };\r\nexport type MustUseDemonsMap = {[demonId: number]: boolean};\r\nexport type FusionResults = { [ingredientCount: number]: { [id: string]: FusedDemon[] } };","import * as Models from './data-models';\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionSettingsJson = {\r\n    sameRaceFusionMechanic?: string,\r\n    tripleFusionMechanic?: string,\r\n    disableSameDemonFusion?: boolean,\r\n}\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    raceFusionTable: string[][],\r\n    \r\n    elements?: string[],\r\n    elementFusionTable?: number[][],\r\n    specialRecipes?: { [resultName: string]: string[] }\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetsJson = { presets: Preset[] };\r\n\r\nexport class DemonCompendium {\r\n    private demonsAry: Models.Demon[] = [];\r\n    private normalFusionChart: { [race: string]: { [race: string]: string } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private tripleFusionChart: { [race: string]: { [race: string]: string } } = {};\r\n    private elementsMap: { [demonId: number]: Models.Demon } = {};\r\n    private elementFusionChart: { [race: string]: { [elementId: string]: number } } = {};\r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n\r\n    private gameHasElements: boolean = false;\r\n    private _usePersonaSameRaceFusionMechanic: boolean = false;\r\n    private _usePersonaTripleFusionMechanic: boolean = false;\r\n    private disableSameDemonFusion: boolean = false;\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceIdMap: { [race: string]: number } = {}\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJson: DemonJson, fusionChartJson: FusionChartJson, fusionSettingsJson?: FusionSettingsJson, presetJson?: PresetsJson) {\r\n        this.parseDemons(demonListJson);\r\n        this.prepDemonIds();\r\n\r\n        if (fusionSettingsJson) {\r\n            this.parseSettings(fusionSettingsJson);\r\n        }\r\n\r\n        this.parseFusionChart(fusionChartJson);\r\n        this.prepRaceLvlInfo();\r\n        \r\n        if (presetJson) {\r\n            this.parsePresets(presetJson);\r\n        }\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonsAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public get usePersonaTripleFusionMechanic(): boolean {\r\n        return this._usePersonaTripleFusionMechanic;\r\n    }\r\n\r\n    public get usePersonaSameRaceFusionMechanic(): boolean {\r\n        return this._usePersonaSameRaceFusionMechanic;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.id === demonB.id && this.disableSameDemonFusion) { return undefined; }\r\n        \r\n        if (this.isElement(demonA) && this.isElement(demonB)) {\r\n            return undefined;\r\n        } else if (this.isElement(demonA) || this.isElement(demonB)) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoElement(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    public tripleFuseDemons(demonA: Models.Demon, demonB: Models.Demon, demonC: Models.Demon): Models.Demon | undefined {\r\n        if (this.disableSameDemonFusion) {\r\n            if (demonA.id === demonB.id ||\r\n                demonA.id === demonC.id ||\r\n                demonB.id === demonC.id) { return undefined; }\r\n        }\r\n\r\n        const [demonWeak, demonMid, demonStrong] = [demonA, demonB, demonC].sort((x, y) => (x.lvl !== y.lvl) ? x.lvl - y.lvl : this.getRaceOrder(y.race) - this.getRaceOrder(x.race)); // sort from lowest to highest lv. If lvs are the same, sort by race order from highest to lowest.\r\n        const intermediateRace: string | undefined = this.getFusionRace(demonWeak.race, demonMid.race);\r\n        if (!intermediateRace) { return undefined; }\r\n        const resultRace: string | undefined = this.getTripleFusionRace(intermediateRace, demonStrong.race);\r\n        if (!resultRace) { return undefined; }\r\n        const resultLvlTable: number[] = this.getLvlTableForRace(resultRace, true);\r\n        const resultLvlTest: number = (demonWeak.lvl + demonMid.lvl + demonStrong.lvl + 12.75) / 3;\r\n        let resultLvl: number = this.findResultLvlFromLvlTable(resultLvlTable, resultLvlTest, true);\r\n        let demonResult: Models.Demon | undefined = this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n        if (!demonResult) { return undefined; }\r\n        if (demonResult.id !== demonWeak.id && demonResult.id !== demonMid.id && demonResult.id !== demonStrong.id) {\r\n            return demonResult;\r\n        } else {\r\n            let resultLvlIndex = resultLvlTable.indexOf(resultLvl);\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            if (resultLvlIndex + 1 < resultLvlTable.length) {\r\n                resultLvl = resultLvlTable[resultLvlIndex + 1];\r\n                return this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private testGetDemon(demonName?: string): Models.Demon | undefined {\r\n        if (demonName) { return this.getDemonByName(demonName); }\r\n        if (this.demonsAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonsAry.length);\r\n        return this.demonsAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        const elementsIds = Object.keys(this.elementsMap);\r\n        const elementsCount = elementsIds.length;\r\n        if (elementsCount === 0) { return undefined };\r\n        const randomElementIdIndex: number = Math.floor(Math.random() * elementsCount);\r\n        const randomElementId: number = Number(elementsIds[randomElementIdIndex]);\r\n        return this.elementsMap[randomElementId];\r\n    }\r\n\r\n    private testFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [name: string]: Models.Demon} = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            const demonR = this.fuseDemons(demon, demonB);\r\n            if (!demonR) {continue;}\r\n            results[demonB.name] = demonR;\r\n        }\r\n        \r\n        console.log(demon);\r\n        console.log(results);\r\n    }\r\n\r\n    private testTripleFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [resultName: string]: Models.Demon[][] } = {};\r\n        const results2: { [resultName: string]: { [ing2Name: string]: string[] } } = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            for (let j = i; j < this.demonsAry.length; j++) {\r\n                const demonC = this.demonsAry[j];\r\n                const demonR = this.tripleFuseDemons(demon, demonB, demonC);\r\n                if (!demonR) {continue;}\r\n                if (!results[demonR.name]) { results[demonR.name] = []; }\r\n                if (!results2[demonR.name]) { results2[demonR.name] = {}; }\r\n                if (!results2[demonR.name][demonB.name]) { results2[demonR.name][demonB.name] = []; }\r\n                if (!results2[demonR.name][demonC.name]) { results2[demonR.name][demonC.name] = []; }\r\n                results[demonR.name].push([demonB, demonC]);\r\n                results2[demonR.name][demonB.name].push(demonC.name);\r\n                results2[demonR.name][demonC.name].push(demonB.name);\r\n            }\r\n        }\r\n        console.log(demon);\r\n        console.log(results);\r\n        console.log(results2);\r\n    }\r\n\r\n    private parseDemons(demonsJson: DemonJson): void {\r\n        Models.Demon.statsName = demonsJson.statsName;\r\n        const demons = demonsJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonsAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseSettings(fusionSettingsJson: FusionSettingsJson): void {\r\n        this._usePersonaSameRaceFusionMechanic = fusionSettingsJson.sameRaceFusionMechanic === \"persona\";\r\n        this._usePersonaTripleFusionMechanic = fusionSettingsJson.tripleFusionMechanic === \"persona\";\r\n        this.disableSameDemonFusion = Boolean(fusionSettingsJson.disableSameDemonFusion);\r\n    }\r\n\r\n    private parseFusionChart(fusionChartJson: FusionChartJson): void {\r\n        for (let row: number = 0; row < fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const chartsToUpdate = [];\r\n                if (this._usePersonaTripleFusionMechanic) {\r\n                    if (col < row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                    } else if (col === row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    } else {\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    }\r\n                } else {\r\n                    if (col > row) { \r\n                        continue;\r\n                    }\r\n                    chartsToUpdate.push(this.normalFusionChart);\r\n                }\r\n\r\n                const raceA: string = fusionChartJson.races[row];\r\n                const raceB: string = fusionChartJson.races[col];\r\n                const raceC: string = fusionChartJson.raceFusionTable[row][col];\r\n\r\n                // Set the .raceA.raceB property of the parsed fusion table\r\n                for (const chart of chartsToUpdate) {\r\n                    if (!chart[raceA]) {\r\n                        chart[raceA] = {};\r\n                    }\r\n                    chart[raceA][raceB] = raceC;\r\n\r\n                    // Set the .raceB.raceA property of the parsed fusion table\r\n                    if (!chart[raceB]) {\r\n                        chart[raceB] = {};\r\n                    }\r\n                    chart[raceB][raceA] = raceC;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fusionChartJson.specialRecipes) {\r\n            for (const demonName in fusionChartJson.specialRecipes) {\r\n                const demon = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demon.specialRecipe = true;\r\n                demon.rank = 1000;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < fusionChartJson.races.length; i++) {\r\n            this.raceIdMap[fusionChartJson.races[i]] = i;\r\n        }\r\n\r\n        if (fusionChartJson.elements && fusionChartJson.elements.length > 0) {\r\n            this.gameHasElements = true;\r\n            const elementIdIndexMap: { [elementId: number]: number } = {};\r\n            for (let i = 0; i < fusionChartJson.elements.length; i++) {\r\n                const elementName = fusionChartJson.elements[i];\r\n                const demon = this.getDemonByName(elementName);\r\n                if (!demon) { continue; };\r\n                this.elementsMap[demon.id] = demon;\r\n                elementIdIndexMap[demon.id] = i;\r\n            }\r\n\r\n            if (fusionChartJson.elementFusionTable) {\r\n                for (const race in this.raceIdMap) {\r\n                    this.elementFusionChart[race] = {};\r\n                    const raceId: number = this.raceIdMap[race];\r\n                    for (const elementId in this.elementsMap) {\r\n                        const elementIndex = elementIdIndexMap[elementId];\r\n                        if (fusionChartJson.elementFusionTable[raceId]) {\r\n                            this.elementFusionChart[race][elementId] = fusionChartJson.elementFusionTable[raceId][elementIndex];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private parsePresets(presetsJson: PresetsJson): void {\r\n        if (!presetsJson) { return; }\r\n        for (const preset of presetsJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonsAry = this.demonsAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonsAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonsAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonsAry) {\r\n            if (demon.specialRecipe) { continue; }\r\n            demon.rank = this.getLvlTableForRace(demon.race, true).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string, excludeDemonsWithSpecialRecipe?: boolean): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        const lvlTable: number[] = [];\r\n        for (const lvl in this.raceLvlDemonMap[race]) {\r\n            if (excludeDemonsWithSpecialRecipe && this.raceLvlDemonMap[race][lvl].specialRecipe) {\r\n                continue;\r\n            }\r\n            lvlTable.push(Number(lvl));\r\n        }\r\n        return lvlTable;\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.normalFusionChart[raceA]) {\r\n            if (this.normalFusionChart[raceA][raceB]) {\r\n                return this.normalFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getTripleFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.tripleFusionChart[raceA]) {\r\n            if (this.tripleFusionChart[raceA][raceB]) {\r\n                return this.tripleFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getRaceOrder(race: string): number {\r\n        return this.raceIdMap[race];\r\n    }\r\n\r\n    private findResultLvlFromLvlTable(lvlTable: number[], lvlToCheck: number, isTripleFusion?: boolean) {\r\n        let index = 0;\r\n        for (let i = 0; i < lvlTable.length; i++) {\r\n            if (lvlToCheck > lvlTable[i]) {\r\n                index++;\r\n            }\r\n        }\r\n        if (index >= lvlTable.length) { \r\n            if (isTripleFusion) { return -1; }\r\n            index = lvlTable.length - 1 \r\n        };\r\n        return lvlTable[index];\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR, true);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const lvlResultTest = (demonB.lvl + demonA.lvl + 1) / 2;\r\n        const lvlR: number = this.findResultLvlFromLvlTable(lvlTableR, lvlResultTest);\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (this.gameHasElements) {\r\n            const elementNameR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n            if (!elementNameR) { return undefined; }\r\n            return this.getDemonByName(elementNameR);\r\n        } else if (this._usePersonaSameRaceFusionMechanic) {\r\n            const resultLvlTable = this.getLvlTableForRace(demonB.race, true).filter(lvl => lvl !== demonA.lvl);\r\n            let resultLvlIndex = -1;\r\n            for (const resultLvl of resultLvlTable) {\r\n                if (demonA.lvl + demonB.lvl >= 2 * resultLvl) { resultLvlIndex = resultLvlIndex + 1 }\r\n            }\r\n\r\n            if (resultLvlTable[resultLvlIndex] === demonB.lvl) {\r\n                resultLvlIndex = resultLvlIndex - 1;\r\n            }\r\n\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            const resultLvl = resultLvlTable[resultLvlIndex];\r\n            return this.getDemonFromRaceLvl(demonA.race, resultLvl);\r\n        }\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (this.isElement(demonA)) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (this.isElement(demonB)) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        }\r\n\r\n        const demonRankChange = (this.elementFusionChart[demon.race] || {})[element.id];\r\n        if (demonRankChange === undefined) { return undefined; }\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined; }\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n\r\n    private isElement(demon: Models.Demon): boolean {\r\n        return this.elementsMap[demon.id] !== undefined;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell, { TableCellProps } from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/data-table.module.scss';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\ntype StatePair<T> = [T, React.Dispatch<React.SetStateAction<T>>];\r\nexport type SortSpec = {\r\n    sortType: 'number' | 'string'\r\n}\r\nexport type ColDef = {\r\n    headerContent?: JSX.Element | string;\r\n    sortSpec?: SortSpec;\r\n    headerProps?: TableCellProps;\r\n}\r\nexport interface DataTableProvider<T> {\r\n    pageSize: number;\r\n    getColumnDefinition(): ColDef[];\r\n    getAllRowsData(): T[];\r\n    renderRow(rowData: T): JSX.Element | string | undefined;\r\n    getSortValue?(rowData: T, sortByCol: number): string | number;\r\n    renderBanner?(): JSX.Element | undefined;\r\n}\r\ninterface DataTableProps extends PaperProps {\r\n    dataTableProvider: DataTableProvider<any>;\r\n}\r\nconst DataTable = (params: DataTableProps): JSX.Element => {\r\n    const {dataTableProvider} = params;\r\n    const [page, setPage] = React.useState<number>(1);\r\n    const [sortByCol, setSortByCol] = React.useState<number | undefined>(undefined);\r\n    const [sortDirection, setSortDirection] = React.useState<\"desc\" | \"asc\" | undefined>(undefined);\r\n    const [sortType, setSortType] = React.useState<\"number\" | \"string\">(\"string\");\r\n    const pageSize: number = dataTableProvider.pageSize;\r\n    let maxPage: number = 1;\r\n\r\n    const colDefs: ColDef[] = dataTableProvider.getColumnDefinition();\r\n    const preIdRowData: any[] = dataTableProvider.getAllRowsData();\r\n    const totalRowCount: number = preIdRowData.length;\r\n\r\n    // Empty row banner\r\n    if (totalRowCount === 0) {\r\n        if (sortByCol !== undefined) { setSortByCol(undefined); }\r\n        if (page !== 1) { setPage(1); }\r\n        if (sortDirection !== undefined) { setSortDirection(undefined); }\r\n        let ret = <React.Fragment />;\r\n        let banner = dataTableProvider.renderBanner? dataTableProvider.renderBanner() : undefined;\r\n        if (banner) { ret = banner }\r\n        return ret;\r\n    }\r\n\r\n    // Shift page down if table loses rows\r\n    maxPage = Math.ceil(totalRowCount / pageSize);\r\n    if ((page - 1)* pageSize >= totalRowCount)\r\n    {\r\n        setPage(Math.ceil(totalRowCount / pageSize));\r\n        return <React.Fragment />;\r\n    }\r\n\r\n    // ID rows\r\n    const rowData: { id: number, data: any }[] = preIdRowData.map((rd, index) => { return { id: index, data: rd } });\r\n\r\n    // Sort rows\r\n    if ((sortByCol !== undefined) && (sortDirection !== undefined) && (dataTableProvider.getSortValue !== undefined)) {\r\n        const getSortValue = dataTableProvider.getSortValue.bind(dataTableProvider);\r\n        const sortMult: number = (sortDirection === \"asc\") ? 1 : -1;\r\n        const comparitor: (...x: any) => number = (sortType === \"number\") ? numberComparitor : stringComparitor;\r\n        rowData.sort((a, b) => { \r\n            const valA = getSortValue(a.data, sortByCol);\r\n            const valB = getSortValue(b.data, sortByCol);\r\n            return sortMult * comparitor(valA, valB) });\r\n    }\r\n\r\n    // Paginate\r\n    const paginizedRowData = rowData.filter((data, index) => (index >= (page - 1) * pageSize) && (index < page * pageSize));\r\n    function changePage(event: React.ChangeEvent<unknown>, value: number) {\r\n        setPage(value);\r\n    }\r\n    \r\n    // Render headers\r\n    const headerCells: JSX.Element[] = [];\r\n    let colNum: number = 0;\r\n    for (const colDef of colDefs) {\r\n        const headerContent = colDef.sortSpec ? buildSortableHeaderCellContent(colDef.headerContent, colNum, colDef.sortSpec.sortType, [sortByCol, setSortByCol], [sortDirection, setSortDirection], [sortType, setSortType]) : colDef.headerContent;\r\n\r\n        headerCells.push(<TableCell key={\"H-\" + colNum} {...colDef.headerProps}>{headerContent}</TableCell>);\r\n        colNum++;\r\n    }\r\n\r\n    // Render rows\r\n    const renderedRows: JSX.Element[] = [];\r\n    for (const row of paginizedRowData) {\r\n        renderedRows.push(\r\n            <TableRow key={row.id}>\r\n                {dataTableProvider.renderRow(row.data)}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    let paperContainerClassName: string = styles.paperContainer;\r\n    if (params.className) {\r\n        paperContainerClassName += \" \" + params.className;\r\n    }\r\n\r\n    return <Paper className={paperContainerClassName} elevation={3}>\r\n        <TableContainer className={styles.tableContainer}>\r\n            <Table>\r\n                <TableHead className={styles.header}>\r\n                    <TableRow>\r\n                        {headerCells}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className={styles.tableBody}>\r\n                    {renderedRows}\r\n                </TableBody>\r\n            </Table>\r\n            <Pagination count={maxPage} page={page} onChange={changePage} size=\"small\" />\r\n        </TableContainer>\r\n    </Paper>\r\n};\r\nexport default DataTable;\r\n\r\nfunction stringComparitor(a: string, b: string): number {\r\n    return (a > b) ? 1 : (a === b) ? 0 : -1;\r\n}\r\n\r\nfunction numberComparitor(a: number, b: number): number {\r\n    return a - b;\r\n}\r\n\r\nfunction buildSortableHeaderCellContent(\r\n    headerInnerContent: JSX.Element | string | undefined,\r\n    id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): JSX.Element {\r\n    const [sortByCol] = _sortByCol;\r\n    const [sortDirection] = _sortDirection;\r\n\r\n    return <TableSortLabel\r\n        active={sortByCol === id && sortDirection !== undefined}\r\n        direction={sortByCol === id ? sortDirection : undefined}\r\n        onClick={createSortHandler(id, colSortType, _sortByCol, _sortDirection, _sortType)}>\r\n        {headerInnerContent}\r\n    </TableSortLabel>;\r\n}\r\n\r\nfunction createSortHandler(id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void {\r\n    return (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        const [sortByCol, setOrderBy] = _sortByCol;\r\n        const [sortDirection, setSortDirection] = _sortDirection;\r\n        const [, setSortType] = _sortType;\r\n\r\n        let nextSortDirection = sortDirection;\r\n        if (sortByCol === id) {\r\n            if (sortDirection === \"asc\") { nextSortDirection = \"desc\" }\r\n            if (sortDirection === \"desc\") { nextSortDirection = undefined }\r\n            if (sortDirection === undefined) {nextSortDirection = \"asc\"}\r\n        } else {\r\n            nextSortDirection = \"asc\";\r\n        }\r\n        setSortDirection(nextSortDirection);\r\n        setOrderBy(id);\r\n        setSortType(colSortType);\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { WarningBanner } from './minor-ui-components';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nimport styles from './scss/ingredients-table.module.scss';\r\n\r\n//====================================================================================================\r\n\r\ntype RemoveDemonButtonProps = {\r\n    demonId: number;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nfunction RemoveDemonButton(params: RemoveDemonButtonProps): JSX.Element {\r\n\r\n    function onIconButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\r\n        if (params.onRemoveIngredient) {\r\n            params.onRemoveIngredient(params.demonId);\r\n        }\r\n    }\r\n\r\n    return <IconButton onClick={onIconButtonClick} className={styles.removeDemonButton}>\r\n    <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n  </IconButton>\r\n}\r\n\r\n//====================================================================================================\r\n\r\nenum IngredientsSettingsEnum {\r\n    multipleUse = 1,\r\n    mustUse = 2\r\n}\r\ntype CheckboxSettingProps = {\r\n    demonId: number,\r\n    setting: IngredientsSettingsEnum,\r\n    ingredientsSettings: Models.IngredientsSettings\r\n}\r\nfunction CheckboxSetting(params: CheckboxSettingProps): JSX.Element {\r\n    const {demonId, setting, ingredientsSettings} = params;\r\n    let defaultChecked: boolean = false;\r\n    switch (setting) {\r\n        case IngredientsSettingsEnum.mustUse: {\r\n            defaultChecked = ingredientsSettings[demonId].mustUse;\r\n            break;\r\n        }\r\n        case IngredientsSettingsEnum.multipleUse: \r\n        default: {\r\n            defaultChecked = ingredientsSettings[demonId].multipleUse;\r\n        }\r\n    }\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        switch (setting) {\r\n            case IngredientsSettingsEnum.mustUse: {\r\n                ingredientsSettings[demonId].mustUse = event.target.checked;\r\n                break;\r\n            }\r\n            case IngredientsSettingsEnum.multipleUse: \r\n            default: {\r\n                ingredientsSettings[demonId].multipleUse = event.target.checked;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <Checkbox\r\n        className={styles.checkBox}\r\n        defaultChecked={defaultChecked}\r\n        onChange={onCheckboxChange}\r\n        color=\"default\"\r\n    />;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeIngredientsSettings(ingredients: Models.Ingredients, ingredientsSettings: Models.IngredientsSettings) {\r\n    for (const demonId in ingredients) {\r\n        if (!ingredientsSettings[demonId]) {\r\n            ingredientsSettings[demonId] = { mustUse: false, multipleUse: false };\r\n        }\r\n    }\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FusionIngredientsTableProps = {\r\n    demonCompendium: DemonCompendium\r\n    ingredients: Models.Ingredients\r\n    ingredientsSettings: Models.IngredientsSettings\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nclass FusionIngredientsDataTableProvider implements DataTables.DataTableProvider<Models.Demon> {\r\n\r\n    pageSize: number = 25;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        return [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: {className: styles.nameColumnHeader} },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: {className: styles.raceColumnHeader} },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" } },\r\n            { headerContent: \"Only Show Recipes That Use This Demon\", headerProps: { width: 150, align: \"center\" } },\r\n            { headerContent: \"Can Use Multiple per Recipe\", headerProps: { width: 120, align: \"center\" } },\r\n            {}\r\n        ];\r\n    }\r\n\r\n    getAllRowsData(): Models.Demon[] {\r\n        return this.allRowsData;\r\n    }\r\n\r\n    renderRow(rowData: Models.Demon): JSX.Element {\r\n        return <React.Fragment>\r\n            <TableCell>\r\n                {rowData.name}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.lvl}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.race}\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.mustUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.multipleUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell>\r\n                <RemoveDemonButton demonId={rowData.id} onRemoveIngredient={this.onRemoveIngredient} />\r\n            </TableCell>\r\n        </React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.Demon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.name; }\r\n            case 1: { \r\n                return rowData.lvl; }\r\n            case 2: { \r\n                return rowData.race; }\r\n            default: {\r\n                return rowData.name; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        const icon = <WarningIcon className={styles.warningIcon}/>;\r\n        return <WarningBanner message=\"No ingredient demons. Use the section above to add demons to use for fusions.\" icon={icon}/>\r\n    }\r\n\r\n    demonCompendium: DemonCompendium;\r\n    ingredients: Models.Ingredients;\r\n    ingredientsSettings: Models.IngredientsSettings;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n\r\n    allRowsData: Models.Demon[];\r\n\r\n    constructor(params: FusionIngredientsTableProps, allRowsData: Models.Demon[]) {\r\n        this.demonCompendium = params.demonCompendium;\r\n        this.ingredients = params.ingredients;\r\n        this.ingredientsSettings = params.ingredientsSettings;\r\n        this.onRemoveIngredient = params.onRemoveIngredient;\r\n\r\n        this.allRowsData = allRowsData;\r\n    }\r\n}\r\n\r\nconst IngredientsTable = (params: FusionIngredientsTableProps): JSX.Element => {\r\n    initializeIngredientsSettings(params.ingredients, params.ingredientsSettings);\r\n    const rowData: Models.Demon[] = React.useMemo(() => {\r\n        let rowData: Models.Demon[] = [];\r\n        for (const demonId in params.ingredients) {\r\n            const demon = params.demonCompendium.getDemonById(Number(demonId));\r\n            if (!demon) { continue; }\r\n            rowData.push(demon);\r\n        }\r\n        return rowData;\r\n    }, [params.ingredients, params.demonCompendium]);\r\n    const dataProvider = new FusionIngredientsDataTableProvider(params, rowData);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n}\r\nexport default React.memo(IngredientsTable);","import React from 'react';\r\n\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport styles from './scss/minor-ui-components.module.scss';\r\n\r\ntype WarningBannerProps = {\r\n    message?: string;\r\n    icon?: JSX.Element;\r\n    className?: string;\r\n}\r\nconst WarningBannerCore = (params: WarningBannerProps): JSX.Element => {\r\n    let icon;\r\n    if (params.icon) {\r\n        icon = <div className={styles.icon}>{params.icon}</div>\r\n    }\r\n    return <Paper className={params.className? params.className : styles.warningBanner}>\r\n        {icon}<span>{params.message}</span>\r\n    </Paper>\r\n}\r\nexport const WarningBanner = React.memo(WarningBannerCore);","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {WarningBanner} from './minor-ui-components';\r\n\r\nimport styles from './scss/results-table.module.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass FusionResultsDataTableProvider implements DataTables.DataTableProvider<Models.FusedDemon> {\r\n\r\n    pageSize: number = 50;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        const colDefs: DataTables.ColDef[] = [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.nameColumn } },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.lvlColumn } },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.raceColumn } },\r\n        ];\r\n        const statsName: string[] = Models.Demon.statsName;\r\n        for (let i = 0; i < statsName.length; i++) {\r\n            colDefs.push(\r\n                { headerContent: statsName[i], headerProps: { className: styles.statColumn }, sortSpec: { sortType: \"number\" } }\r\n            );\r\n        }\r\n        colDefs.push({ headerContent: \"Ingredients Used\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.ingredientsColumn } });\r\n        colDefs.push({ headerContent: \"\" });\r\n        this.columnCount = colDefs.length;\r\n        return colDefs;\r\n    }\r\n\r\n    getAllRowsData(): Models.FusedDemon[] {\r\n        const resultsAsRowsArray: Models.FusedDemon[] = [];\r\n        for (const ingCount in this.fusionResults) {\r\n            if (Number(ingCount) === 1) { continue; }\r\n            for (const demonId in this.fusionResults[ingCount]) {\r\n                for (const fusedDemon of this.fusionResults[ingCount][demonId]) {\r\n                    resultsAsRowsArray.push(fusedDemon);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return resultsAsRowsArray;\r\n    }\r\n\r\n    renderRow(fusedDemon: Models.FusedDemon): JSX.Element {\r\n        const renderedRow: JSX.Element[] = [];\r\n        let keyId: number = 0;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.nameColumn}>\r\n                {fusedDemon.demon.name}\r\n            </TableCell>\r\n            <TableCell className={styles.lvlColumn}>\r\n                {fusedDemon.demon.lvl}\r\n            </TableCell>\r\n            <TableCell className={styles.raceColumn}>\r\n                {fusedDemon.demon.race}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        for (const stat of fusedDemon.demon.stats) {\r\n            renderedRow.push(<React.Fragment key={keyId}>\r\n                <TableCell className={styles.statColumn}>\r\n                    {stat}\r\n                </TableCell>\r\n            </React.Fragment>);\r\n            keyId++;\r\n        }\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.ingredientsColumn}>\r\n                {Object.keys(fusedDemon.getBaseIngredientsCounts()).length}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell>\r\n            <Button variant=\"outlined\" onClick={this.recipesButtonHandler.bind(undefined, fusedDemon.demon.id)} className={styles.recipeButton}>View recipes</Button>\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        return <React.Fragment>{renderedRow}</React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.FusedDemon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.demon.name; }\r\n            case 1: { \r\n                return rowData.demon.lvl; }\r\n            case 2: { \r\n                return rowData.demon.race; }\r\n            case (this.columnCount - 2):\r\n                return Object.keys(rowData.getBaseIngredientsCounts()).length;\r\n            default: {\r\n                return rowData.demon.stats[sortByCol-3]; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        return <WarningBanner message=\"No results found\" />\r\n    }\r\n\r\n    fusionResults: Models.FusionResults;\r\n    recipesButtonHandler: (...x: any) => void;\r\n    columnCount: number = 0;\r\n\r\n    constructor(params: FusionResultsTableProps, onRecipesButtonClick: (demonId: number) => void) {\r\n        this.recipesButtonHandler = onRecipesButtonClick;\r\n        this.fusionResults = params.fusionResults;\r\n    }\r\n}\r\n\r\ntype FusionResultsTableProps = {\r\n    fusionResults: Models.FusionResults,\r\n    onOpenDemonRecipes: (demonId: number) => void\r\n}\r\nconst ResultsTable = (props: FusionResultsTableProps): JSX.Element => {\r\n\r\n    function openDemonRecipesHandler(demonId: number) {\r\n      props.onOpenDemonRecipes(demonId);\r\n    }\r\n    \r\n    const dataProvider = new FusionResultsDataTableProvider(props, openDemonRecipesHandler);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n};\r\nexport default React.memo(ResultsTable);","import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/settings-panel.module.scss';\r\n\r\nexport class UserSettings {\r\n    charLvl: number = 99;\r\n    maxIngredient: number = 3;\r\n    useTripleFusion: boolean = false;\r\n\r\n    useTripleFusionSettingIsVisible: boolean = false;\r\n}\r\nexport type SettingsPanelEventHandlers = { toggleVisibility?: Function }\r\ntype SettingsPanelProps = {\r\n    eventHandlers: SettingsPanelEventHandlers,\r\n    settings: UserSettings\r\n}\r\nexport default function SettingsPanel(params: SettingsPanelProps) : JSX.Element {\r\n    const {eventHandlers, settings } = params;\r\n    \r\n    const [isVisible, setIsVisible] = useState<boolean>(false);\r\n    const [charLvlFieldValue, setCharLvlFieldValue] = useState<number | string>(settings.charLvl);\r\n    const [maxIngFieldValue, setMaxIngFieldValue] = useState<number | string>(settings.maxIngredient);\r\n\r\n    function onVisibilityToggle(): void {\r\n        setIsVisible(!isVisible);\r\n    }\r\n    eventHandlers.toggleVisibility = onVisibilityToggle;\r\n\r\n    function onSetCharLvl(newValue: number): void {\r\n        settings.charLvl = newValue;\r\n    }\r\n\r\n    function onSetMaxIng(newValue: number): void {\r\n        settings.maxIngredient = newValue;\r\n    }\r\n\r\n    function onSetUseTripleFusion(newValue: boolean): void {\r\n        settings.useTripleFusion = newValue;\r\n    }\r\n\r\n    const settingsPanelStyle: React.CSSProperties = {};\r\n    if (!isVisible) { settingsPanelStyle.height = \"0px\"; }\r\n    return <div style={settingsPanelStyle} className={styles.settingsPanel}>\r\n        <Paper variant=\"outlined\" className={styles.paper}>\r\n            <h2>Settings</h2>\r\n            <NumberSettings\r\n                label=\"Character level\"\r\n                min={1}\r\n                max={99}\r\n                emptyFieldValue={99}\r\n                fieldStateValueAndSetter={[charLvlFieldValue, setCharLvlFieldValue]}\r\n                onSetSettings={onSetCharLvl} />\r\n            <NumberSettings\r\n                label=\"Max ingredients per recipe\"\r\n                min={2}\r\n                max={5}\r\n                emptyFieldValue={3}\r\n                fieldStateValueAndSetter={[maxIngFieldValue, setMaxIngFieldValue]}\r\n                onSetSettings={onSetMaxIng} />\r\n            {settings.useTripleFusionSettingIsVisible ?\r\n                <CheckboxSettings\r\n                    label=\"Allow triple fusion\"\r\n                    checked={settings.useTripleFusion}\r\n                    onSetSettings={onSetUseTripleFusion}\r\n                /> : undefined}\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\ntype NumberSettingsProp = {\r\n    label: string,\r\n    fieldStateValueAndSetter: [number | string, React.Dispatch<React.SetStateAction<number | string>>],\r\n    onSetSettings: (newValue: number) => void,\r\n    min: number,\r\n    max: number,\r\n    emptyFieldValue: number\r\n}\r\nfunction NumberSettings(params: NumberSettingsProp): JSX.Element {\r\n    const {label, fieldStateValueAndSetter: stateValueAndSetter, onSetSettings, min, max, emptyFieldValue} = params;\r\n    const [stateValue, stateSetter] = stateValueAndSetter;\r\n\r\n    function onNumberFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let value: number | string = event.target.value;\r\n        if (value === \"\") {\r\n            stateSetter(\"\");\r\n            onSetSettings(emptyFieldValue);\r\n            return;\r\n        }\r\n        const valueAsNumber = Number(value);\r\n        if (valueAsNumber >= min && valueAsNumber <= max) {\r\n            stateSetter(valueAsNumber);\r\n            onSetSettings(valueAsNumber);\r\n        }\r\n    }\r\n    return <div className={`${styles.settingsLine} ${styles.numberSettings}`}>\r\n        <span className={styles.numberFieldLabel}>{label}</span>\r\n        <TextField\r\n            style={{ width: \"50px\" }}\r\n            type=\"number\"\r\n            InputLabelProps={{ shrink: true }}\r\n            inputProps={{ min: min, max: max, step: 1 }}\r\n            variant=\"outlined\"\r\n            value={stateValue}\r\n            onChange={onNumberFieldChange}\r\n        />\r\n    </div>;\r\n}\r\n\r\ntype CheckboxSettingsProps = {\r\n    label: string,\r\n    checked: boolean,\r\n    onSetSettings: (newValue: boolean) => void\r\n}\r\nfunction CheckboxSettings(params: CheckboxSettingsProps): JSX.Element {\r\n    const {label, checked, onSetSettings} = params;\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        onSetSettings(event.target.checked);\r\n    }\r\n\r\n    return <div className={`${styles.settingsLine}`}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    defaultChecked={checked}\r\n                    onChange={onCheckboxChange}\r\n                    color=\"default\"\r\n                />}\r\n            label={label} />\r\n    </div>;\r\n}","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './scss/ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by entering level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        const acceptedKeys: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let keyIsAccepted: boolean = false;\r\n        for (const acceptedKey of acceptedKeys) {\r\n            if (key === acceptedKey) {\r\n                keyIsAccepted = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!keyIsAccepted) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","import React from \"react\";\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport styles from './scss/recipes-table.module.scss';\r\n\r\nfunction renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n    if (demon.isFused()) {\r\n        return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n    } else {\r\n        return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n    }\r\n}\r\n\r\nfunction renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let priorRecipes: JSX.Element = <React.Fragment />;\r\n    if (demon.ingredients) {\r\n        let curRecipe: JSX.Element = <React.Fragment />;\r\n        let isFirstLoop: boolean = true;\r\n        for (const ingDemon of demon.ingredients) {\r\n            priorRecipes = <React.Fragment>{priorRecipes}{renderRecipe(ingDemon)}</React.Fragment>;\r\n            const separator = isFirstLoop ? undefined : <React.Fragment> + </React.Fragment>;\r\n            curRecipe = <React.Fragment>{curRecipe}{separator}{renderDemonName(ingDemon)}</React.Fragment>\r\n            isFirstLoop = false;\r\n        }\r\n        const nameR = renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {priorRecipes}\r\n            <Divider light />\r\n            <div>{curRecipe}</div><div>&darr;</div><div>{nameR}</div>\r\n        </React.Fragment>;\r\n    }\r\n    return priorRecipes;\r\n}\r\n\r\nfunction DemonCard(props: {demon: Models.FusedDemon}): JSX.Element {\r\n    return <Card className={styles.recipeCard}>\r\n      <CardContent>\r\n          {renderRecipe(props.demon)}\r\n      </CardContent>\r\n    </Card>\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FilterMap = { [demonId: number]: boolean};\r\ntype FilterOption = { demonId: number, demonName: string};\r\n\r\nfunction createFilterOptions(recipesAry: Models.FusedDemon[], currFilter: FilterOption[]): FilterOption[] {\r\n    const filterOptions: FilterOption[] = [];\r\n    let ingDemonsMap: { [demonId: number]: string} = {};\r\n    for (const fusedDemon of recipesAry) {\r\n        const ingDemons = fusedDemon.getBaseIngredients();\r\n        for (const ingDemon in ingDemons) {\r\n            ingDemonsMap[Number(ingDemon)] = ingDemons[ingDemon].name;\r\n        }\r\n    }\r\n    currFilter.map((filterOption: FilterOption, i) => ingDemonsMap[filterOption.demonId] = filterOption.demonName);\r\n    for (const ingDemonId in ingDemonsMap) {\r\n        filterOptions.push({ demonId: Number(ingDemonId), demonName: ingDemonsMap[ingDemonId]});\r\n    }\r\n    return filterOptions;\r\n}\r\n\r\nfunction filterRecipesAry(recipesAry: Models.FusedDemon[], filterMap: FilterMap): Models.FusedDemon[] {\r\n    const filteredAry: Models.FusedDemon[] = [];\r\n    for (const fusedDemon of recipesAry) {\r\n        const ingDemonsCount: { [demonId: number]: number } = fusedDemon.getBaseIngredientsCounts();\r\n        const filterCheckList = {...filterMap};\r\n        for (const ingDemonId in ingDemonsCount) {\r\n            delete filterCheckList[ingDemonId];\r\n        }\r\n        if (Object.keys(filterCheckList).length === 0) {\r\n            filteredAry.push(fusedDemon);\r\n        }\r\n    }\r\n    return filteredAry\r\n}\r\n\r\n\r\nexport default function RecipesTable(props: {demonId: number, recipesAry: Models.FusedDemon[]}): JSX.Element {\r\n    const pageSize: number = 100;\r\n    const [page, setPage] = React.useState<number>(1);\r\n    const [filter, setFilter] = React.useState<FilterOption[]>([]);\r\n    \r\n    const filteredRecipesAry = React.useMemo(()=>{\r\n        const filterMap: FilterMap = {};\r\n        filter.map((filterOption: FilterOption, i: number) => filterMap[filterOption.demonId] = true);\r\n        return filterRecipesAry(props.recipesAry, filterMap)\r\n    }, [props.recipesAry, filter]);\r\n\r\n    function handlePageChange(event: React.ChangeEvent<unknown>, page: number) {\r\n        setPage(page);\r\n    }\r\n    \r\n    function handleFilterChange(event: React.ChangeEvent<{}>, value: FilterOption[]) {\r\n        setPage(1);\r\n        setFilter(value);\r\n    }\r\n\r\n    const filterOptions = createFilterOptions(filteredRecipesAry, filter);\r\n\r\n    const maxPage: number = Math.ceil(filteredRecipesAry.length / pageSize);\r\n\r\n    return (\r\n    <div className={styles.componentContainer}>\r\n            <Autocomplete\r\n            multiple\r\n            className={styles.filterField}\r\n            size=\"small\"\r\n            onChange={handleFilterChange}\r\n            value={filter}\r\n            defaultValue={filter}\r\n            options={filterOptions}\r\n            getOptionLabel={(option) => option.demonName}\r\n            getOptionSelected={(option, value) => option.demonId === value.demonId}\r\n            autoHighlight={true}\r\n            filterSelectedOptions\r\n            renderInput={(params) => (<TextField {...params} variant=\"outlined\" label=\"Filter\" /> )}\r\n        />\r\n        <Pagination count={maxPage} page={page} onChange={handlePageChange} size=\"small\" className={styles.pagination} hidden={maxPage <= 1}/>\r\n        <div className={styles.recipeCardsContainer}>\r\n            {filteredRecipesAry\r\n            .filter((demon, i) => (i >= (page - 1) * pageSize) && (i < page * pageSize))\r\n            .map((demon, i) => <DemonCard key={i} demon={demon} />)}\r\n        </div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport * as Models from './data/data-models';\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport RecipesTable from './ui-components/recipes-table';\r\n\r\nimport styles from './demon-displayer.module.scss';\r\n\r\nexport default function DemonDisplayer(props: { demonCompendium: DemonCompendium, goBackUrlPath: string, fusionResults?: Models.FusionResults}): JSX.Element {\r\n    const demonIdStr = useParams<{ demonId: string }>().demonId;\r\n    const demonId = Number(demonIdStr);\r\n    const history = useHistory();\r\n\r\n    if (isNaN(demonId)) {\r\n        history.push(props.goBackUrlPath);\r\n        return <React.Fragment/>;\r\n    }\r\n    const demon = props.demonCompendium.getDemonById(demonId);\r\n    if (!demon) {\r\n        history.push(props.goBackUrlPath);\r\n        return <React.Fragment/>;\r\n    }\r\n    \r\n    let fusionResultsSection: JSX.Element | undefined = undefined;\r\n    if (props.fusionResults) {\r\n        let recipesAry: Models.FusedDemon[] | undefined = undefined;\r\n        for (const ingCount in props.fusionResults) {\r\n            for (const id in props.fusionResults[ingCount]) {\r\n                if (Number(id) === demonId) {\r\n                    recipesAry = props.fusionResults[ingCount][id];\r\n                    break;\r\n                }\r\n            }\r\n            if (recipesAry) {\r\n                break;\r\n            }\r\n        }\r\n        if (recipesAry) {\r\n        fusionResultsSection = <React.Fragment>\r\n            <h2>Recipes</h2>\r\n            <RecipesTable demonId={demonId} recipesAry={recipesAry} />\r\n        </React.Fragment>;\r\n        }\r\n    }\r\n\r\n    return <div className={styles.componentContainer}>\r\n        <div className={styles.section}>\r\n            <h2>{demon.name}</h2>\r\n            <div><Label text=\"Race\" />{demon.race}<Label text=\"Level\" />{demon.lvl}</div>\r\n        </div>\r\n        <div className={styles.section}>\r\n            <h2>Stats</h2>\r\n            <div>{demon.stats.map((stat, i) => <React.Fragment key={i}><Label text={Models.Demon.statsName[i]} />{stat}</React.Fragment>)}</div>\r\n        </div>\r\n        <div className={styles.section}>{fusionResultsSection}</div>\r\n    </div>\r\n}\r\n\r\nfunction Label(props: { text: string }): JSX.Element {\r\n    return <span className={styles.label}>{props.text}</span>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from './data/data-models';\r\nimport { DemonCompendium } from './data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport IngredientsTable from './ui-components/ingredients-table';\r\nimport ResultsTable from './ui-components/results-table';\r\nimport SettingsPanel, { UserSettings, SettingsPanelEventHandlers } from './ui-components/settings-panel';\r\nimport DemonAdder from './ui-components/demon-adder';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport styles from './fusion-calculator.module.scss';\r\nimport { Route, Router, Switch, useHistory, useRouteMatch } from 'react-router-dom';\r\nimport DemonDisplayer from './demon-displayer';\r\n\r\nconst MAX_FUSION_INGREDIENT_HARD_CAP = 5;\r\n\r\nfunction calculateAllFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings): Models.FusionResults {\r\n  const myFusionResults: Models.FusionResults = {};\r\n  for (let size = 1; size <= settings.maxIngredient && size <= MAX_FUSION_INGREDIENT_HARD_CAP; size++) {\r\n    myFusionResults[size] = {};\r\n  }\r\n\r\n  for (const demonId in ingredients) {\r\n    const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n    if (!demon) { continue; }\r\n    const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n    if (!myFusionResults[1][demon.id]) {\r\n      myFusionResults[1][demon.id] = [];\r\n    }\r\n    myFusionResults[1][demon.id].push(fusedDemon);\r\n  }\r\n\r\n  for (let ingCountR = 2; ingCountR <= settings.maxIngredient && ingCountR <= MAX_FUSION_INGREDIENT_HARD_CAP; ingCountR++) {\r\n    for (let ingCountA = ingCountR - 1; ingCountA >= (ingCountR / 2); ingCountA--) {\r\n      const ingCountB: number = ingCountR - ingCountA;\r\n      const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n      for (const idA in myFusionResults[ingCountA]) {\r\n        if (myFusionResults[ingCountA][idA].length === 0) { continue; }\r\n        const speciesA: Models.Demon = myFusionResults[ingCountA][idA][0].demon;\r\n        for (const idB in myFusionResults[ingCountB]) {\r\n          if (myFusionResults[ingCountB][idB].length === 0) { continue; }\r\n          const speciesB: Models.Demon = myFusionResults[ingCountB][idB][0].demon;\r\n\r\n          // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n          if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n          const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(myFusionResults, settings, speciesR, ingCountR, [speciesA, speciesB])) { continue; }\r\n\r\n          const resultingFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, myFusionResults[ingCountA][idA], myFusionResults[ingCountB][idB]);\r\n          if (!myFusionResults[ingCountR][speciesR.id]) { myFusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultingFusedDemons) {\r\n            myFusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        speciesUsedAsA[speciesA.id] = true;\r\n      }\r\n    }\r\n\r\n    if (settings.useTripleFusion) {\r\n      calculateTripleFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings, myFusionResults, ingCountR);\r\n    }\r\n  }\r\n\r\n  // At this point, we're completely finished with all fusion combinations\r\n  // Re-traverse the entire results and purge fusions that don't satisfy various constraints/settings\r\n  const mustUseDemons: Models.MustUseDemonsMap = prepareIngredientsSettingsForFinalFilter(ingredientsSettings, ingredients);\r\n  let filterFunction = filterDemonsAfterCalculation.bind(undefined, mustUseDemons);\r\n  for (const ingCount in myFusionResults) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    for (const id in myFusionResults[ingCount]) {\r\n      let demonAry: Models.FusedDemon[] = myFusionResults[ingCount][id];\r\n      demonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() });\r\n      demonAry = demonAry.filter(filterFunction);\r\n      myFusionResults[ingCount][id] = demonAry;\r\n    }\r\n  }\r\n\r\n  return myFusionResults;\r\n}\r\n\r\nfunction calculateTripleFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings, fusionResults: Models.FusionResults, ingCountR: number): void {\r\n  let ingCounts: number[] = [];\r\n  while (getNextTripleFusionIngCounts(ingCounts, ingCountR)) {\r\n    const [ingCountA, ingCountB, ingCountC] = ingCounts;\r\n    const alreadyCalculatedAsA: { [id: number]: boolean } = {};\r\n    for (const idA in fusionResults[ingCountA]) {\r\n      if (fusionResults[ingCountA][idA].length === 0) { continue; }\r\n      const speciesA: Models.Demon = fusionResults[ingCountA][idA][0].demon;\r\n\r\n      const alreadyCalculatedAsB: { [id: number]: boolean } = {};\r\n      for (const idB in fusionResults[ingCountB]) {\r\n        if (alreadyCalculatedAsA[Number(idB)]) { continue; }\r\n        if (fusionResults[ingCountB][idB].length === 0) { continue; }\r\n        const speciesB: Models.Demon = fusionResults[ingCountB][idB][0].demon;\r\n\r\n        for (const idC in fusionResults[ingCountC]) {\r\n          if (alreadyCalculatedAsA[Number(idC)]) { continue; }\r\n          if (alreadyCalculatedAsB[Number(idC)]) { continue; }\r\n          if (fusionResults[ingCountC][idC].length === 0) { continue; }\r\n          const speciesC: Models.Demon = fusionResults[ingCountC][idC][0].demon;\r\n          const speciesR: Models.Demon | undefined = demonCompendium.tripleFuseDemons(speciesA, speciesB, speciesC);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(fusionResults, settings, speciesR, ingCountR, [speciesA, speciesB, speciesC])) { continue; }\r\n          const resultFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, fusionResults[ingCountA][idA], fusionResults[ingCountB][idB], fusionResults[ingCountC][idC]);\r\n          if (!fusionResults[ingCountR][speciesR.id]) { fusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            fusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        alreadyCalculatedAsB[speciesB.id] = true;\r\n      }\r\n      alreadyCalculatedAsA[speciesA.id] = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNextTripleFusionIngCounts(fusionIngCounts: number[], ingCountR: number): boolean {\r\n  if (ingCountR < 3) { return false; }\r\n  if (fusionIngCounts.length < 3) { \r\n    fusionIngCounts[0] = ingCountR - 2;\r\n    fusionIngCounts[1] = 1;\r\n    fusionIngCounts[2] = 1;\r\n    return true;\r\n  }\r\n  for (let i = fusionIngCounts.length - 2; i >= 0; i--) {\r\n    const j: number = i + 1;\r\n    if (fusionIngCounts[i] - fusionIngCounts[j] >= 2) {\r\n      fusionIngCounts[i] = fusionIngCounts[i] - 1;\r\n      fusionIngCounts[j] = fusionIngCounts[j] + 1;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction filterDemonsAfterSpeciesFusion(fusionResults: Models.FusionResults, settings: UserSettings, speciesR: Models.Demon, ingCountR: number, speciesIngs: Models.Demon[]): boolean {\r\n  // throw out the resulting species if we knew how to make it with fewer ingredients\r\n  let canBeMadeWithLessIngredient: boolean = false;\r\n  for (let sizeCheck = ingCountR - 1; sizeCheck >= 1; sizeCheck--) {\r\n    if (fusionResults[sizeCheck][speciesR.id]) {\r\n      canBeMadeWithLessIngredient = true;\r\n      break;\r\n    }\r\n  }\r\n  if (canBeMadeWithLessIngredient) { return false; }\r\n\r\n  if (speciesR.lvl > settings.charLvl) { return false; }\r\n\r\n  // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n  if (ingCountR === settings.maxIngredient) {\r\n    for (const speciesIng of speciesIngs) {\r\n      if (speciesR.lvl < speciesIng.lvl) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCrissCross(ingSettings: Models.IngredientsSettings, demon: Models.FusedDemon): boolean {\r\n  const baseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const id in baseIngCount) {\r\n    if (baseIngCount[id] > 1 && !ingSettings[id].multipleUse) { return false; }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCalculation(mustUseDemons: Models.MustUseDemonsMap, demon: Models.FusedDemon): boolean {\r\n  const myMustUseDemons = {...mustUseDemons};\r\n  const demonBaseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const demonId in demonBaseIngCount) {\r\n    delete myMustUseDemons[demonId];\r\n  }\r\n  if (Object.keys(myMustUseDemons).length > 0) { return false; }\r\n  return true;\r\n}\r\n\r\nfunction prepareIngredientsSettingsForFinalFilter(ingSettings: Models.IngredientsSettings, ingredients: Models.Ingredients): Models.MustUseDemonsMap {\r\n  const mustUseDemons: Models.MustUseDemonsMap = {};\r\n  for (const id in ingredients) {\r\n    if (ingSettings[id].mustUse) { mustUseDemons[id] = true };\r\n  }\r\n  return mustUseDemons;\r\n}\r\n\r\nfunction crissCrossFusedDemons(resultSpecies: Models.Demon, ingredientsSettings: Models.IngredientsSettings, ...ingredients: Models.FusedDemon[][]): Models.FusedDemon[] {\r\n  const indeces: number[] = [];\r\n  const ret: Models.FusedDemon[] = [];\r\n  for (let i = 0; i < ingredients.length; i++) { indeces.push(0); }\r\n  while (true) {\r\n    const fusedDemonIngredientsHistory: Models.FusedDemon[] = [];\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      fusedDemonIngredientsHistory.push(ingredients[i][indeces[i]]);\r\n    }\r\n    ret.push(new Models.FusedDemon(resultSpecies, fusedDemonIngredientsHistory));\r\n\r\n    // Increment the indeces\r\n    let hasCarry: boolean = true;\r\n    for (let i = indeces.length - 1; i >= 0; i--) {\r\n      let index: number = indeces[i];\r\n      if (hasCarry) { index = index + 1; hasCarry = false; }\r\n      if (index >= ingredients[i].length) { index = 0; hasCarry = true; }\r\n      indeces[i] = index;\r\n      if (!hasCarry) { break; }\r\n    }\r\n    if (hasCarry) { break; }\r\n  }\r\n  \r\n  return ret.filter(filterDemonsAfterCrissCross.bind(undefined, ingredientsSettings));;\r\n}\r\n\r\nfunction hasFusionResult(fusionResults: Models.FusionResults): boolean {\r\n  let hasFusionResult = false;\r\n  for (const ingCount in fusionResults) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    if (Object.keys(fusionResults[ingCount]).length > 0) { hasFusionResult = true; break; }\r\n  }\r\n  return hasFusionResult;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeUserSettings(demonCompendium: DemonCompendium): UserSettings {\r\n  const settings = new UserSettings();\r\n  settings.useTripleFusion = demonCompendium.usePersonaTripleFusionMechanic;\r\n  settings.useTripleFusionSettingIsVisible = demonCompendium.usePersonaTripleFusionMechanic;\r\n  return settings;\r\n}\r\n\r\nexport default function FusionCalculator(props: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = props;\r\n\r\n  const [ingredients, setIngredients] = useState<Models.Ingredients>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>({});\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  const history = useHistory();\r\n  const routeMatcher = useRouteMatch();\r\n\r\n  let [nonRenderingStates] = useState<[UserSettings, Models.IngredientsSettings]>([initializeUserSettings(demonCompendium), {}]);\r\n  const settings = nonRenderingStates[0];\r\n  const ingredientsSettings = nonRenderingStates[1];\r\n  const settingsPanelEventHandlers: SettingsPanelEventHandlers = {};\r\n  const refResultsTable = useRef<HTMLHeadingElement>(null);\r\n\r\n  useEffect(()=>{\r\n    if (hasFusionResult(fusionResults)) {\r\n      refResultsTable.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [fusionResults]);\r\n\r\n  const removeDemonFromIngredientsHandler = useCallback(function (demonId: number): void {\r\n    const newIngredients = { ...ingredients };\r\n    delete newIngredients[demonId];\r\n    setIngredients(newIngredients);\r\n  }, [ingredients]);\r\n\r\n  function addDemonToIngredientsHandler(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function calculateButtonHandler(): void {\r\n    setFusionResults(calculateAllFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings));\r\n  }\r\n\r\n  function settingsButtonHandler(): void {\r\n    if (settingsPanelEventHandlers.toggleVisibility) {\r\n      settingsPanelEventHandlers.toggleVisibility();\r\n    }\r\n  }\r\n\r\n  function resetButtonHandler(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n    for (const key in ingredientsSettings) {\r\n      delete ingredientsSettings[key];\r\n    }\r\n\r\n    const newFusionResults = {};\r\n    setFusionResults(newFusionResults);\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n\r\n  function openDemonRecipesHandler(demonId: number) {\r\n    history.push(`${routeMatcher.url}/demon/${demonId}`);\r\n  }\r\n  \r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route path={`${routeMatcher.path}/demon/:demonId`}>\r\n          <DemonDisplayer demonCompendium={demonCompendium} goBackUrlPath={routeMatcher.url} fusionResults={fusionResults} />\r\n        </Route>\r\n        <Route path={`${routeMatcher.path}/`}>\r\n\r\n          <div className={styles.fusionCalculator}>\r\n            <div className={styles.section}>\r\n              <h2>Add Demons to Use as Fusion Ingredients</h2>\r\n              <div className={styles.addDemonsAndButtonsRowContainer}>\r\n                <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredientsHandler} />\r\n                <div className={styles.buttonsRow}>\r\n                  <Button className={styles.calculateButton} variant=\"outlined\" onClick={calculateButtonHandler} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n                  <Button className={styles.settingsButton} variant=\"outlined\" onClick={settingsButtonHandler}><SettingsIcon /></Button>\r\n                  <Button className={styles.resetButton} variant=\"outlined\" onClick={resetButtonHandler}><ReplayIcon />Reset</Button>\r\n                </div>\r\n              </div>\r\n              <SettingsPanel key={resetterKey} settings={settings} eventHandlers={settingsPanelEventHandlers} />\r\n            </div>\r\n            <div className={styles.section} hidden={Object.keys(ingredients).length === 0}>\r\n              <h2>Fusion Ingredients</h2>\r\n              <IngredientsTable\r\n                demonCompendium={demonCompendium}\r\n                ingredients={ingredients}\r\n                ingredientsSettings={ingredientsSettings}\r\n                onRemoveIngredient={removeDemonFromIngredientsHandler} />\r\n            </div>\r\n            <div className={styles.section} hidden={!hasFusionResult(fusionResults)}>\r\n              <h2>Results</h2>\r\n              <div ref={refResultsTable}>\r\n                <ResultsTable fusionResults={fusionResults} onOpenDemonRecipes={openDemonRecipesHandler} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}","import React from 'react';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionCalculator from './fusion-calculator';\r\n\r\nimport './app.scss';\r\nimport { Tab, Tabs } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\",\r\n    fontSize: 14\r\n  }\r\n});\r\n\r\nfunction loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/desu2/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const presetJsonPromise = import(\"./data/desu2/presets.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], undefined, loadedJsons[2]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nfunction loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/p4g/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/p4g/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/p4g/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    setLoadedCompendiumCallback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nexport enum Game {\r\n  person4Golden = 0,\r\n  devilSurvivor2 = 1\r\n}\r\n\r\nfunction loadGameData(game: Game, setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  switch(game) {\r\n    case Game.person4Golden:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    case Game.devilSurvivor2:\r\n      loadDesu2DemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    default:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n  }\r\n}\r\n\r\nconst urlParamToGameMap: { [gameStr: string]: Game } = {\r\n  p4g: Game.person4Golden,\r\n  desu2: Game.devilSurvivor2\r\n}\r\n\r\nfunction getGameUrlPath(game: Game): string | undefined {\r\n  for (const gameStrCode in urlParamToGameMap) {\r\n    if (urlParamToGameMap[gameStrCode] === game) {\r\n      return gameStrCode;\r\n    }\r\n  }\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const urlParams = useParams<{gameStrCode: string}>();\r\n  const [demonCompendium, setDemonCompendium] = React.useState<DemonCompendium | undefined>(undefined);\r\n  const [currentGame, setCurrentGame] = React.useState<Game>(Game.person4Golden);\r\n\r\n  React.useEffect(()=>{\r\n      loadGameData(currentGame, setDemonCompendium);\r\n  }, [currentGame]);\r\n  \r\n  const history = useHistory();\r\n  \r\n  const changeGameTabHandler = (event: React.ChangeEvent<{}> | undefined, gameId: Game) => {\r\n    if (gameId !== currentGame) {\r\n      setDemonCompendium(undefined);\r\n    }\r\n    history.push(\"/\" + getGameUrlPath(gameId));\r\n  };\r\n\r\n  const gameFromUrlParam: Game | undefined = urlParamToGameMap[urlParams.gameStrCode];\r\n  if (gameFromUrlParam === undefined) {\r\n    changeGameTabHandler(undefined, Game.person4Golden);\r\n    return <React.Fragment />\r\n  } else if (gameFromUrlParam !== currentGame) {\r\n    setCurrentGame(gameFromUrlParam);\r\n    return <React.Fragment />\r\n  }\r\n\r\n  if (!demonCompendium) {\r\n    return <React.Fragment />\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n\r\n        <header>\r\n          <h1>MegaTen Fusion by Results Calculator</h1>\r\n        </header>\r\n        <Tabs value={currentGame} onChange={changeGameTabHandler}>\r\n          <Tab label=\"Persona 4 Golden\" />\r\n          <Tab label=\"Devil Survivor 2\" />\r\n        </Tabs>\r\n\r\n        <div className=\"appBody\">\r\n          <FusionCalculator demonCompendium={demonCompendium} />\r\n        </div>\r\n\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Router\r\n} from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport App from './app';\r\n\r\nconst history = createBrowserHistory();\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route path={`/:gameStrCode`}>\r\n          <App/>\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <App/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"results-table_dataTable__BqyI6\",\"nameColumn\":\"results-table_nameColumn__3-ncz\",\"lvlColumn\":\"results-table_lvlColumn__35Aqx\",\"raceColumn\":\"results-table_raceColumn__34cLH\",\"statColumn\":\"results-table_statColumn__3szBY\",\"ingredientsColumn\":\"results-table_ingredientsColumn__3-up2\",\"recipeButton\":\"results-table_recipeButton__1xtnD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionCalculator\":\"fusion-calculator_fusionCalculator__3Zguo\",\"addDemonsAndButtonsRowContainer\":\"fusion-calculator_addDemonsAndButtonsRowContainer__wkZrf\",\"buttonsRow\":\"fusion-calculator_buttonsRow__1YLsP\",\"calculateButton\":\"fusion-calculator_calculateButton__31LRV\",\"section\":\"fusion-calculator_section__3Ez8Z\",\"shining\":\"fusion-calculator_shining__3n0sX\",\"settingsButton\":\"fusion-calculator_settingsButton__2qcyE\",\"resetButton\":\"fusion-calculator_resetButton__12QkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"ingredients-table_dataTable__3eHDj\",\"checkBox\":\"ingredients-table_checkBox__3TQeR\",\"nameColumnHeader\":\"ingredients-table_nameColumnHeader__6MDJR\",\"raceColumnHeader\":\"ingredients-table_raceColumnHeader__1WXYk\",\"removeDemonButton\":\"ingredients-table_removeDemonButton__3uoAu\",\"removeDemonButtonIcon\":\"ingredients-table_removeDemonButtonIcon__2l4m2\",\"warningIcon\":\"ingredients-table_warningIcon__p_Iu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPanel\":\"settings-panel_settingsPanel__Jlbex\",\"paper\":\"settings-panel_paper__ee3p0\",\"settingsLine\":\"settings-panel_settingsLine__1HRFl\",\"numberSettings\":\"settings-panel_numberSettings__RpSac\",\"numberFieldLabel\":\"settings-panel_numberFieldLabel__30ovM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__1Nq5q\",\"subAdderContainer\":\"ui-components_subAdderContainer__2g7zq\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1oqYT\",\"addDemonButton\":\"ui-components_addDemonButton__1Md5N\",\"removeDemonButtonIcon\":\"ui-components_removeDemonButtonIcon__1s3G_\",\"fusionResultsTable\":\"ui-components_fusionResultsTable__1u69P\",\"baseIngredientName\":\"ui-components_baseIngredientName__2H65N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentContainer\":\"recipes-table_componentContainer__gd3Wo\",\"filterField\":\"recipes-table_filterField__2wbHr\",\"pagination\":\"recipes-table_pagination__o4sqn\",\"recipeCardsContainer\":\"recipes-table_recipeCardsContainer__3P3w_\",\"recipeCard\":\"recipes-table_recipeCard__2-jxu\",\"baseIngredientName\":\"recipes-table_baseIngredientName__3mt6k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"componentContainer\":\"demon-displayer_componentContainer__1vk7N\",\"section\":\"demon-displayer_section__K-bBK\",\"label\":\"demon-displayer_label__3kKVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paperContainer\":\"data-table_paperContainer__yXedv\",\"tableContainer\":\"data-table_tableContainer__2trr1\",\"header\":\"data-table_header__19DGp\",\"tableBody\":\"data-table_tableBody__1DiId\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warningBanner\":\"minor-ui-components_warningBanner__27C77\",\"icon\":\"minor-ui-components_icon__1xTlq\"};"],"sourceRoot":""}
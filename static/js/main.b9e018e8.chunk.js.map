{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/data-table.tsx","ui-components/ingredients-table.tsx","ui-components/minor-ui-components.tsx","ui-components/results-table.tsx","ui-components/settings-panel.tsx","ui-components/demon-adder.tsx","ui-components/fusion-calculator.tsx","App.tsx","index.tsx","ui-components/scss/results-table.module.scss","ui-components/scss/ingredients-table.module.scss","ui-components/scss/settings-panel.module.scss","ui-components/scss/ui-components.module.scss","ui-components/scss/fusion-calculator.module.scss","ui-components/scss/data-table.module.scss","ui-components/scss/minor-ui-components.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","rank","specialRecipe","this","statsName","FusedDemon","demon","ingredients","length","ret","ingDemon","getBaseIngredients","parentIngCount","getBaseIngredientsCounts","baseDemonId","Object","keys","join","values","map","getHighestIngredientLvl","highestIngLvl","DemonsPreset","caption","demons","ELEMENT_RACE","DemonCompendium","demonListJson","fusionChartJson","fusionSettingsJson","presetJson","demonsAry","normalFusionChart","tripleFusionChart","elementsMap","elementFusionChart","demonsPresets","gameHasElements","_usePersonaSameRaceFusionMechanic","_usePersonaTripleFusionMechanic","disableSameDemonFusion","idMap","nameMap","raceIdMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseSettings","parseFusionChart","prepRaceLvlInfo","parsePresets","demonA","demonB","fuseDemonWithElement","fuseDemonSameRaceNoElement","fuseDemonDiffRaceNoElement","demonC","sort","x","y","getRaceOrder","demonWeak","demonMid","demonStrong","intermediateRace","getFusionRace","resultRace","getTripleFusionRace","resultLvlTable","getLvlTableForRace","resultLvlTest","resultLvl","findResultLvlFromLvlTable","demonResult","getDemonFromRaceLvl","resultLvlIndex","indexOf","demonName","getDemonByName","randomDemonIndex","Math","floor","random","elementsIds","elementsCount","randomElementIdIndex","randomElementId","Number","testGetDemon","results","i","demonR","fuseDemons","console","log","results2","j","tripleFuseDemons","push","demonsJson","Models","sameRaceFusionMechanic","tripleFusionMechanic","Boolean","row","raceFusionTable","col","chartsToUpdate","raceA","races","raceB","raceC","chart","specialRecipes","elements","elementIdIndexMap","elementName","elementFusionTable","raceId","elementId","elementIndex","presetsJson","presets","preset","presetModel","demon1","demon2","excludeDemonsWithSpecialRecipe","lvlTable","lvlToCheck","isTripleFusion","index","raceR","lvlTableR","lvlResultTest","lvlR","elementNameR","filter","element","demonRankChange","undefined","resultRank","DataTable","params","dataTableProvider","React","useState","page","setPage","sortByCol","setSortByCol","sortDirection","setSortDirection","sortType","setSortType","pageSize","colDefs","getColumnDefinition","preIdRowData","getAllRowsData","totalRowCount","Fragment","banner","renderBanner","ceil","rowData","rd","data","getSortValue","sortMult","comparitor","numberComparitor","stringComparitor","a","b","valA","valB","paginizedRowData","headerCells","colNum","colDef","headerContent","sortSpec","buildSortableHeaderCellContent","TableCell","headerProps","renderedRows","TableRow","renderRow","paperContainerClassName","styles","paperContainer","className","Paper","elevation","TableContainer","tableContainer","Table","TableHead","header","TableBody","tableBody","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","event","headerInnerContent","colSortType","_sortByCol","_sortDirection","_sortType","TableSortLabel","active","direction","onClick","createSortHandler","setOrderBy","nextSortDirection","IngredientsSettingsEnum","WarningBannerCore","icon","warningBanner","message","WarningBanner","memo","RemoveDemonButton","IconButton","onRemoveIngredient","demonId","removeDemonButton","removeDemonButtonIcon","CheckboxSetting","setting","ingredientsSettings","defaultChecked","mustUse","multipleUse","Checkbox","checkBox","onChange","checked","target","color","FusionIngredientsDataTableProvider","allRowsData","demonCompendium","nameColumnHeader","raceColumnHeader","width","align","warningIcon","IngredientsTable","initializeIngredientsSettings","useMemo","getDemonById","dataProvider","dataTable","FusionResultsDataTableProvider","fusionResults","nameColumn","lvlColumn","raceColumn","statColumn","resultsAsRowsArray","ingCount","fusedDemon","renderedRow","keyId","stat","renderRecipe","isFused","baseIngredientName","priorRecipes","curRecipe","isFirstLoop","separator","renderDemonName","nameR","recipeLine","ResultsTable","UserSettings","charLvl","maxIngredient","useTripleFusion","useTripleFusionSettingIsVisible","SettingsPanel","eventHandlers","settings","isVisible","setIsVisible","charLvlFieldValue","setCharLvlFieldValue","maxIngFieldValue","setMaxIngFieldValue","toggleVisibility","settingsPanelStyle","height","style","settingsPanel","variant","paper","NumberSettings","label","min","max","emptyFieldValue","fieldStateValueAndSetter","onSetSettings","newValue","CheckboxSettings","stateValueAndSetter","stateValue","stateSetter","settingsLine","numberSettings","numberFieldLabel","TextField","type","InputLabelProps","shrink","inputProps","step","value","valueAsNumber","FormControlLabel","control","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","selection","onKeyPress","key","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","keyIsAccepted","preventDefault","stopPropagation","valueSetterFunc","lvlFieldsContainer","bind","selectedOption","setSelectedOption","Button","addDemonButton","setIngredients","calculateAllFusionCombinations","myFusionResults","size","ingCountR","ingCountA","ingCountB","speciesUsedAsA","idA","speciesA","idB","speciesB","speciesR","filterDemonsAfterSpeciesFusion","resultingFusedDemons","crissCrossFusedDemons","calculateTripleFusionCombinations","mustUseDemons","ingSettings","prepareIngredientsSettingsForFinalFilter","filterFunction","filterDemonsAfterCalculation","demonAry","isWeakerThanIngredients","ingCounts","getNextTripleFusionIngCounts","ingCountC","alreadyCalculatedAsA","alreadyCalculatedAsB","idC","speciesC","resultFusedDemons","fusionIngCounts","speciesIngs","canBeMadeWithLessIngredient","sizeCheck","speciesIng","filterDemonsAfterCrissCross","baseIngCount","myMustUseDemons","demonBaseIngCount","resultSpecies","indeces","fusedDemonIngredientsHistory","hasCarry","removeDemonFromIngredients","newIngredients","initializeUserSettings","usePersonaTripleFusionMechanic","FusionByResultsCalculator","setFusionResults","resetterKey","setResetterKey","settingsPanelEventHandlers","fusionResultSectionHeader","useRef","useEffect","hasFusionResult","current","scrollIntoView","behavior","fusionRecommender","addDemonsAndButtonsRowContainer","buttonsRow","calculateButton","disabled","settingsButton","resetButton","ref","GameTab","theme","createMuiTheme","palette","typography","fontFamily","fontSize","loadPersona4GoldenDemonCompendium","setLoadedCompendiumCallback","demonJsonPromise","importedJson","default","fusionChartJsonPromise","settingsJsonPromise","Promise","all","loadedJsons","newDemonCompendium","loadGameData","game","person4Golden","devilSurvivor2","callback","presetJsonPromise","loadDesu2DemonCompendium","App","setDemonCompendium","gameTabPosition","setGameTabPosition","ThemeProvider","CssBaseline","Tabs","aria-label","Tab","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b9e018e8.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    rank: number = 0;\r\n    specialRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredients?: FusedDemon[];\r\n\r\n    constructor(demon: Demon, ingredients?: FusedDemon[]) {\r\n        this.demon = demon;\r\n        this.ingredients = ingredients;\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        if (!this.ingredients) { return false; }\r\n        return this.ingredients.length > 0;\r\n    }\r\n\r\n    public getBaseIngredients(): { [id: number]: Demon } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: Demon } = {};\r\n            for (const ingDemon of this.ingredients) {\r\n                ret = {...ret, ...ingDemon.getBaseIngredients()};\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: Demon } = {};\r\n            ret[this.demon.id] = this.demon;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public getBaseIngredientsCounts(): { [id: number]: number } {\r\n        if (this.ingredients) {\r\n            let ret: { [id: number]: number } = {};\r\n            for (const parentDemon of this.ingredients) {\r\n                const parentIngCount = parentDemon.getBaseIngredientsCounts();\r\n                for (const baseDemonId in parentIngCount) {\r\n                    ret[baseDemonId] = (ret[baseDemonId] || 0) + parentIngCount[baseDemonId];\r\n                }\r\n            }\r\n            return ret;\r\n        } else {\r\n            const ret: { [id: number]: number } = {};\r\n            ret[this.demon.id] = 1;\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public toBaseIngredientsIdCode(): string {\r\n        return Object.keys(this.getBaseIngredients()).join(\"-\");\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        return Object.values(this.getBaseIngredients()).map(demon => demon.name).join(\" \");\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredients) {\r\n            for (const ingDemon of this.ingredients) {\r\n                let highestIngLvl: number = ingDemon.getHighestIngredientLvl();\r\n                if (highestIngLvl > lvl) { lvl = highestIngLvl; }\r\n            }\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport type Ingredients = { [demonId: number]: boolean };\r\nexport type IngredientsSettings = { [demonId: number]: { mustUse: boolean, multipleUse: boolean } };\r\nexport type MustUseDemonsMap = {[demonId: number]: boolean};\r\nexport type FusionResults = { [ingredientCount: number]: { [id: string]: FusedDemon[] } };","import * as Models from './data-models';\r\n\r\nconst ELEMENT_RACE: string = \"Element\";\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionSettingsJson = {\r\n    sameRaceFusionMechanic?: string,\r\n    tripleFusionMechanic?: string,\r\n    disableSameDemonFusion?: boolean,\r\n}\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    raceFusionTable: string[][],\r\n    \r\n    elements?: string[],\r\n    elementFusionTable?: number[][],\r\n    specialRecipes?: { [resultName: string]: string[] }\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetsJson = { presets: Preset[] };\r\n\r\nexport class DemonCompendium {\r\n    private demonsAry: Models.Demon[] = [];\r\n    private normalFusionChart: { [race: string]: { [race: string]: string } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private tripleFusionChart: { [race: string]: { [race: string]: string } } = {};\r\n    private elementsMap: { [demonId: number]: Models.Demon } = {};\r\n    private elementFusionChart: { [race: string]: { [elementId: string]: number } } = {};\r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n\r\n    private gameHasElements: boolean = false;\r\n    private _usePersonaSameRaceFusionMechanic: boolean = false;\r\n    private _usePersonaTripleFusionMechanic: boolean = false;\r\n    private disableSameDemonFusion: boolean = false;\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceIdMap: { [race: string]: number } = {}\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJson: DemonJson, fusionChartJson: FusionChartJson, fusionSettingsJson?: FusionSettingsJson, presetJson?: PresetsJson) {\r\n        this.parseDemons(demonListJson);\r\n        this.prepDemonIds();\r\n\r\n        if (fusionSettingsJson) {\r\n            this.parseSettings(fusionSettingsJson);\r\n        }\r\n\r\n        this.parseFusionChart(fusionChartJson);\r\n        this.prepRaceLvlInfo();\r\n        \r\n        if (presetJson) {\r\n            this.parsePresets(presetJson);\r\n        }\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonsAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public get usePersonaTripleFusionMechanic(): boolean {\r\n        return this._usePersonaTripleFusionMechanic;\r\n    }\r\n\r\n    public get usePersonaSameRaceFusionMechanic(): boolean {\r\n        return this._usePersonaSameRaceFusionMechanic;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.id === demonB.id && this.disableSameDemonFusion) { return undefined; }\r\n        \r\n        if (demonA.race === ELEMENT_RACE && demonB.race === ELEMENT_RACE) {\r\n            return undefined;\r\n        } else if (demonA.race === ELEMENT_RACE || demonB.race === ELEMENT_RACE) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoElement(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    public tripleFuseDemons(demonA: Models.Demon, demonB: Models.Demon, demonC: Models.Demon): Models.Demon | undefined {\r\n        if (this.disableSameDemonFusion) {\r\n            if (demonA.id === demonB.id ||\r\n                demonA.id === demonC.id ||\r\n                demonB.id === demonC.id) { return undefined; }\r\n        }\r\n\r\n        const [demonWeak, demonMid, demonStrong] = [demonA, demonB, demonC].sort((x, y) => (x.lvl !== y.lvl) ? x.lvl - y.lvl : this.getRaceOrder(y.race) - this.getRaceOrder(x.race)); // sort from lowest to highest lv. If lvs are the same, sort by race order from highest to lowest.\r\n        const intermediateRace: string | undefined = this.getFusionRace(demonWeak.race, demonMid.race);\r\n        if (!intermediateRace) { return undefined; }\r\n        const resultRace: string | undefined = this.getTripleFusionRace(intermediateRace, demonStrong.race);\r\n        if (!resultRace) { return undefined; }\r\n        const resultLvlTable: number[] = this.getLvlTableForRace(resultRace, true);\r\n        const resultLvlTest: number = (demonWeak.lvl + demonMid.lvl + demonStrong.lvl + 12.75) / 3;\r\n        let resultLvl: number = this.findResultLvlFromLvlTable(resultLvlTable, resultLvlTest, true);\r\n        let demonResult: Models.Demon | undefined = this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n        if (!demonResult) { return undefined; }\r\n        if (demonResult.id !== demonWeak.id && demonResult.id !== demonMid.id && demonResult.id !== demonStrong.id) {\r\n            return demonResult;\r\n        } else {\r\n            let resultLvlIndex = resultLvlTable.indexOf(resultLvl);\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            if (resultLvlIndex + 1 < resultLvlTable.length) {\r\n                resultLvl = resultLvlTable[resultLvlIndex + 1];\r\n                return this.getDemonFromRaceLvl(resultRace, resultLvl);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private testGetDemon(demonName?: string): Models.Demon | undefined {\r\n        if (demonName) { return this.getDemonByName(demonName); }\r\n        if (this.demonsAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonsAry.length);\r\n        return this.demonsAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        const elementsIds = Object.keys(this.elementsMap);\r\n        const elementsCount = elementsIds.length;\r\n        if (elementsCount === 0) { return undefined };\r\n        const randomElementIdIndex: number = Math.floor(Math.random() * elementsCount);\r\n        const randomElementId: number = Number(elementsIds[randomElementIdIndex]);\r\n        return this.elementsMap[randomElementId];\r\n    }\r\n\r\n    private testFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [name: string]: Models.Demon} = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            const demonR = this.fuseDemons(demon, demonB);\r\n            if (!demonR) {continue;}\r\n            results[demonB.name] = demonR;\r\n        }\r\n        \r\n        console.log(demon);\r\n        console.log(results);\r\n    }\r\n\r\n    private testTripleFuseDemonWithAll(demonName?: string): void {\r\n        const demon = this.testGetDemon(demonName);\r\n        if (!demon) { return; }\r\n        const results: { [resultName: string]: Models.Demon[][] } = {};\r\n        const results2: { [resultName: string]: { [ing2Name: string]: string[] } } = {};\r\n        for (let i = 0; i < this.demonsAry.length; i++) {\r\n            const demonB = this.demonsAry[i];\r\n            for (let j = i; j < this.demonsAry.length; j++) {\r\n                const demonC = this.demonsAry[j];\r\n                const demonR = this.tripleFuseDemons(demon, demonB, demonC);\r\n                if (!demonR) {continue;}\r\n                if (!results[demonR.name]) { results[demonR.name] = []; }\r\n                if (!results2[demonR.name]) { results2[demonR.name] = {}; }\r\n                if (!results2[demonR.name][demonB.name]) { results2[demonR.name][demonB.name] = []; }\r\n                if (!results2[demonR.name][demonC.name]) { results2[demonR.name][demonC.name] = []; }\r\n                results[demonR.name].push([demonB, demonC]);\r\n                results2[demonR.name][demonB.name].push(demonC.name);\r\n                results2[demonR.name][demonC.name].push(demonB.name);\r\n            }\r\n        }\r\n        console.log(demon);\r\n        console.log(results);\r\n        console.log(results2);\r\n    }\r\n\r\n    private parseDemons(demonsJson: DemonJson): void {\r\n        Models.Demon.statsName = demonsJson.statsName;\r\n        const demons = demonsJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonsAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseSettings(fusionSettingsJson: FusionSettingsJson): void {\r\n        this._usePersonaSameRaceFusionMechanic = fusionSettingsJson.sameRaceFusionMechanic === \"persona\";\r\n        this._usePersonaTripleFusionMechanic = fusionSettingsJson.tripleFusionMechanic === \"persona\";\r\n        this.disableSameDemonFusion = Boolean(fusionSettingsJson.disableSameDemonFusion);\r\n    }\r\n\r\n    private parseFusionChart(fusionChartJson: FusionChartJson): void {\r\n        for (let row: number = 0; row < fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const chartsToUpdate = [];\r\n                if (this._usePersonaTripleFusionMechanic) {\r\n                    if (col < row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                    } else if (col === row) {\r\n                        chartsToUpdate.push(this.tripleFusionChart);\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    } else {\r\n                        chartsToUpdate.push(this.normalFusionChart);\r\n                    }\r\n                } else {\r\n                    if (col > row) { \r\n                        continue;\r\n                    }\r\n                    chartsToUpdate.push(this.normalFusionChart);\r\n                }\r\n\r\n                const raceA: string = fusionChartJson.races[row];\r\n                const raceB: string = fusionChartJson.races[col];\r\n                const raceC: string = fusionChartJson.raceFusionTable[row][col];\r\n\r\n                // Set the .raceA.raceB property of the parsed fusion table\r\n                for (const chart of chartsToUpdate) {\r\n                    if (!chart[raceA]) {\r\n                        chart[raceA] = {};\r\n                    }\r\n                    chart[raceA][raceB] = raceC;\r\n\r\n                    // Set the .raceB.raceA property of the parsed fusion table\r\n                    if (!chart[raceB]) {\r\n                        chart[raceB] = {};\r\n                    }\r\n                    chart[raceB][raceA] = raceC;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fusionChartJson.specialRecipes) {\r\n            for (const demonName in fusionChartJson.specialRecipes) {\r\n                const demon = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demon.specialRecipe = true;\r\n                demon.rank = 1000;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < fusionChartJson.races.length; i++) {\r\n            this.raceIdMap[fusionChartJson.races[i]] = i;\r\n        }\r\n\r\n        if (fusionChartJson.elements && fusionChartJson.elements.length > 0) {\r\n            this.gameHasElements = true;\r\n            const elementIdIndexMap: { [elementId: number]: number } = {};\r\n            for (let i = 0; i < fusionChartJson.elements.length; i++) {\r\n                const elementName = fusionChartJson.elements[i];\r\n                const demon = this.getDemonByName(elementName);\r\n                if (!demon) { continue; };\r\n                this.elementsMap[demon.id] = demon;\r\n                elementIdIndexMap[demon.id] = i;\r\n            }\r\n\r\n            if (fusionChartJson.elementFusionTable) {\r\n                for (const race in this.raceIdMap) {\r\n                    this.elementFusionChart[race] = {};\r\n                    const raceId: number = this.raceIdMap[race];\r\n                    for (const elementId in this.elementsMap) {\r\n                        const elementIndex = elementIdIndexMap[elementId];\r\n                        if (fusionChartJson.elementFusionTable[raceId]) {\r\n                            this.elementFusionChart[race][elementId] = fusionChartJson.elementFusionTable[raceId][elementIndex];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private parsePresets(presetsJson: PresetsJson): void {\r\n        if (!presetsJson) { return; }\r\n        for (const preset of presetsJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonsAry = this.demonsAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonsAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonsAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonsAry) {\r\n            if (demon.specialRecipe) { continue; }\r\n            demon.rank = this.getLvlTableForRace(demon.race, true).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string, excludeDemonsWithSpecialRecipe?: boolean): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        const lvlTable: number[] = [];\r\n        for (const lvl in this.raceLvlDemonMap[race]) {\r\n            if (excludeDemonsWithSpecialRecipe && this.raceLvlDemonMap[race][lvl].specialRecipe) {\r\n                continue;\r\n            }\r\n            lvlTable.push(Number(lvl));\r\n        }\r\n        return lvlTable;\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.normalFusionChart[raceA]) {\r\n            if (this.normalFusionChart[raceA][raceB]) {\r\n                return this.normalFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getTripleFusionRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.tripleFusionChart[raceA]) {\r\n            if (this.tripleFusionChart[raceA][raceB]) {\r\n                return this.tripleFusionChart[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getRaceOrder(race: string): number {\r\n        return this.raceIdMap[race];\r\n    }\r\n\r\n    private findResultLvlFromLvlTable(lvlTable: number[], lvlToCheck: number, isTripleFusion?: boolean) {\r\n        let index = 0;\r\n        for (let i = 0; i < lvlTable.length; i++) {\r\n            if (lvlToCheck > lvlTable[i]) {\r\n                index++;\r\n            }\r\n        }\r\n        if (index >= lvlTable.length) { \r\n            if (isTripleFusion) { return -1; }\r\n            index = lvlTable.length - 1 \r\n        };\r\n        return lvlTable[index];\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR, true);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const lvlResultTest = (demonB.lvl + demonA.lvl + 1) / 2;\r\n        const lvlR: number = this.findResultLvlFromLvlTable(lvlTableR, lvlResultTest);\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (this.gameHasElements) {\r\n            const elementNameR: string | undefined = this.getFusionRace(demonA.race, demonB.race);\r\n            if (!elementNameR) { return undefined; }\r\n            return this.getDemonByName(elementNameR);\r\n        } else if (this._usePersonaSameRaceFusionMechanic) {\r\n            const resultLvlTable = this.getLvlTableForRace(demonB.race, true).filter(lvl => lvl !== demonA.lvl);\r\n            let resultLvlIndex = -1;\r\n            for (const resultLvl of resultLvlTable) {\r\n                if (demonA.lvl + demonB.lvl >= 2 * resultLvl) { resultLvlIndex = resultLvlIndex + 1 }\r\n            }\r\n\r\n            if (resultLvlTable[resultLvlIndex] === demonB.lvl) {\r\n                resultLvlIndex = resultLvlIndex - 1;\r\n            }\r\n\r\n            if (resultLvlIndex < 0) { return undefined; }\r\n            const resultLvl = resultLvlTable[resultLvlIndex];\r\n            return this.getDemonFromRaceLvl(demonA.race, resultLvl);\r\n        }\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (demonA.race === ELEMENT_RACE) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (demonB.race === ELEMENT_RACE) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoElement(demonA, demonB);\r\n        }\r\n\r\n        const demonRankChange = this.elementFusionChart[demon.race][element.rank];\r\n        if (demonRankChange === undefined) { return undefined; }\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined; }\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell, { TableCellProps } from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/data-table.module.scss';\r\n\r\ntype StatePair<T> = [T, React.Dispatch<React.SetStateAction<T>>];\r\nexport type SortSpec = {\r\n    sortType: 'number' | 'string'\r\n}\r\nexport type ColDef = {\r\n    headerContent?: JSX.Element | string;\r\n    sortSpec?: SortSpec;\r\n    headerProps?: TableCellProps;\r\n}\r\nexport interface DataTableProvider<T> {\r\n    pageSize: number;\r\n    getColumnDefinition(): ColDef[];\r\n    getAllRowsData(): T[];\r\n    renderRow(rowData: T): JSX.Element | string | undefined;\r\n    getSortValue?(rowData: T, sortByCol: number): string | number;\r\n    renderBanner?(): JSX.Element | undefined;\r\n}\r\ninterface DataTableProps extends PaperProps {\r\n    dataTableProvider: DataTableProvider<any>;\r\n}\r\nconst DataTable = (params: DataTableProps): JSX.Element => {\r\n    const {dataTableProvider} = params;\r\n    const [page, setPage] = React.useState<number>(0);\r\n    const [sortByCol, setSortByCol] = React.useState<number | undefined>(undefined);\r\n    const [sortDirection, setSortDirection] = React.useState<\"desc\" | \"asc\" | undefined>(undefined);\r\n    const [sortType, setSortType] = React.useState<\"number\" | \"string\">(\"string\");\r\n    const pageSize: number = dataTableProvider.pageSize;\r\n\r\n    const colDefs: ColDef[] = dataTableProvider.getColumnDefinition();\r\n    const preIdRowData: any[] = dataTableProvider.getAllRowsData();\r\n    const totalRowCount: number = preIdRowData.length;\r\n\r\n    // Empty row banner\r\n    if (totalRowCount === 0) {\r\n        if (sortByCol !== undefined) { setSortByCol(undefined); }\r\n        if (page !== 0) { setPage(0); }\r\n        if (sortDirection !== undefined) { setSortDirection(undefined); }\r\n        let ret = <React.Fragment />;\r\n        let banner = dataTableProvider.renderBanner? dataTableProvider.renderBanner() : undefined;\r\n        if (banner) { ret = banner }\r\n        return ret;\r\n    }\r\n\r\n    // Shift page down if table loses rows\r\n    if (page * pageSize >= totalRowCount)\r\n    {\r\n        setPage(Math.ceil(totalRowCount / pageSize - 1));\r\n        return <React.Fragment />;\r\n    }\r\n\r\n    // ID rows\r\n    const rowData: { id: number, data: any }[] = preIdRowData.map((rd, index) => { return { id: index, data: rd } });\r\n\r\n    // Sort rows\r\n    if ((sortByCol !== undefined) && (sortDirection !== undefined) && (dataTableProvider.getSortValue !== undefined)) {\r\n        const getSortValue = dataTableProvider.getSortValue;\r\n        const sortMult: number = (sortDirection === \"asc\") ? 1 : -1;\r\n        const comparitor: (...x: any) => number = (sortType === \"number\") ? numberComparitor : stringComparitor;\r\n        rowData.sort((a, b) => { \r\n            const valA = getSortValue(a.data, sortByCol);\r\n            const valB = getSortValue(b.data, sortByCol);\r\n            return sortMult * comparitor(valA, valB) });\r\n    }\r\n\r\n    // Paginate\r\n    const paginizedRowData = rowData.filter((data, index) => (index >= page * pageSize) && (index < (page + 1) * pageSize));\r\n    function changePage(event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) {\r\n        setPage(page);\r\n    }\r\n    \r\n    // Render headers\r\n    const headerCells: JSX.Element[] = [];\r\n    let colNum: number = 0;\r\n    for (const colDef of colDefs) {\r\n        const headerContent = colDef.sortSpec ? buildSortableHeaderCellContent(colDef.headerContent, colNum, colDef.sortSpec.sortType, [sortByCol, setSortByCol], [sortDirection, setSortDirection], [sortType, setSortType]) : colDef.headerContent;\r\n\r\n        headerCells.push(<TableCell key={\"H-\" + colNum} {...colDef.headerProps}>{headerContent}</TableCell>);\r\n        colNum++;\r\n    }\r\n\r\n    // Render rows\r\n    const renderedRows: JSX.Element[] = [];\r\n    for (const row of paginizedRowData) {\r\n        renderedRows.push(\r\n            <TableRow key={row.id}>\r\n                {dataTableProvider.renderRow(row.data)}\r\n            </TableRow>\r\n        )\r\n    }\r\n\r\n    let paperContainerClassName: string = styles.paperContainer;\r\n    if (params.className) {\r\n        paperContainerClassName += \" \" + params.className;\r\n    }\r\n\r\n    return <Paper className={paperContainerClassName} elevation={3}>\r\n        <TableContainer className={styles.tableContainer}>\r\n            <Table>\r\n                <TableHead className={styles.header}>\r\n                    <TableRow>\r\n                        {headerCells}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className={styles.tableBody}>\r\n                    {renderedRows}\r\n                </TableBody>\r\n            </Table>\r\n            <TablePagination\r\n                rowsPerPageOptions={[pageSize]}\r\n                component=\"div\"\r\n                count={totalRowCount}\r\n                rowsPerPage={pageSize}\r\n                page={page}\r\n                onChangePage={changePage}\r\n            />\r\n        </TableContainer>\r\n    </Paper>\r\n}\r\nexport default DataTable;\r\n\r\nfunction stringComparitor(a: string, b: string): number {\r\n    return (a > b) ? 1 : (a === b) ? 0 : -1;\r\n}\r\n\r\nfunction numberComparitor(a: number, b: number): number {\r\n    return a - b;\r\n}\r\n\r\nfunction buildSortableHeaderCellContent(\r\n    headerInnerContent: JSX.Element | string | undefined,\r\n    id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): JSX.Element {\r\n    const [sortByCol] = _sortByCol;\r\n    const [sortDirection] = _sortDirection;\r\n\r\n    return <TableSortLabel\r\n        active={sortByCol === id && sortDirection !== undefined}\r\n        direction={sortByCol === id ? sortDirection : undefined}\r\n        onClick={createSortHandler(id, colSortType, _sortByCol, _sortDirection, _sortType)}>\r\n        {headerInnerContent}\r\n    </TableSortLabel>;\r\n}\r\n\r\nfunction createSortHandler(id: number,\r\n    colSortType: \"number\" | \"string\",\r\n    _sortByCol: StatePair<number | undefined>,\r\n    _sortDirection: StatePair<\"desc\" | \"asc\" | undefined>,\r\n    _sortType: StatePair<\"number\" | \"string\">\r\n): (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void {\r\n    return (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        const [sortByCol, setOrderBy] = _sortByCol;\r\n        const [sortDirection, setSortDirection] = _sortDirection;\r\n        const [, setSortType] = _sortType;\r\n\r\n        let nextSortDirection = sortDirection;\r\n        if (sortByCol === id) {\r\n            if (sortDirection === \"asc\") { nextSortDirection = \"desc\" }\r\n            if (sortDirection === \"desc\") { nextSortDirection = undefined }\r\n            if (sortDirection === undefined) {nextSortDirection = \"asc\"}\r\n        } else {\r\n            nextSortDirection = \"asc\";\r\n        }\r\n        setSortDirection(nextSortDirection);\r\n        setOrderBy(id);\r\n        setSortType(colSortType);\r\n    };\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { WarningBanner } from './minor-ui-components';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nimport styles from './scss/ingredients-table.module.scss';\r\n\r\n//====================================================================================================\r\n\r\ntype RemoveDemonButtonProps = {\r\n    demonId: number;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nfunction RemoveDemonButton(params: RemoveDemonButtonProps): JSX.Element {\r\n\r\n    function onIconButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\r\n        if (params.onRemoveIngredient) {\r\n            params.onRemoveIngredient(params.demonId);\r\n        }\r\n    }\r\n\r\n    return <IconButton onClick={onIconButtonClick} className={styles.removeDemonButton}>\r\n    <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n  </IconButton>\r\n}\r\n\r\n//====================================================================================================\r\n\r\nenum IngredientsSettingsEnum {\r\n    multipleUse = 1,\r\n    mustUse = 2\r\n}\r\ntype CheckboxSettingProps = {\r\n    demonId: number,\r\n    setting: IngredientsSettingsEnum,\r\n    ingredientsSettings: Models.IngredientsSettings\r\n}\r\nfunction CheckboxSetting(params: CheckboxSettingProps): JSX.Element {\r\n    const {demonId, setting, ingredientsSettings} = params;\r\n    let defaultChecked: boolean = false;\r\n    switch (setting) {\r\n        case IngredientsSettingsEnum.mustUse: {\r\n            defaultChecked = ingredientsSettings[demonId].mustUse;\r\n            break;\r\n        }\r\n        case IngredientsSettingsEnum.multipleUse: \r\n        default: {\r\n            defaultChecked = ingredientsSettings[demonId].multipleUse;\r\n        }\r\n    }\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        switch (setting) {\r\n            case IngredientsSettingsEnum.mustUse: {\r\n                ingredientsSettings[demonId].mustUse = event.target.checked;\r\n                break;\r\n            }\r\n            case IngredientsSettingsEnum.multipleUse: \r\n            default: {\r\n                ingredientsSettings[demonId].multipleUse = event.target.checked;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <Checkbox\r\n        className={styles.checkBox}\r\n        defaultChecked={defaultChecked}\r\n        onChange={onCheckboxChange}\r\n        color=\"default\"\r\n    />;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nfunction initializeIngredientsSettings(ingredients: Models.Ingredients, ingredientsSettings: Models.IngredientsSettings) {\r\n    for (const demonId in ingredients) {\r\n        if (!ingredientsSettings[demonId]) {\r\n            ingredientsSettings[demonId] = { mustUse: false, multipleUse: false };\r\n        }\r\n    }\r\n}\r\n\r\n//====================================================================================================\r\n\r\ntype FusionIngredientsTableProps = {\r\n    demonCompendium: DemonCompendium\r\n    ingredients: Models.Ingredients\r\n    ingredientsSettings: Models.IngredientsSettings\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n}\r\nclass FusionIngredientsDataTableProvider implements DataTables.DataTableProvider<Models.Demon> {\r\n\r\n    pageSize: number = 25;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        return [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: {className: styles.nameColumnHeader} },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: {className: styles.raceColumnHeader} },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" } },\r\n            { headerContent: \"Only Show Recipes That Use This Demon\", headerProps: { width: 150, align: \"center\" } },\r\n            { headerContent: \"Can Use Multiple per Recipe\", headerProps: { width: 120, align: \"center\" } },\r\n            {}\r\n        ];\r\n    }\r\n\r\n    getAllRowsData(): Models.Demon[] {\r\n        return this.allRowsData;\r\n    }\r\n\r\n    renderRow(rowData: Models.Demon): JSX.Element {\r\n        return <React.Fragment>\r\n            <TableCell>\r\n                {rowData.name}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.lvl}\r\n            </TableCell>\r\n            <TableCell>\r\n                {rowData.race}\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.mustUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell align=\"center\">\r\n                <CheckboxSetting demonId={rowData.id} setting={IngredientsSettingsEnum.multipleUse} ingredientsSettings={this.ingredientsSettings} />\r\n            </TableCell>\r\n            <TableCell>\r\n                <RemoveDemonButton demonId={rowData.id} onRemoveIngredient={this.onRemoveIngredient} />\r\n            </TableCell>\r\n        </React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.Demon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.name; }\r\n            case 1: { \r\n                return rowData.lvl; }\r\n            case 2: { \r\n                return rowData.race; }\r\n            default: {\r\n                return rowData.name; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        const icon = <WarningIcon className={styles.warningIcon}/>;\r\n        return <WarningBanner message=\"No ingredient demons. Use the section above to add demons to use for fusions.\" icon={icon}/>\r\n    }\r\n\r\n    demonCompendium: DemonCompendium;\r\n    ingredients: Models.Ingredients;\r\n    ingredientsSettings: Models.IngredientsSettings;\r\n    onRemoveIngredient?: (deletedId: number) => void;\r\n\r\n    allRowsData: Models.Demon[];\r\n\r\n    constructor(params: FusionIngredientsTableProps, allRowsData: Models.Demon[]) {\r\n        this.demonCompendium = params.demonCompendium;\r\n        this.ingredients = params.ingredients;\r\n        this.ingredientsSettings = params.ingredientsSettings;\r\n        this.onRemoveIngredient = params.onRemoveIngredient;\r\n\r\n        this.allRowsData = allRowsData;\r\n    }\r\n}\r\n\r\nconst IngredientsTable = (params: FusionIngredientsTableProps): JSX.Element => {\r\n    initializeIngredientsSettings(params.ingredients, params.ingredientsSettings);\r\n    const rowData: Models.Demon[] = React.useMemo(() => {\r\n        let rowData: Models.Demon[] = [];\r\n        for (const demonId in params.ingredients) {\r\n            const demon = params.demonCompendium.getDemonById(Number(demonId));\r\n            if (!demon) { continue; }\r\n            rowData.push(demon);\r\n        }\r\n        return rowData;\r\n    }, [params.ingredients, params.demonCompendium]);\r\n    const dataProvider = new FusionIngredientsDataTableProvider(params, rowData);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n}\r\nexport default React.memo(IngredientsTable);","import React from 'react';\r\n\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport styles from './scss/minor-ui-components.module.scss';\r\n\r\ntype WarningBannerProps = {\r\n    message?: string;\r\n    icon?: JSX.Element;\r\n    className?: string;\r\n}\r\nconst WarningBannerCore = (params: WarningBannerProps): JSX.Element => {\r\n    let icon;\r\n    if (params.icon) {\r\n        icon = <div className={styles.icon}>{params.icon}</div>\r\n    }\r\n    return <Paper className={params.className? params.className : styles.warningBanner}>\r\n        {icon}<span>{params.message}</span>\r\n    </Paper>\r\n}\r\nexport const WarningBanner = React.memo(WarningBannerCore);","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\n\r\nimport DataTable, * as DataTables from './data-table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport {WarningBanner} from './minor-ui-components';\r\n\r\nimport styles from './scss/results-table.module.scss';\r\n\r\nclass FusionResultsDataTableProvider implements DataTables.DataTableProvider<Models.FusedDemon> {\r\n\r\n    pageSize: number = 50;\r\n\r\n    getColumnDefinition(): DataTables.ColDef[] {\r\n        const colDefs: DataTables.ColDef[] = [\r\n            { headerContent: \"Demon\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.nameColumn } },\r\n            { headerContent: \"Level\", sortSpec: { sortType: \"number\" }, headerProps: { className: styles.lvlColumn } },\r\n            { headerContent: \"Race\", sortSpec: { sortType: \"string\" }, headerProps: { className: styles.raceColumn } },\r\n        ];\r\n        const statsName: string[] = Models.Demon.statsName;\r\n        for (let i = 0; i < statsName.length; i++) {\r\n            colDefs.push(\r\n                { headerContent: statsName[i], headerProps: { className: styles.statColumn }, sortSpec: { sortType: \"number\" } }\r\n            );\r\n        }\r\n        colDefs.push({ headerContent: \"Recipe\" });\r\n        return colDefs;\r\n    }\r\n\r\n    getAllRowsData(): Models.FusedDemon[] {\r\n        const resultsAsRowsArray: Models.FusedDemon[] = [];\r\n        for (const ingCount in this.fusionResults) {\r\n            if (Number(ingCount) === 1) { continue; }\r\n            for (const demonId in this.fusionResults[ingCount]) {\r\n                for (const fusedDemon of this.fusionResults[ingCount][demonId]) {\r\n                    resultsAsRowsArray.push(fusedDemon);\r\n                }\r\n            }\r\n        }\r\n        return resultsAsRowsArray;\r\n    }\r\n\r\n    renderRow(fusedDemon: Models.FusedDemon): JSX.Element {\r\n        const renderedRow: JSX.Element[] = [];\r\n        let keyId: number = 0;\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell className={styles.nameColumn}>\r\n                {fusedDemon.demon.name}\r\n            </TableCell>\r\n            <TableCell className={styles.lvlColumn}>\r\n                {fusedDemon.demon.lvl}\r\n            </TableCell>\r\n            <TableCell className={styles.raceColumn}>\r\n                {fusedDemon.demon.race}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        for (const stat of fusedDemon.demon.stats) {\r\n            renderedRow.push(<React.Fragment key={keyId}>\r\n                <TableCell className={styles.statColumn}>\r\n                    {stat}\r\n                </TableCell>\r\n            </React.Fragment>);\r\n            keyId++;\r\n        }\r\n        renderedRow.push(<React.Fragment key={keyId}>\r\n            <TableCell>\r\n                {this.renderRecipe(fusedDemon)}\r\n            </TableCell>\r\n        </React.Fragment>);\r\n        keyId++;\r\n        return <React.Fragment>{renderedRow}</React.Fragment>;\r\n    }\r\n    \r\n    getSortValue(rowData: Models.FusedDemon, sortByCol: number): string | number {\r\n        switch(sortByCol) {\r\n            case 0: { \r\n                return rowData.demon.name; }\r\n            case 1: { \r\n                return rowData.demon.lvl; }\r\n            case 2: { \r\n                return rowData.demon.race; }\r\n            default: {\r\n                return rowData.demon.stats[sortByCol-3]; }\r\n        };\r\n    }\r\n\r\n    renderBanner(): JSX.Element {\r\n        return <WarningBanner message=\"No results found\" />\r\n    }\r\n\r\n    private renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n        if (demon.isFused()) {\r\n            return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n        } else {\r\n            return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n        }\r\n    }\r\n\r\n    private renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let priorRecipes: JSX.Element = <React.Fragment/>;\r\n    if (demon.ingredients) {\r\n        let curRecipe: JSX.Element = <React.Fragment/>;\r\n        let isFirstLoop: boolean = true;\r\n        for (const ingDemon of demon.ingredients) {\r\n            priorRecipes = <React.Fragment>{priorRecipes}{this.renderRecipe(ingDemon)}</React.Fragment>;\r\n            const separator = isFirstLoop ? undefined : <React.Fragment> + </React.Fragment>;\r\n            curRecipe = <React.Fragment>{curRecipe}{separator}{this.renderDemonName(ingDemon)}</React.Fragment>\r\n            isFirstLoop = false;\r\n        }\r\n        const nameR = this.renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {priorRecipes}\r\n            <div className={styles.recipeLine}>\r\n                {curRecipe} = {nameR}\r\n            </div>\r\n        </React.Fragment>;\r\n    }\r\n    return priorRecipes;\r\n}\r\n\r\n    fusionResults: Models.FusionResults;\r\n\r\n    constructor(params: FusionResultsTableProps) {\r\n        this.fusionResults = params.fusionResults;\r\n    }\r\n}\r\n\r\ntype FusionResultsTableProps = {\r\n    fusionResults: Models.FusionResults\r\n}\r\nconst ResultsTable = (params: FusionResultsTableProps): JSX.Element => {\r\n    const dataProvider = new FusionResultsDataTableProvider(params);\r\n    return <DataTable dataTableProvider={dataProvider} className={styles.dataTable}/>\r\n}\r\nexport default React.memo(ResultsTable);","import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport styles from './scss/settings-panel.module.scss';\r\n\r\nexport class UserSettings {\r\n    charLvl: number = 99;\r\n    maxIngredient: number = 3;\r\n    useTripleFusion: boolean = false;\r\n\r\n    useTripleFusionSettingIsVisible: boolean = false;\r\n}\r\nexport type SettingsPanelEventHandlers = { toggleVisibility?: Function }\r\ntype SettingsPanelProps = {\r\n    eventHandlers: SettingsPanelEventHandlers,\r\n    settings: UserSettings\r\n}\r\nexport default function SettingsPanel(params: SettingsPanelProps) : JSX.Element {\r\n    const {eventHandlers, settings } = params;\r\n    \r\n    const [isVisible, setIsVisible] = useState<boolean>(false);\r\n    const [charLvlFieldValue, setCharLvlFieldValue] = useState<number | string>(settings.charLvl);\r\n    const [maxIngFieldValue, setMaxIngFieldValue] = useState<number | string>(settings.maxIngredient);\r\n\r\n    function onVisibilityToggle(): void {\r\n        setIsVisible(!isVisible);\r\n    }\r\n    eventHandlers.toggleVisibility = onVisibilityToggle;\r\n\r\n    function onSetCharLvl(newValue: number): void {\r\n        settings.charLvl = newValue;\r\n    }\r\n\r\n    function onSetMaxIng(newValue: number): void {\r\n        settings.maxIngredient = newValue;\r\n    }\r\n\r\n    function onSetUseTripleFusion(newValue: boolean): void {\r\n        settings.useTripleFusion = newValue;\r\n    }\r\n\r\n    const settingsPanelStyle: React.CSSProperties = {};\r\n    if (!isVisible) { settingsPanelStyle.height = \"0px\"; }\r\n    return <div style={settingsPanelStyle} className={styles.settingsPanel}>\r\n        <Paper variant=\"outlined\" className={styles.paper}>\r\n            <h2>Settings</h2>\r\n            <NumberSettings\r\n                label=\"Character level\"\r\n                min={1}\r\n                max={99}\r\n                emptyFieldValue={99}\r\n                fieldStateValueAndSetter={[charLvlFieldValue, setCharLvlFieldValue]}\r\n                onSetSettings={onSetCharLvl} />\r\n            <NumberSettings\r\n                label=\"Max ingredients per recipe\"\r\n                min={2}\r\n                max={5}\r\n                emptyFieldValue={3}\r\n                fieldStateValueAndSetter={[maxIngFieldValue, setMaxIngFieldValue]}\r\n                onSetSettings={onSetMaxIng} />\r\n            {settings.useTripleFusionSettingIsVisible ?\r\n                <CheckboxSettings\r\n                    label=\"Allow triple fusion\"\r\n                    checked={settings.useTripleFusion}\r\n                    onSetSettings={onSetUseTripleFusion}\r\n                /> : undefined}\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\ntype NumberSettingsProp = {\r\n    label: string,\r\n    fieldStateValueAndSetter: [number | string, React.Dispatch<React.SetStateAction<number | string>>],\r\n    onSetSettings: (newValue: number) => void,\r\n    min: number,\r\n    max: number,\r\n    emptyFieldValue: number\r\n}\r\nfunction NumberSettings(params: NumberSettingsProp): JSX.Element {\r\n    const {label, fieldStateValueAndSetter: stateValueAndSetter, onSetSettings, min, max, emptyFieldValue} = params;\r\n    const [stateValue, stateSetter] = stateValueAndSetter;\r\n\r\n    function onNumberFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let value: number | string = event.target.value;\r\n        if (value === \"\") {\r\n            stateSetter(\"\");\r\n            onSetSettings(emptyFieldValue);\r\n            return;\r\n        }\r\n        const valueAsNumber = Number(value);\r\n        if (valueAsNumber >= min && valueAsNumber <= max) {\r\n            stateSetter(valueAsNumber);\r\n            onSetSettings(valueAsNumber);\r\n        }\r\n    }\r\n    return <div className={`${styles.settingsLine} ${styles.numberSettings}`}>\r\n        <span className={styles.numberFieldLabel}>{label}</span>\r\n        <TextField\r\n            style={{ width: \"50px\" }}\r\n            type=\"number\"\r\n            InputLabelProps={{ shrink: true }}\r\n            inputProps={{ min: min, max: max, step: 1 }}\r\n            variant=\"outlined\"\r\n            value={stateValue}\r\n            onChange={onNumberFieldChange}\r\n        />\r\n    </div>;\r\n}\r\n\r\ntype CheckboxSettingsProps = {\r\n    label: string,\r\n    checked: boolean,\r\n    onSetSettings: (newValue: boolean) => void\r\n}\r\nfunction CheckboxSettings(params: CheckboxSettingsProps): JSX.Element {\r\n    const {label, checked, onSetSettings} = params;\r\n\r\n    function onCheckboxChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        onSetSettings(event.target.checked);\r\n    }\r\n\r\n    return <div className={`${styles.settingsLine}`}>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    defaultChecked={checked}\r\n                    onChange={onCheckboxChange}\r\n                    color=\"default\"\r\n                />}\r\n            label={label} />\r\n    </div>;\r\n}","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './scss/ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by entering level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        const acceptedKeys: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let keyIsAccepted: boolean = false;\r\n        for (const acceptedKey of acceptedKeys) {\r\n            if (key === acceptedKey) {\r\n                keyIsAccepted = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!keyIsAccepted) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport IngredientsTable from './ingredients-table';\r\nimport ResultsTable from './results-table';\r\nimport SettingsPanel, { UserSettings, SettingsPanelEventHandlers } from './settings-panel';\r\nimport DemonAdder from './demon-adder';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport styles from './scss/fusion-calculator.module.scss';\r\n\r\nconst MAX_FUSION_INGREDIENT_HARD_CAP = 5;\r\n\r\nfunction calculateAllFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings): Models.FusionResults {\r\n  const myFusionResults: Models.FusionResults = {};\r\n  for (let size = 1; size <= settings.maxIngredient && size <= MAX_FUSION_INGREDIENT_HARD_CAP; size++) {\r\n    myFusionResults[size] = {};\r\n  }\r\n\r\n  for (const demonId in ingredients) {\r\n    const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n    if (!demon) { continue; }\r\n    const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n    if (!myFusionResults[1][demon.id]) {\r\n      myFusionResults[1][demon.id] = [];\r\n    }\r\n    myFusionResults[1][demon.id].push(fusedDemon);\r\n  }\r\n\r\n  for (let ingCountR = 2; ingCountR <= settings.maxIngredient && ingCountR <= MAX_FUSION_INGREDIENT_HARD_CAP; ingCountR++) {\r\n    for (let ingCountA = ingCountR - 1; ingCountA >= (ingCountR / 2); ingCountA--) {\r\n      const ingCountB: number = ingCountR - ingCountA;\r\n      const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n      for (const idA in myFusionResults[ingCountA]) {\r\n        if (myFusionResults[ingCountA][idA].length === 0) { continue; }\r\n        const speciesA: Models.Demon = myFusionResults[ingCountA][idA][0].demon;\r\n        for (const idB in myFusionResults[ingCountB]) {\r\n          if (myFusionResults[ingCountB][idB].length === 0) { continue; }\r\n          const speciesB: Models.Demon = myFusionResults[ingCountB][idB][0].demon;\r\n\r\n          // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n          if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n          const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(myFusionResults, settings, speciesR, ingCountR, [speciesA, speciesB])) { continue; }\r\n\r\n          const resultingFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, myFusionResults[ingCountA][idA], myFusionResults[ingCountB][idB]);\r\n          if (!myFusionResults[ingCountR][speciesR.id]) { myFusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultingFusedDemons) {\r\n            myFusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        speciesUsedAsA[speciesA.id] = true;\r\n      }\r\n    }\r\n\r\n    if (settings.useTripleFusion) {\r\n      calculateTripleFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings, myFusionResults, ingCountR);\r\n    }\r\n  }\r\n\r\n  // At this point, we're completely finished with all fusion combinations\r\n  // Re-traverse the entire results and purge fusions that don't satisfy various constraints/settings\r\n  const mustUseDemons: Models.MustUseDemonsMap = prepareIngredientsSettingsForFinalFilter(ingredientsSettings, ingredients);\r\n  let filterFunction = filterDemonsAfterCalculation.bind(undefined, mustUseDemons);\r\n  for (const ingCount in myFusionResults) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    for (const id in myFusionResults[ingCount]) {\r\n      let demonAry: Models.FusedDemon[] = myFusionResults[ingCount][id];\r\n      demonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() });\r\n      demonAry = demonAry.filter(filterFunction);\r\n      myFusionResults[ingCount][id] = demonAry;\r\n    }\r\n  }\r\n\r\n  return myFusionResults;\r\n}\r\n\r\nfunction calculateTripleFusionCombinations(ingredients: Models.Ingredients, demonCompendium: DemonCompendium, settings: UserSettings, ingredientsSettings: Models.IngredientsSettings, fusionResults: Models.FusionResults, ingCountR: number): void {\r\n  let ingCounts: number[] = [];\r\n  while (getNextTripleFusionIngCounts(ingCounts, ingCountR)) {\r\n    const [ingCountA, ingCountB, ingCountC] = ingCounts;\r\n    const alreadyCalculatedAsA: { [id: number]: boolean } = {};\r\n    for (const idA in fusionResults[ingCountA]) {\r\n      if (fusionResults[ingCountA][idA].length === 0) { continue; }\r\n      const speciesA: Models.Demon = fusionResults[ingCountA][idA][0].demon;\r\n\r\n      const alreadyCalculatedAsB: { [id: number]: boolean } = {};\r\n      for (const idB in fusionResults[ingCountB]) {\r\n        if (alreadyCalculatedAsA[Number(idB)]) { continue; }\r\n        if (fusionResults[ingCountB][idB].length === 0) { continue; }\r\n        const speciesB: Models.Demon = fusionResults[ingCountB][idB][0].demon;\r\n\r\n        for (const idC in fusionResults[ingCountC]) {\r\n          if (alreadyCalculatedAsA[Number(idC)]) { continue; }\r\n          if (alreadyCalculatedAsB[Number(idC)]) { continue; }\r\n          if (fusionResults[ingCountC][idC].length === 0) { continue; }\r\n          const speciesC: Models.Demon = fusionResults[ingCountC][idC][0].demon;\r\n          const speciesR: Models.Demon | undefined = demonCompendium.tripleFuseDemons(speciesA, speciesB, speciesC);\r\n          if (!speciesR) { continue; }\r\n          if (!filterDemonsAfterSpeciesFusion(fusionResults, settings, speciesR, ingCountR, [speciesA, speciesB, speciesC])) { continue; }\r\n          const resultFusedDemons: Models.FusedDemon[] = crissCrossFusedDemons(speciesR, ingredientsSettings, fusionResults[ingCountA][idA], fusionResults[ingCountB][idB], fusionResults[ingCountC][idC]);\r\n          if (!fusionResults[ingCountR][speciesR.id]) { fusionResults[ingCountR][speciesR.id] = []; }\r\n          for (const fusedDemon of resultFusedDemons) {\r\n            fusionResults[ingCountR][speciesR.id].push(fusedDemon);\r\n          }\r\n        }\r\n        alreadyCalculatedAsB[speciesB.id] = true;\r\n      }\r\n      alreadyCalculatedAsA[speciesA.id] = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNextTripleFusionIngCounts(fusionIngCounts: number[], ingCountR: number): boolean {\r\n  if (ingCountR < 3) { return false; }\r\n  if (fusionIngCounts.length < 3) { \r\n    fusionIngCounts[0] = ingCountR - 2;\r\n    fusionIngCounts[1] = 1;\r\n    fusionIngCounts[2] = 1;\r\n    return true;\r\n  }\r\n  for (let i = fusionIngCounts.length - 2; i >= 0; i--) {\r\n    const j: number = i + 1;\r\n    if (fusionIngCounts[i] - fusionIngCounts[j] >= 2) {\r\n      fusionIngCounts[i] = fusionIngCounts[i] - 1;\r\n      fusionIngCounts[j] = fusionIngCounts[j] + 1;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction filterDemonsAfterSpeciesFusion(fusionResults: Models.FusionResults, settings: UserSettings, speciesR: Models.Demon, ingCountR: number, speciesIngs: Models.Demon[]): boolean {\r\n  // throw out the resulting species if we knew how to make it with fewer ingredients\r\n  let canBeMadeWithLessIngredient: boolean = false;\r\n  for (let sizeCheck = ingCountR - 1; sizeCheck >= 1; sizeCheck--) {\r\n    if (fusionResults[sizeCheck][speciesR.id]) {\r\n      canBeMadeWithLessIngredient = true;\r\n      break;\r\n    }\r\n  }\r\n  if (canBeMadeWithLessIngredient) { return false; }\r\n\r\n  if (speciesR.lvl > settings.charLvl) { return false; }\r\n\r\n  // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n  if (ingCountR === settings.maxIngredient) {\r\n    for (const speciesIng of speciesIngs) {\r\n      if (speciesR.lvl < speciesIng.lvl) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCrissCross(ingSettings: Models.IngredientsSettings, demon: Models.FusedDemon): boolean {\r\n  const baseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const id in baseIngCount) {\r\n    if (baseIngCount[id] > 1 && !ingSettings[id].multipleUse) { return false; }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDemonsAfterCalculation(mustUseDemons: Models.MustUseDemonsMap, demon: Models.FusedDemon): boolean {\r\n  const myMustUseDemons = {...mustUseDemons};\r\n  const demonBaseIngCount = demon.getBaseIngredientsCounts();\r\n  for (const demonId in demonBaseIngCount) {\r\n    delete myMustUseDemons[demonId];\r\n  }\r\n  if (Object.keys(myMustUseDemons).length > 0) { return false; }\r\n  return true;\r\n}\r\n\r\nfunction prepareIngredientsSettingsForFinalFilter(ingSettings: Models.IngredientsSettings, ingredients: Models.Ingredients): Models.MustUseDemonsMap {\r\n  const mustUseDemons: Models.MustUseDemonsMap = {};\r\n  for (const id in ingredients) {\r\n    if (ingSettings[id].mustUse) { mustUseDemons[id] = true };\r\n  }\r\n  return mustUseDemons;\r\n}\r\n\r\nfunction crissCrossFusedDemons(resultSpecies: Models.Demon, ingredientsSettings: Models.IngredientsSettings, ...ingredients: Models.FusedDemon[][]): Models.FusedDemon[] {\r\n  const indeces: number[] = [];\r\n  const ret: Models.FusedDemon[] = [];\r\n  for (let i = 0; i < ingredients.length; i++) { indeces.push(0); }\r\n  while (true) {\r\n    const fusedDemonIngredientsHistory: Models.FusedDemon[] = [];\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      fusedDemonIngredientsHistory.push(ingredients[i][indeces[i]]);\r\n    }\r\n    ret.push(new Models.FusedDemon(resultSpecies, fusedDemonIngredientsHistory));\r\n\r\n    // Increment the indeces\r\n    let hasCarry: boolean = true;\r\n    for (let i = indeces.length - 1; i >= 0; i--) {\r\n      let index: number = indeces[i];\r\n      if (hasCarry) { index = index + 1; hasCarry = false; }\r\n      if (index >= ingredients[i].length) { index = 0; hasCarry = true; }\r\n      indeces[i] = index;\r\n      if (!hasCarry) { break; }\r\n    }\r\n    if (hasCarry) { break; }\r\n  }\r\n  \r\n  return ret.filter(filterDemonsAfterCrissCross.bind(undefined, ingredientsSettings));;\r\n}\r\n\r\nfunction hasFusionResult(fusionResults: Models.FusionResults): boolean {\r\n  let hasFusionResult = false;\r\n  for (const ingCount in fusionResults) {\r\n    if (Number(ingCount) === 1) { continue; }\r\n    if (Object.keys(fusionResults[ingCount]).length > 0) { hasFusionResult = true; break; }\r\n  }\r\n  return hasFusionResult;\r\n}\r\n\r\n//====================================================================================================\r\n\r\nlet ingredients: Models.Ingredients;\r\nlet setIngredients: React.Dispatch<React.SetStateAction<Models.Ingredients>>;\r\nfunction removeDemonFromIngredients(demonId: number): void {\r\n  const newIngredients = { ...ingredients };\r\n  delete newIngredients[demonId];\r\n  setIngredients(newIngredients);\r\n}\r\nlet ingredientsSettings: Models.IngredientsSettings = {};\r\n\r\nfunction initializeUserSettings(demonCompendium: DemonCompendium): UserSettings {\r\n  const settings = new UserSettings();\r\n  settings.useTripleFusion = demonCompendium.usePersonaTripleFusionMechanic;\r\n  settings.useTripleFusionSettingIsVisible = demonCompendium.usePersonaTripleFusionMechanic;\r\n  return settings;\r\n}\r\n\r\nexport default function FusionByResultsCalculator(params: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = params;\r\n  [ingredients, setIngredients] = useState<Models.Ingredients>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>({});\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  const settingsPanelEventHandlers: SettingsPanelEventHandlers = {};\r\n  let [wrappedSettings] = useState<UserSettings[]>([initializeUserSettings(demonCompendium)]);\r\n  const settings = wrappedSettings[0];\r\n\r\n  const fusionResultSectionHeader = useRef<HTMLHeadingElement>(null);\r\n\r\n  useEffect(()=>{\r\n    if (hasFusionResult(fusionResults)) {\r\n      fusionResultSectionHeader.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [fusionResults]);\r\n\r\n  function addDemonToIngredients(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function onCalculateButtonClick(): void {\r\n    setFusionResults(calculateAllFusionCombinations(ingredients, demonCompendium, settings, ingredientsSettings));\r\n  }\r\n\r\n  function onSettingsButtonClick(): void {\r\n    if (settingsPanelEventHandlers.toggleVisibility) {\r\n      settingsPanelEventHandlers.toggleVisibility();\r\n    }\r\n  }\r\n\r\n  function onResetButtonClick(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n    ingredientsSettings = {};\r\n\r\n    const newFusionResults = {};\r\n    setFusionResults(newFusionResults);\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.fusionRecommender}>\r\n      <h2>Add demons to use as fusion ingredients</h2>\r\n      <div className={styles.addDemonsAndButtonsRowContainer}>\r\n        <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredients} />\r\n        <div className={styles.buttonsRow}>\r\n          <Button className={styles.calculateButton} variant=\"outlined\" onClick={onCalculateButtonClick} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n          <Button className={styles.settingsButton} variant=\"outlined\" onClick={onSettingsButtonClick}><SettingsIcon /></Button>\r\n          <Button className={styles.resetButton} variant=\"outlined\" onClick={onResetButtonClick}><ReplayIcon />Reset</Button>\r\n        </div>\r\n      </div>\r\n      <SettingsPanel key={resetterKey} settings={settings} eventHandlers={settingsPanelEventHandlers} />\r\n      <h2>Fusion Ingredients</h2>\r\n      <IngredientsTable \r\n        demonCompendium={demonCompendium}\r\n        ingredients={ingredients}\r\n        ingredientsSettings={ingredientsSettings}\r\n        onRemoveIngredient={removeDemonFromIngredients} />\r\n      <h2 ref={fusionResultSectionHeader}>Results</h2>\r\n      <ResultsTable fusionResults={fusionResults} />\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionByResultsCalculator from './ui-components/fusion-calculator';\r\n\r\nimport './App.scss';\r\nimport { Tab, Tabs } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\",\r\n    fontSize: 14\r\n  }\r\n});\r\n\r\nfunction loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/desu2/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const presetJsonPromise = import(\"./data/desu2/presets.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], undefined, loadedJsons[2]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nfunction loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonJsonPromise = import(\"./data/p4g/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./data/p4g/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const settingsJsonPromise = import(\"./data/p4g/fusion-settings.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonJsonPromise, fusionChartJsonPromise, settingsJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    setLoadedCompendiumCallback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nenum GameTab {\r\n  person4Golden = 0,\r\n  devilSurvivor2 = 1\r\n}\r\n\r\nfunction loadGameData(game: GameTab, setLoadedCompendiumCallback: (demonCompendium: DemonCompendium) => void): void {\r\n  switch(game) {\r\n    case GameTab.person4Golden:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    case GameTab.devilSurvivor2:\r\n      loadDesu2DemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n    default:\r\n      loadPersona4GoldenDemonCompendium(setLoadedCompendiumCallback);\r\n      break;\r\n  }\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const [demonCompendium, setDemonCompendium] = useState<DemonCompendium | undefined>(undefined);\r\n  const [gameTabPosition, setGameTabPosition] = useState<GameTab>(GameTab.person4Golden);\r\n\r\n  useEffect(()=>{\r\n    loadGameData(gameTabPosition, setDemonCompendium);\r\n  }, [gameTabPosition]);\r\n\r\n  const handleGameTabChange = (event: React.ChangeEvent<{}>, newValue: GameTab) => {\r\n    setDemonCompendium(undefined);\r\n    setGameTabPosition(newValue);\r\n  };\r\n\r\n  let fusionRecommender: JSX.Element | undefined = (demonCompendium) ? <FusionByResultsCalculator demonCompendium={demonCompendium} /> : undefined;\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n        <header>\r\n          <h1>MegaTen Fusion by Results Calculator</h1>\r\n        </header>\r\n        <Tabs value={gameTabPosition} onChange={handleGameTabChange} aria-label=\"simple tabs example\">\r\n          <Tab label=\"Persona 4 Golden\" />\r\n          <Tab label=\"Devil Survivor 2\" />\r\n        </Tabs>\r\n        <div className=\"appBody\">\r\n          {fusionRecommender}\r\n        </div>\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"results-table_dataTable__BqyI6\",\"nameColumn\":\"results-table_nameColumn__3-ncz\",\"lvlColumn\":\"results-table_lvlColumn__35Aqx\",\"raceColumn\":\"results-table_raceColumn__34cLH\",\"statColumn\":\"results-table_statColumn__3szBY\",\"baseIngredientName\":\"results-table_baseIngredientName__3M4Ba\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dataTable\":\"ingredients-table_dataTable__3eHDj\",\"checkBox\":\"ingredients-table_checkBox__3TQeR\",\"nameColumnHeader\":\"ingredients-table_nameColumnHeader__6MDJR\",\"raceColumnHeader\":\"ingredients-table_raceColumnHeader__1WXYk\",\"removeDemonButton\":\"ingredients-table_removeDemonButton__3uoAu\",\"removeDemonButtonIcon\":\"ingredients-table_removeDemonButtonIcon__2l4m2\",\"warningIcon\":\"ingredients-table_warningIcon__p_Iu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsPanel\":\"settings-panel_settingsPanel__Jlbex\",\"paper\":\"settings-panel_paper__ee3p0\",\"settingsLine\":\"settings-panel_settingsLine__1HRFl\",\"numberSettings\":\"settings-panel_numberSettings__RpSac\",\"numberFieldLabel\":\"settings-panel_numberFieldLabel__30ovM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__1Nq5q\",\"subAdderContainer\":\"ui-components_subAdderContainer__2g7zq\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1oqYT\",\"addDemonButton\":\"ui-components_addDemonButton__1Md5N\",\"removeDemonButtonIcon\":\"ui-components_removeDemonButtonIcon__1s3G_\",\"fusionResultsTable\":\"ui-components_fusionResultsTable__1u69P\",\"baseIngredientName\":\"ui-components_baseIngredientName__2H65N\",\"recipeLine\":\"ui-components_recipeLine__3sZ1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionRecommender\":\"fusion-calculator_fusionRecommender__1Bw9d\",\"addDemonsAndButtonsRowContainer\":\"fusion-calculator_addDemonsAndButtonsRowContainer__3dth0\",\"buttonsRow\":\"fusion-calculator_buttonsRow__ZN0Ep\",\"calculateButton\":\"fusion-calculator_calculateButton__2n6WW\",\"shining\":\"fusion-calculator_shining__1xfZn\",\"settingsButton\":\"fusion-calculator_settingsButton__cvpOj\",\"resetButton\":\"fusion-calculator_resetButton__zA3Vs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paperContainer\":\"data-table_paperContainer__yXedv\",\"tableContainer\":\"data-table_tableContainer__2trr1\",\"header\":\"data-table_header__19DGp\",\"tableBody\":\"data-table_tableBody__1DiId\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"warningBanner\":\"minor-ui-components_warningBanner__27C77\",\"icon\":\"minor-ui-components_icon__1xTlq\"};"],"sourceRoot":""}
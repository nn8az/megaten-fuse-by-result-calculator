{"version":3,"sources":["reportWebVitals.ts","data/data-models.ts","data/demon-compendium.ts","ui-components/ingredients-table.tsx","ui-components/fusion-result-table.tsx","ui-components/demon-adder.tsx","ui-components/fusion-recommender.tsx","App.tsx","index.tsx","ui-components/ui-components.module.scss","ui-components/fusion-recommender.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Demon","id","name","lvl","race","stats","rank","uniqueRecipe","this","statsName","FusedDemon","demon","ingredientA","ingredientB","undefined","str","separator","strA","toRecipeString","strB","toBaseIngredientSearchString","getHighestIngredientLvl","matLvlA","matLvlB","DemonsPreset","caption","demons","ELEMENT_RACE","DemonCompendium","demonListJSON","fusionChartJSON","presetJSON","demonJson","fusionChartJson","presetJson","demonAry","raceFusionTable","demonsPresets","idMap","nameMap","raceLvlDemonMap","parseDemons","prepDemonIds","parseRaceFusionTable","prepRaceLvlInfo","parsePresets","demonA","demonB","fuseDemonWithElement","fuseDemonSameRaceNoEle","fuseDemonDiffRaceNoEle","length","randomDemonIndex","Math","floor","random","elements","randomElementIndex","getDemonByName","Models","demonName","push","row","col","raceA","races","raceB","raceC","presets","preset","presetModel","sort","demon1","demon2","getLvlTableForRace","indexOf","Object","keys","map","key","Number","raceR","getFusionResultRace","lvlTableR","modedLvlTableR","lvlIndexR","i","lvlR","getDemonFromRaceLvl","elementNameR","element","raceId","elementFusionTable","demonRankChange","lvlTable","resultRank","FusionIngredientsTable","params","demonCompendium","ingredients","onRemoveIngredient","columns","field","headerName","flex","resizable","width","headerAlign","disableColumnMenu","sortable","renderCell","cellParams","demonId","value","IconButton","aria-label","onClick","raiseRemoveIngredientEvent","bind","className","styles","removeDemonButtonIcon","deletedId","ingredientsAsRowsArray","index","demonIdAsNumber","getDemonById","gridWrapperRef","useRef","useEffect","gridDiv","current","firstElementChild","style","height","maxWidth","ref","rows","disableSelectionOnClick","autoHeight","density","pageSize","rowsPerPageOptions","renderDemonName","isFused","Fragment","baseIngredientName","renderRecipe","ret","nameA","nameB","nameR","recipeLine","renderRecipeWrapper","getRecipeAsString","valueParam","FusionResultTable","fusionResults","valueGetter","size","fusedDemon","demonRow","a","b","gridEl","querySelector","rowHeight","fusionResultsTable","DemonAdder","onAddDemon","presetSection","getDemonPresets","AddByPreset","demonAdderContainer","AddByDemon","AddByLevelRange","useState","selectedDemon","setSelectedDemon","searchOptions","getDemonArray","raiseOnAddDemonEvent","subAdderContainer","Autocomplete","options","onChange","event","selection","onKeyPress","getOptionLabel","option","getOptionSelected","autoHighlight","autoSelect","renderInput","TextField","label","variant","AddButton","minLvl","setMinLvl","maxLvl","setMaxLvl","preventDefault","stopPropagation","valueSetterFunc","target","valueAsNumber","lvlFieldsContainer","type","InputLabelProps","shrink","selectedOption","setSelectedOption","Button","addDemonButton","FusionRecommender","setIngredients","setFusionResults","resetterKey","setResetterKey","fusionResultSectionHeader","fusionRecommender","addDemonsAndCalcResetButtonContainer","newIngredients","calcResetButtonContainer","calculateButton","myFusionResults","fusMatCount","matCountA","matCountB","speciesUsedAsA","speciesA","speciesB","speciesR","fuseDemons","canBeMadeWithLessIngredient","sizeCheck","demonR","fusionMatCount","filteredDemonAry","filter","isWeakerThanIngredients","setTimeout","scrollIntoView","behavior","block","inline","disabled","resetButton","theme","createMuiTheme","palette","typography","fontFamily","fontSize","App","setDemonCompendium","callback","demonListJsonPromise","importedJson","default","fusionChartJsonPromise","presetJsonPromise","Promise","all","loadedJsons","newDemonCompendium","loadDesu2DemonCompendium","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cf3c65bc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export class Demon {\r\n    id: number = 0;\r\n    name: string;\r\n    lvl: number;\r\n    race: string;\r\n    rank: number = 0;\r\n    uniqueRecipe: boolean = false;\r\n    stats: number[] = [];\r\n    static statsName: string[] = [];\r\n\r\n    constructor(id: number, name: string, lvl: number, race: string, stats: number[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.lvl = lvl;\r\n        this.race = race;\r\n        this.stats = stats;\r\n    }\r\n}\r\n\r\nexport class FusedDemon {\r\n    demon: Demon;\r\n    ingredientA?: FusedDemon;\r\n    ingredientB?: FusedDemon;\r\n\r\n    constructor(demon: Demon, ingredientA?: FusedDemon, ingredientB?: FusedDemon) {\r\n        this.demon = demon;\r\n        this.ingredientA = ingredientA;\r\n        this.ingredientB = ingredientB;\r\n    }\r\n\r\n    public isFused(): boolean {\r\n        return this.ingredientA !== undefined && this.ingredientB !== undefined;\r\n    }\r\n\r\n    public toRecipeString(): string {\r\n        let str: string = \"\";\r\n        const separator: string = \" | \";\r\n        if (this.ingredientA && this.ingredientB) {\r\n            const strA: string = this.ingredientA.toRecipeString();\r\n            if (strA) { if (str) {str += separator} str += strA };\r\n            const strB: string = this.ingredientB.toRecipeString();\r\n            if (strB) { if (str) {str += separator} str += strB };\r\n            if (str) {str += separator}\r\n            str += this.ingredientA.demon.name + \" + \" + this.ingredientB.demon.name + \" = \" + this.demon.name;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public toBaseIngredientSearchString(): string {\r\n        let str: string = \"\";\r\n        if (this.ingredientA && this.ingredientB) {\r\n            str += this.ingredientA.toBaseIngredientSearchString();\r\n            str += this.ingredientB.toBaseIngredientSearchString();\r\n            return str;\r\n        } else {\r\n            return this.demon.name;\r\n        }\r\n    }\r\n\r\n    public isWeakerThanIngredients(): boolean {\r\n        return this.demon.lvl < this.getHighestIngredientLvl();\r\n    }\r\n\r\n    private getHighestIngredientLvl(): number {\r\n        let lvl: number = 0;\r\n        if (this.ingredientA && this.ingredientB) {\r\n            let matLvlA: number = this.ingredientA.getHighestIngredientLvl();\r\n            if (matLvlA > lvl) { lvl = matLvlA; }\r\n            let matLvlB: number = this.ingredientB.getHighestIngredientLvl();\r\n            if (matLvlB > lvl) { lvl = matLvlB };\r\n            return lvl;\r\n        } else {\r\n            return this.demon.lvl;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DemonsPreset {\r\n    caption: string = \"\";\r\n    demons: Demon[] = [];\r\n\r\n    constructor(caption: string, demons: Demon[]) {\r\n        this.caption = caption;\r\n        this.demons = demons;\r\n    }\r\n}\r\n\r\nexport type IngredientDemons = {[demonId: number]: boolean};\r\nexport type FusionResults = { [ingredientCount: number]: { [demonName: string]: FusedDemon[] } };","import * as Models from './data-models';\r\n\r\nconst ELEMENT_RACE: string = \"Element\";\r\n\r\ntype DemonInfo = { lvl: number, race: string, stats: number[] };\r\ntype DemonJson = { demons: {[demonName: string]: DemonInfo}, statsName: string[] };\r\ntype FusionChartJson = {\r\n    races: string[],\r\n    elements: string[],\r\n    elementFusionTable: number[][],\r\n    raceFusionTable: string[][]\r\n}\r\ntype Preset = { caption: string, demons: string[] };\r\ntype PresetJSON = { presets: Preset[] };\r\n\r\nexport class DemonCompendium {\r\n    private demonJson: DemonJson;\r\n    private fusionChartJson: FusionChartJson;\r\n    private presetJson?: PresetJSON;\r\n\r\n    private demonAry: Models.Demon[] = [];\r\n    private raceFusionTable: { [race: string]: { [race: string]: string } } = {}; // Maps 2 races to the race that results from their fusion. Example usage: x[\"Fairy\"][\"Genma\"] gives you race that results from fusing a Fairy demon with a Genma demon. Special case: when both of the 2 races are the same, the result is a demon's name instead of a race.\r\n    private demonsPresets: Models.DemonsPreset[] = [];\r\n\r\n    private idMap: { [demonId: number]: Models.Demon } = {}; // Maps id to a demon model object\r\n    private nameMap: { [demonName: string]: Models.Demon } = {} // Maps name to a demon model object\r\n    private raceLvlDemonMap: { [race: string]: { [lvl: number]: Models.Demon } } = {}; // Maps race-lv a demon with that race and lv. Example usage: x[\"Fairy\"][32] gives you a demon that is a lv32 fairy\r\n\r\n    constructor(demonListJSON: DemonJson, fusionChartJSON: FusionChartJson, presetJSON?: PresetJSON) {\r\n        this.demonJson = demonListJSON;\r\n        this.fusionChartJson = fusionChartJSON;\r\n        this.presetJson = presetJSON;\r\n\r\n        this.parseDemons();\r\n        this.prepDemonIds();\r\n\r\n        this.parseRaceFusionTable();\r\n        this.prepRaceLvlInfo();\r\n        \r\n        this.parsePresets();\r\n    }\r\n\r\n    public getDemonById(id: number): Models.Demon | undefined {\r\n        return this.idMap[id];\r\n    }\r\n\r\n    public getDemonByName(name: string): Models.Demon | undefined {\r\n        return this.nameMap[name];\r\n    }\r\n\r\n    public getDemonArray(): Models.Demon[] {\r\n        return this.demonAry;\r\n    }\r\n\r\n    public getDemonPresets(): Models.DemonsPreset[] {\r\n        return this.demonsPresets;\r\n    }\r\n\r\n    public fuseDemons(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        if (demonA.race === ELEMENT_RACE && demonB.race === ELEMENT_RACE) {\r\n            return undefined;\r\n        } else if (demonA.race === ELEMENT_RACE || demonB.race === ELEMENT_RACE) {\r\n            return this.fuseDemonWithElement(demonA, demonB);\r\n        } else if (demonA.race === demonB.race) {\r\n            return this.fuseDemonSameRaceNoEle(demonA, demonB);\r\n        } else {\r\n            return this.fuseDemonDiffRaceNoEle(demonA, demonB);\r\n        }\r\n    }\r\n\r\n    private testGetRandomDemon(): Models.Demon | undefined {\r\n        if (this.demonAry.length === 0) { return undefined };\r\n        const randomDemonIndex: number = Math.floor(Math.random() * this.demonAry.length);\r\n        return this.demonAry[randomDemonIndex];\r\n    }\r\n\r\n    private testGetRandomElement(): Models.Demon | undefined {\r\n        if (this.fusionChartJson.elements.length === 0) {return undefined};\r\n        const randomElementIndex: number = Math.floor(Math.random() * this.fusionChartJson.elements.length);\r\n        return this.getDemonByName(this.fusionChartJson.elements[randomElementIndex]);\r\n    }\r\n\r\n    private parseDemons(): void {\r\n        Models.Demon.statsName = this.demonJson.statsName;\r\n        const demons = this.demonJson.demons;\r\n        for (const demonName in demons) {\r\n            const demon = demons[demonName]\r\n            this.demonAry.push(new Models.Demon(\r\n                0,\r\n                demonName,\r\n                demon.lvl,\r\n                demon.race,\r\n                demon.stats\r\n            ));\r\n        }\r\n    }\r\n\r\n    private parseRaceFusionTable(): void {\r\n        for (let row: number = 0; row < this.fusionChartJson.raceFusionTable.length; row++) {\r\n            for (let col: number = 0; col < this.fusionChartJson.raceFusionTable[row].length; col++) {\r\n                const raceA: string = this.fusionChartJson.races[row];\r\n                const raceB: string = this.fusionChartJson.races[col];\r\n                const raceC: string = this.fusionChartJson.raceFusionTable[row][col];\r\n\r\n                // Set the .raceA.raceB property of the parsed fusion table\r\n                if (!this.raceFusionTable[raceA]) {\r\n                    this.raceFusionTable[raceA] = {};\r\n                }\r\n                this.raceFusionTable[raceA][raceB] = raceC;\r\n\r\n                // Set the .raceB.raceA property of the parsed fusion table\r\n                if (!this.raceFusionTable[raceB]) {\r\n                    this.raceFusionTable[raceB] = {};\r\n                }\r\n                this.raceFusionTable[raceB][raceA] = raceC;\r\n            }\r\n        }\r\n    }\r\n\r\n    private parsePresets(): void {\r\n        if (!this.presetJson) { return; }\r\n        for (const preset of this.presetJson.presets) {\r\n            const demons: Models.Demon[] = [];\r\n            for (const demonName of preset.demons) {\r\n                const demon: Models.Demon | undefined = this.getDemonByName(demonName);\r\n                if (!demon) { continue; }\r\n                demons.push(demon);\r\n            }\r\n            const presetModel = new Models.DemonsPreset(preset.caption, demons);\r\n            this.demonsPresets.push(presetModel);\r\n        }\r\n    }\r\n\r\n    private prepDemonIds(): void {\r\n        this.demonAry = this.demonAry.sort((demon1: Models.Demon, demon2: Models.Demon) => { return demon1.lvl > demon2.lvl ? 1 : -1 }); // sort demons alphabetically\r\n        let id: number = 1;\r\n        for (const demon of this.demonAry) {\r\n            demon.id = id;\r\n            this.idMap[demon.id] = demon;\r\n            this.nameMap[demon.name] = demon;\r\n            id++;\r\n        }\r\n    }\r\n\r\n    private prepRaceLvlInfo(): void {\r\n        for (const demon of this.demonAry) {\r\n            if (!this.raceLvlDemonMap[demon.race]) {\r\n                this.raceLvlDemonMap[demon.race] = {};\r\n            }\r\n            this.raceLvlDemonMap[demon.race][demon.lvl] = demon;\r\n        }\r\n        for (const demon of this.demonAry) {\r\n            demon.rank = this.getLvlTableForRace(demon.race).indexOf(demon.lvl);\r\n        }\r\n    }\r\n\r\n    private getLvlTableForRace(race: string): number[] {\r\n        if (!this.raceLvlDemonMap[race]) {\r\n            return [];\r\n        }\r\n        return Object.keys(this.raceLvlDemonMap[race]).map((key) => { return Number(key) });\r\n    }\r\n\r\n    private getDemonFromRaceLvl(race: string, lvl: number): Models.Demon | undefined {\r\n        if (this.raceLvlDemonMap[race]) {\r\n            if (this.raceLvlDemonMap[race][lvl]) {\r\n                return this.raceLvlDemonMap[race][lvl];\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private getFusionResultRace(raceA: string, raceB: string): string | undefined {\r\n        if (this.raceFusionTable[raceA]) {\r\n            if (this.raceFusionTable[raceA][raceB]) {\r\n                return this.raceFusionTable[raceA][raceB];\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    private fuseDemonDiffRaceNoEle(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const raceR: string | undefined = this.getFusionResultRace(demonA.race, demonB.race);\r\n        if (!raceR) { return undefined; }\r\n        const lvlTableR: number[] = this.getLvlTableForRace(raceR);\r\n        if (lvlTableR.length === 0) { return undefined; }\r\n        const modedLvlTableR: number[] = lvlTableR.map((lvl) => { return 2 * lvl - demonA.lvl - 1 });\r\n        let lvlIndexR = 0;\r\n        for (let i = 0; i < modedLvlTableR.length; i++) {\r\n            if (demonB.lvl > modedLvlTableR[i]) {\r\n                lvlIndexR++;\r\n            }\r\n        }\r\n        if (lvlIndexR >= lvlTableR.length) { lvlIndexR = lvlTableR.length - 1 };\r\n        const lvlR: number = lvlTableR[lvlIndexR];\r\n        return this.getDemonFromRaceLvl(raceR, lvlR)\r\n    }\r\n\r\n    private fuseDemonSameRaceNoEle(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        const elementNameR: string | undefined = this.getFusionResultRace(demonA.race, demonB.race);\r\n        if (!elementNameR) { return undefined; }\r\n        return this.getDemonByName(elementNameR);\r\n    }\r\n\r\n    private fuseDemonWithElement(demonA: Models.Demon, demonB: Models.Demon): Models.Demon | undefined {\r\n        let element, demon;\r\n        if (demonA.race === ELEMENT_RACE) {\r\n            element = demonA;\r\n            demon = demonB;\r\n        } else if (demonB.race === ELEMENT_RACE) {\r\n            element = demonB;\r\n            demon = demonA;\r\n        } else {\r\n            return this.fuseDemonSameRaceNoEle(demonA, demonB);\r\n        }\r\n\r\n        const raceId: number = this.fusionChartJson.races.indexOf(demon.race);\r\n        if (raceId < 0 || raceId >= this.fusionChartJson.elementFusionTable.length) {return undefined;}\r\n        const demonRankChange: number = this.fusionChartJson.elementFusionTable[raceId][element.rank];\r\n        const lvlTable: number[] = this.getLvlTableForRace(demon.race);\r\n        const resultRank: number = demon.rank + demonRankChange;\r\n        if (resultRank < 0 || resultRank >= lvlTable.length) { return undefined };\r\n        return this.getDemonFromRaceLvl(demon.race, lvlTable[resultRank]);\r\n    }\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport { DataGrid, ColDef, CellParams } from '@material-ui/data-grid';\r\nimport { useRef, useEffect } from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport styles from './ui-components.module.scss';\r\n\r\nexport default function FusionIngredientsTable(params: {\r\n  demonCompendium: DemonCompendium\r\n  ingredients: Models.IngredientDemons\r\n  onRemoveIngredient?: (deletedId: number) => void;\r\n}): JSX.Element {\r\n  const { demonCompendium, ingredients, onRemoveIngredient } = params;\r\n\r\n  const columns: ColDef[] = [\r\n    { field: \"name\", headerName: \"Demon\", flex: 1, resizable: false },\r\n    { field: \"lvl\", headerName: \"Level\", width: 70, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n    { field: \"race\", headerName: \"Race\", width: 70, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n    { field: \"remove\", headerName: \" \", width: 50, sortable: false, disableColumnMenu: true, renderCell: createRemoveButtonForCell }\r\n  ]\r\n\r\n  function raiseRemoveIngredientEvent(deletedId: number): void {\r\n    if (onRemoveIngredient) {\r\n      onRemoveIngredient(deletedId);\r\n    }\r\n  }\r\n\r\n  function createRemoveButtonForCell(cellParams: CellParams): JSX.Element {\r\n    const demonId = cellParams.value as number;\r\n    return <IconButton aria-label=\"delete\" onClick={raiseRemoveIngredientEvent.bind(undefined, demonId)}>\r\n      <CancelIcon className={styles.removeDemonButtonIcon}/>\r\n    </IconButton>;\r\n  }\r\n\r\n  const ingredientsAsRowsArray = Object.keys(ingredients).map(\r\n    (demonId, index) => {\r\n      const demonIdAsNumber: number = (demonId as unknown) as number;\r\n      const demon: Models.Demon = demonCompendium.getDemonById(demonIdAsNumber)!;\r\n      return {\r\n        id: index,\r\n        \"name\": demon.name,\r\n        \"lvl\": demon.lvl,\r\n        \"race\": demon.race,\r\n        \"remove\": demon.id\r\n      }\r\n    });\r\n\r\n  // This trick is needed to prevent the table from running into other content\r\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    const gridDiv = gridWrapperRef.current;\r\n    if (gridDiv) {\r\n      const gridEl: HTMLDivElement = gridDiv.firstElementChild as HTMLDivElement;\r\n      gridEl.style.height = \"\";\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"500px\" }} ref={gridWrapperRef}>\r\n      <DataGrid\r\n        rows={ingredientsAsRowsArray}\r\n        columns={columns}\r\n        disableSelectionOnClick={true}\r\n        autoHeight={true}\r\n        density='compact'\r\n        pageSize={25}\r\n        rowsPerPageOptions={[25]}\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\nimport { DataGrid, ColDef, CellParams, ValueGetterParams } from '@material-ui/data-grid';\r\nimport { useRef, useEffect } from 'react';\r\nimport styles from './ui-components.module.scss';\r\n\r\nfunction renderDemonName(demon: Models.FusedDemon): JSX.Element {\r\n    if (demon.isFused()) {\r\n        return <React.Fragment>{demon.demon.name}</React.Fragment>;\r\n    } else {\r\n        return <span className={styles.baseIngredientName}>{demon.demon.name}</span>;\r\n    }\r\n}\r\n\r\nfunction renderRecipe(demon: Models.FusedDemon): JSX.Element {\r\n    let ret: JSX.Element = <React.Fragment/>;\r\n    if (demon.ingredientA && demon.ingredientB) {\r\n        ret = <React.Fragment>{ret}{renderRecipe(demon.ingredientA)}</React.Fragment>;\r\n        ret = <React.Fragment>{ret}{renderRecipe(demon.ingredientB)}</React.Fragment>;\r\n        const nameA = renderDemonName(demon.ingredientA);\r\n        const nameB = renderDemonName(demon.ingredientB);\r\n        const nameR = renderDemonName(demon);\r\n        return <React.Fragment>\r\n            {ret}\r\n            <div className={styles.recipeLine}>\r\n                {nameA} + {nameB} = {nameR}\r\n            </div>\r\n        </React.Fragment>;\r\n    }\r\n    return ret;\r\n}\r\n\r\nfunction renderRecipeWrapper(cellParams: CellParams): JSX.Element {\r\n    return <div>{renderRecipe(cellParams.value as Models.FusedDemon)}</div>;\r\n}\r\n\r\nfunction getRecipeAsString(valueParam: ValueGetterParams): string {\r\n    return (valueParam.value as Models.FusedDemon).toBaseIngredientSearchString();\r\n}\r\n\r\nexport default function FusionResultTable(params: {\r\n    demonCompendium?: DemonCompendium\r\n    fusionResults: Models.FusionResults\r\n  }): JSX.Element {\r\n    const { fusionResults } = params;\r\n  \r\n    const columns: ColDef[] = [\r\n      { field: \"name\", headerName: \"Demon\", width: 120 },\r\n      { field: \"lvl\", headerName: \"Level\", width: 70, headerAlign: \"center\", resizable: false, disableColumnMenu: true },\r\n      { field: \"race\", headerName: \"Race\", width: 100, headerAlign: \"center\", resizable: false }\r\n    ]\r\n    const statsName: string[] = Models.Demon.statsName;\r\n    for (let i = 0; i < statsName.length; i++) {\r\n        columns.push(\r\n            { field: \"stat\" + i, headerName: statsName[i], width: 60, headerAlign: \"center\", resizable: false, disableColumnMenu: true}\r\n        );\r\n    }\r\n    columns.push(\r\n        { field: \"recipe\", headerName: \"Recipe\", flex: 1, renderCell: renderRecipeWrapper, valueGetter: getRecipeAsString});\r\n\r\n    const ingredientsAsRowsArray = [];\r\n    for (const size in fusionResults) {\r\n        if (Number(size) === 1) { continue; }\r\n        for (const demonName in fusionResults[size]) {\r\n            for (const fusedDemon of fusionResults[size][demonName]) {\r\n                const {demon} = fusedDemon;\r\n                const demonRow: any = {\r\n                    \"id\": 0,\r\n                    \"name\": demon.name,\r\n                    \"lvl\": demon.lvl,\r\n                    \"race\": demon.race,\r\n                    \"recipe\": fusedDemon\r\n                };\r\n                for (let i = 0; i < statsName.length; i++) {\r\n                    demonRow[\"stat\" + i] = demon.stats[i];\r\n                }\r\n                ingredientsAsRowsArray.push(demonRow);\r\n            }\r\n        }\r\n    }\r\n    ingredientsAsRowsArray.sort((a, b) => { return b.lvl - a.lvl});\r\n    let id: number = 1;\r\n    for (const row of ingredientsAsRowsArray) {\r\n        row.id = id;\r\n        id++;\r\n    }\r\n  \r\n    // This trick is needed to prevent the table from running into other content\r\n    const gridWrapperRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        const gridDiv = gridWrapperRef.current;\r\n        if (gridDiv){\r\n            const gridEl: HTMLDivElement = gridDiv.querySelector('div')!;\r\n            gridEl.style.height = \"\";\r\n            gridEl.style.width = \"\";\r\n        }\r\n    }, []);\r\n  \r\n    return (\r\n        <DataGrid\r\n            rows={ingredientsAsRowsArray}\r\n            rowHeight={75}\r\n            className={styles.fusionResultsTable}\r\n            columns={columns}\r\n            disableSelectionOnClick={true}\r\n            autoHeight={true}\r\n            rowsPerPageOptions={[10]}\r\n            density='compact'\r\n        />\r\n    );\r\n  }","import React, { KeyboardEvent, useState } from 'react';\r\n\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport styles from './ui-components.module.scss';\r\n\r\nexport default function DemonAdder(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    let presetSection: JSX.Element = <React.Fragment />;\r\n    if (demonCompendium.getDemonPresets().length > 0) { \r\n        presetSection = <React.Fragment>\r\n            <p>Add from presets</p>\r\n            <AddByPreset demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        </React.Fragment>;\r\n    }\r\n\r\n    return <div className={styles.demonAdderContainer}>\r\n        <p>Add by searching</p>\r\n        <AddByDemon demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        <p>Add by using level range</p>\r\n        <AddByLevelRange demonCompendium={demonCompendium} onAddDemon={onAddDemon} />\r\n        {presetSection}\r\n    </div>\r\n}\r\n\r\nfunction AddByDemon(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n    let [selectedDemon, setSelectedDemon] = useState<Models.Demon | null>(null);\r\n    let searchOptions: Models.Demon[] = demonCompendium.getDemonArray();\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: Models.Demon) => {\r\n        setSelectedDemon(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedDemon) {\r\n            onAddDemon([selectedDemon]);\r\n            setSelectedDemon(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedDemon}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.name}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Enter demon name\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddByLevelRange(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    const [minLvl, setMinLvl] = useState<number>(1);\r\n    const [maxLvl, setMaxLvl] = useState<number>(99);\r\n\r\n    function onAddButtonClick(): void {\r\n        const demons: Models.Demon[] = [];\r\n        for (const demon of demonCompendium.getDemonArray()) {\r\n            if (demon.lvl >= minLvl && demon.lvl <= maxLvl) {\r\n                demons.push(demon);\r\n            }\r\n        }\r\n        onAddDemon(demons);\r\n    }\r\n\r\n    function onKeyPress(event: KeyboardEvent<HTMLDivElement>): void {\r\n        const {key} = event;\r\n        if (key === \"-\" || key === \"+\" || key === \".\") {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function onChange(valueSetterFunc: Function, event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const value: number | string = event.target.value;\r\n        const valueAsNumber = Number(value)\r\n        if (value === \"\" || (valueAsNumber >= 1 && valueAsNumber <= 99)) {\r\n            valueSetterFunc(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.subAdderContainer}>\r\n            <div className={styles.lvlFieldsContainer}>\r\n                <TextField\r\n                    label=\"Min Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={minLvl}\r\n                    onChange={onChange.bind(undefined, setMinLvl)}\r\n                    onKeyPress={onKeyPress}\r\n                />\r\n                <TextField\r\n                    label=\"Max Lv\"\r\n                    style={{ width: \"147px\" }}\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    value={maxLvl}\r\n                    onKeyPress={onKeyPress}\r\n                    onChange={onChange.bind(undefined, setMaxLvl)}\r\n                />\r\n            </div>\r\n            <AddButton onClick={onAddButtonClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AddByPreset(params: {\r\n    demonCompendium: DemonCompendium,\r\n    onAddDemon: (demon: Models.Demon[]) => void\r\n}): JSX.Element {\r\n    const { demonCompendium, onAddDemon } = params;\r\n\r\n    type searchOption = { id: number, preset: Models.DemonsPreset };\r\n\r\n    let [selectedOption, setSelectedOption] = useState<searchOption | null>(null);\r\n\r\n    let searchOptions: searchOption[] = [];\r\n    let id: number = 1;\r\n    for (const preset of demonCompendium.getDemonPresets()) {\r\n        searchOptions.push({ id: id, preset: preset });\r\n        id++;\r\n    }\r\n\r\n    const onSearchBarSelectionChange: any = (event: React.ChangeEvent<HTMLInputElement>, selection: searchOption) => {\r\n        setSelectedOption(selection);\r\n    };\r\n\r\n    function onAddButtonClick() {\r\n        raiseOnAddDemonEvent();\r\n    }\r\n\r\n    function onKeyPress(event: React.KeyboardEvent<HTMLDivElement>) {\r\n        if (event.key === \"Enter\") {\r\n            raiseOnAddDemonEvent();\r\n        }\r\n    }\r\n\r\n    function raiseOnAddDemonEvent() {\r\n        if (selectedOption) {\r\n            onAddDemon(selectedOption.preset.demons);\r\n            setSelectedOption(null);\r\n        }\r\n    }\r\n\r\n    return (<div className={styles.subAdderContainer}>\r\n        <Autocomplete\r\n            value={selectedOption}\r\n            options={searchOptions}\r\n            onChange={onSearchBarSelectionChange}\r\n            onKeyPress={onKeyPress}\r\n            getOptionLabel={(option) => option.preset.caption}\r\n            getOptionSelected={(option, value) => { return option.id === value.id }}\r\n            style={{ width: 300 }}\r\n            autoHighlight={true}\r\n            autoSelect={true}\r\n            renderInput={(params) => <TextField {...params} label=\"Select a preset\" variant=\"outlined\" />}\r\n        />\r\n        <AddButton onClick={onAddButtonClick} />\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction AddButton(params: {onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void}): JSX.Element {\r\n    const {onClick} = params;\r\n    return <Button variant=\"outlined\" onClick={onClick} className={styles.addDemonButton}><AddIcon />Add</Button>;\r\n}","// Imports for foundational functionalities\r\nimport React, { useRef, useState } from 'react';\r\n\r\n// Imports for data\r\nimport * as Models from '../data/data-models';\r\nimport { DemonCompendium } from '../data/demon-compendium';\r\n\r\n// Imports for UI components\r\nimport Button from '@material-ui/core/Button';\r\nimport FusionIngredientsTable from './ingredients-table';\r\nimport FusionResultTable from './fusion-result-table';\r\nimport DemonAdder from './demon-adder';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport styles from './fusion-recommender.module.scss';\r\n\r\nconst MAX_FUSION_INGREDIENT = 3;\r\n\r\nfunction FusionRecommender(params: { demonCompendium: DemonCompendium }): JSX.Element {\r\n  const { demonCompendium } = params;\r\n  let [ingredients, setIngredients] = useState<Models.IngredientDemons>({});\r\n  let [fusionResults, setFusionResults] = useState<Models.FusionResults>({});\r\n  let [resetterKey, setResetterKey] = useState<number>(1); // This key is meant to be used to reset components. Changes to this key will trigger components to reset.\r\n  const fusionResultSectionHeader = useRef<HTMLHeadingElement>(null);\r\n\r\n  function addDemonToIngredients(demons: Models.Demon[]): void {\r\n    const newIngredients = { ...ingredients };\r\n    for (const demon of demons) {\r\n      newIngredients[demon.id] = true;\r\n    }\r\n    setIngredients(newIngredients);\r\n  };\r\n\r\n  function removeDemonFromIngredients(demonId: number): void {\r\n    const newIngredients = { ...ingredients };\r\n    delete newIngredients[demonId];\r\n    setIngredients(newIngredients);\r\n  }\r\n\r\n  function onResetButtonClick(): void {\r\n    const newIngredients = {};\r\n    setIngredients(newIngredients);\r\n\r\n    const newFusionResults = {};\r\n    setFusionResults(newFusionResults);\r\n\r\n    setResetterKey((resetterKey + 1) % 2);\r\n  }\r\n\r\n  function calculateAllFusionCombinations(): void {\r\n    const myFusionResults: Models.FusionResults = {};\r\n    for (let size = 1; size <= MAX_FUSION_INGREDIENT; size++) {\r\n      myFusionResults[size] = {};\r\n    }\r\n\r\n    for (const demonId in ingredients) {\r\n      const demon: Models.Demon | undefined = demonCompendium.getDemonById(Number(demonId));\r\n      if (!demon) { continue; }\r\n      const fusedDemon: Models.FusedDemon = new Models.FusedDemon(demon);\r\n      if (!myFusionResults[1][demon.name]) {\r\n        myFusionResults[1][demon.name] = [];\r\n      }\r\n      myFusionResults[1][demon.name].push(fusedDemon);\r\n    }\r\n\r\n    for (let fusMatCount = 2; fusMatCount <= MAX_FUSION_INGREDIENT; fusMatCount++) {\r\n      for (let matCountA = fusMatCount - 1; matCountA >= (fusMatCount / 2); matCountA--) {\r\n        const matCountB: number = fusMatCount - matCountA;\r\n        const speciesUsedAsA: { [id: number]: boolean } = {}; // id of the demon species that have already been used in the calculation as demon A\r\n        for (const nameA in myFusionResults[matCountA]) {\r\n          if (myFusionResults[matCountA][nameA].length === 0) { continue; }\r\n          const speciesA: Models.Demon = myFusionResults[matCountA][nameA][0].demon;\r\n          for (const nameB in myFusionResults[matCountB]) {\r\n            if (myFusionResults[matCountB][nameB].length === 0) { continue; }\r\n            const speciesB: Models.Demon = myFusionResults[matCountB][nameB][0].demon;\r\n\r\n            // skip calculating fusions that should have already been calculated since A+B produces the same results as B+A\r\n            if (speciesUsedAsA[speciesB.id]) { continue; }\r\n\r\n            const speciesR: Models.Demon | undefined = demonCompendium.fuseDemons(speciesA, speciesB);\r\n            if (!speciesR) { continue; }\r\n\r\n            // throw out inefficient fusions that the user can already make using fewer ingredients\r\n            let canBeMadeWithLessIngredient: boolean = false;\r\n            for (let sizeCheck = fusMatCount - 1; sizeCheck >= 1; sizeCheck--) {\r\n              if (myFusionResults[sizeCheck][speciesR.name]) {\r\n                canBeMadeWithLessIngredient = true;\r\n                break;\r\n              }\r\n            }\r\n            if (canBeMadeWithLessIngredient) { continue; }\r\n\r\n            // if this is the final round of fusions, throw out fusions that produce demons that are lower level \r\n            if (fusMatCount === MAX_FUSION_INGREDIENT && (speciesA.lvl > speciesR.lvl || speciesB.lvl > speciesR.lvl)) { continue; }\r\n\r\n            for (const demonA of myFusionResults[matCountA][nameA]) {\r\n              for (const demonB of myFusionResults[matCountB][nameB]) {\r\n                const demonR = new Models.FusedDemon(speciesR, demonA, demonB);\r\n                if (!myFusionResults[fusMatCount][speciesR.name]) {\r\n                  myFusionResults[fusMatCount][speciesR.name] = [];\r\n                }\r\n                myFusionResults[fusMatCount][speciesR.name].push(demonR);\r\n              }\r\n            }\r\n          }\r\n          speciesUsedAsA[speciesA.id] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Re-traverse the entire results and fully purge fusions that produce demons of lower level\r\n    for (const fusionMatCount in myFusionResults) {\r\n      if (Number(fusionMatCount) === 1) { continue; }\r\n      for (const name in myFusionResults[fusionMatCount]) {\r\n        const demonAry: Models.FusedDemon[] = myFusionResults[fusionMatCount][name];\r\n        const filteredDemonAry = demonAry.filter((demon) => { return !demon.isWeakerThanIngredients() })\r\n        myFusionResults[fusionMatCount][name] = filteredDemonAry;\r\n      }\r\n    }\r\n\r\n    setFusionResults(myFusionResults);\r\n\r\n    // Scroll to the fusion result section by using a setTimeout() so it can happen after the section is rendered\r\n    setTimeout(()=>{\r\n      if (fusionResultSectionHeader.current != null) {\r\n        fusionResultSectionHeader.current.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"nearest\"});\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className={styles.fusionRecommender}>\r\n      <h2>Add demons to use as fusion ingredient</h2>\r\n      <div className={styles.addDemonsAndCalcResetButtonContainer}>\r\n        <DemonAdder key={resetterKey} demonCompendium={demonCompendium} onAddDemon={addDemonToIngredients} />\r\n        <div className={styles.calcResetButtonContainer}>\r\n          <Button className={styles.calculateButton} variant=\"outlined\" onClick={calculateAllFusionCombinations} disabled={Object.keys(ingredients).length === 0} ><PlayArrowIcon />Calculate</Button>\r\n          <Button className={styles.resetButton} variant=\"outlined\" onClick={onResetButtonClick}><ReplayIcon />Reset</Button>\r\n        </div>\r\n      </div>\r\n      <h2>Fusion Ingredients</h2>\r\n      <FusionIngredientsTable demonCompendium={demonCompendium} ingredients={ingredients} onRemoveIngredient={removeDemonFromIngredients} />\r\n      <h2 ref={fusionResultSectionHeader}>Results</h2>\r\n      <FusionResultTable demonCompendium={demonCompendium} fusionResults={fusionResults} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FusionRecommender;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { DemonCompendium } from './data/demon-compendium';\r\nimport FusionRecommender from './ui-components/fusion-recommender';\r\n\r\nimport './App.scss';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  typography: {\r\n    fontFamily: \"sans-serif\",\r\n    fontSize: 14\r\n  }\r\n});\r\n\r\nfunction loadDesu2DemonCompendium(callback: (demonCompendium: DemonCompendium) => void): void {\r\n  const demonListJsonPromise = import(\"./desu2/demons.json\").then(importedJson => importedJson.default);\r\n  const fusionChartJsonPromise = import(\"./desu2/fusion-chart.json\").then(importedJson => importedJson.default);\r\n  const presetJsonPromise = import(\"./desu2/presets.json\").then(importedJson => importedJson.default);\r\n  Promise.all([demonListJsonPromise, fusionChartJsonPromise, presetJsonPromise]).then(loadedJsons => {\r\n    const newDemonCompendium = new DemonCompendium(loadedJsons[0], loadedJsons[1], loadedJsons[2]);\r\n    callback(newDemonCompendium);\r\n  })\r\n}\r\n\r\nexport default function App(): JSX.Element {\r\n  const [demonCompendium, setDemonCompendium] = useState<DemonCompendium | undefined>(undefined);\r\n\r\n  useEffect(()=>{\r\n    if (!demonCompendium) {\r\n      loadDesu2DemonCompendium(setDemonCompendium);\r\n    }\r\n  }, [demonCompendium]);\r\n\r\n  let fusionRecommender: JSX.Element = (demonCompendium) ? <FusionRecommender demonCompendium={demonCompendium} /> : <React.Fragment />;\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <div className=\"myApp\">\r\n        <header className=\"App-header\">\r\n          <h1>Megami Tensei Fusion Recommender</h1>\r\n        </header>\r\n        {fusionRecommender}\r\n      </div>\r\n    </ThemeProvider>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demonAdderContainer\":\"ui-components_demonAdderContainer__2j3Dm\",\"subAdderContainer\":\"ui-components_subAdderContainer__wG2As\",\"lvlFieldsContainer\":\"ui-components_lvlFieldsContainer__1OXHc\",\"addDemonButton\":\"ui-components_addDemonButton__1BBcP\",\"removeDemonButtonIcon\":\"ui-components_removeDemonButtonIcon__2ga3t\",\"fusionResultsTable\":\"ui-components_fusionResultsTable__2Hl-s\",\"baseIngredientName\":\"ui-components_baseIngredientName__18Eu_\",\"recipeLine\":\"ui-components_recipeLine__12QIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fusionRecommender\":\"fusion-recommender_fusionRecommender__zW_X6\",\"addDemonsAndCalcResetButtonContainer\":\"fusion-recommender_addDemonsAndCalcResetButtonContainer__2ixcY\",\"calcResetButtonContainer\":\"fusion-recommender_calcResetButtonContainer__2ApJ-\",\"calculateButton\":\"fusion-recommender_calculateButton__31QNj\",\"shining\":\"fusion-recommender_shining__1og21\",\"resetButton\":\"fusion-recommender_resetButton__3V_j0\"};"],"sourceRoot":""}